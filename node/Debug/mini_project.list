
mini_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a53c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800a728  0800a728  0001a728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abec  0800abec  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800abec  0800abec  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800abec  0800abec  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abec  0800abec  0001abec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abf0  0800abf0  0001abf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800abf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  200001d4  0800adc8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  0800adc8  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd9a  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024b1  00000000  00000000  0002ffda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  00032490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc9  00000000  00000000  000334d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003725  00000000  00000000  00034199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013713  00000000  00000000  000378be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cdb3  00000000  00000000  0004afd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c48  00000000  00000000  000e7d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ed9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a70c 	.word	0x0800a70c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	0800a70c 	.word	0x0800a70c

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpun>:
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__aeabi_dcmpun+0x10>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x20>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0001 	mov.w	r0, #1
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	; 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fmul>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d06f      	beq.n	8000f68 <__aeabi_fmul+0xf8>
 8000e88:	441a      	add	r2, r3
 8000e8a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e8e:	0240      	lsls	r0, r0, #9
 8000e90:	bf18      	it	ne
 8000e92:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e96:	d01e      	beq.n	8000ed6 <__aeabi_fmul+0x66>
 8000e98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e9c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ea0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ea4:	fba0 3101 	umull	r3, r1, r0, r1
 8000ea8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000eb0:	bf3e      	ittt	cc
 8000eb2:	0049      	lslcc	r1, r1, #1
 8000eb4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000eb8:	005b      	lslcc	r3, r3, #1
 8000eba:	ea40 0001 	orr.w	r0, r0, r1
 8000ebe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ec2:	2afd      	cmp	r2, #253	; 0xfd
 8000ec4:	d81d      	bhi.n	8000f02 <__aeabi_fmul+0x92>
 8000ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ece:	bf08      	it	eq
 8000ed0:	f020 0001 	biceq.w	r0, r0, #1
 8000ed4:	4770      	bx	lr
 8000ed6:	f090 0f00 	teq	r0, #0
 8000eda:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ede:	bf08      	it	eq
 8000ee0:	0249      	lsleq	r1, r1, #9
 8000ee2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000eea:	3a7f      	subs	r2, #127	; 0x7f
 8000eec:	bfc2      	ittt	gt
 8000eee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef6:	4770      	bxgt	lr
 8000ef8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	3a01      	subs	r2, #1
 8000f02:	dc5d      	bgt.n	8000fc0 <__aeabi_fmul+0x150>
 8000f04:	f112 0f19 	cmn.w	r2, #25
 8000f08:	bfdc      	itt	le
 8000f0a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f0e:	4770      	bxle	lr
 8000f10:	f1c2 0200 	rsb	r2, r2, #0
 8000f14:	0041      	lsls	r1, r0, #1
 8000f16:	fa21 f102 	lsr.w	r1, r1, r2
 8000f1a:	f1c2 0220 	rsb	r2, r2, #32
 8000f1e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f22:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f26:	f140 0000 	adc.w	r0, r0, #0
 8000f2a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f2e:	bf08      	it	eq
 8000f30:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f34:	4770      	bx	lr
 8000f36:	f092 0f00 	teq	r2, #0
 8000f3a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f3e:	bf02      	ittt	eq
 8000f40:	0040      	lsleq	r0, r0, #1
 8000f42:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f46:	3a01      	subeq	r2, #1
 8000f48:	d0f9      	beq.n	8000f3e <__aeabi_fmul+0xce>
 8000f4a:	ea40 000c 	orr.w	r0, r0, ip
 8000f4e:	f093 0f00 	teq	r3, #0
 8000f52:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f56:	bf02      	ittt	eq
 8000f58:	0049      	lsleq	r1, r1, #1
 8000f5a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f5e:	3b01      	subeq	r3, #1
 8000f60:	d0f9      	beq.n	8000f56 <__aeabi_fmul+0xe6>
 8000f62:	ea41 010c 	orr.w	r1, r1, ip
 8000f66:	e78f      	b.n	8000e88 <__aeabi_fmul+0x18>
 8000f68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f6c:	ea92 0f0c 	teq	r2, ip
 8000f70:	bf18      	it	ne
 8000f72:	ea93 0f0c 	teqne	r3, ip
 8000f76:	d00a      	beq.n	8000f8e <__aeabi_fmul+0x11e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	d1d8      	bne.n	8000f36 <__aeabi_fmul+0xc6>
 8000f84:	ea80 0001 	eor.w	r0, r0, r1
 8000f88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f8c:	4770      	bx	lr
 8000f8e:	f090 0f00 	teq	r0, #0
 8000f92:	bf17      	itett	ne
 8000f94:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f98:	4608      	moveq	r0, r1
 8000f9a:	f091 0f00 	teqne	r1, #0
 8000f9e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000fa2:	d014      	beq.n	8000fce <__aeabi_fmul+0x15e>
 8000fa4:	ea92 0f0c 	teq	r2, ip
 8000fa8:	d101      	bne.n	8000fae <__aeabi_fmul+0x13e>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	d10f      	bne.n	8000fce <__aeabi_fmul+0x15e>
 8000fae:	ea93 0f0c 	teq	r3, ip
 8000fb2:	d103      	bne.n	8000fbc <__aeabi_fmul+0x14c>
 8000fb4:	024b      	lsls	r3, r1, #9
 8000fb6:	bf18      	it	ne
 8000fb8:	4608      	movne	r0, r1
 8000fba:	d108      	bne.n	8000fce <__aeabi_fmul+0x15e>
 8000fbc:	ea80 0001 	eor.w	r0, r0, r1
 8000fc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fcc:	4770      	bx	lr
 8000fce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fd2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fd6:	4770      	bx	lr

08000fd8 <__aeabi_fdiv>:
 8000fd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fdc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fe0:	bf1e      	ittt	ne
 8000fe2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fe6:	ea92 0f0c 	teqne	r2, ip
 8000fea:	ea93 0f0c 	teqne	r3, ip
 8000fee:	d069      	beq.n	80010c4 <__aeabi_fdiv+0xec>
 8000ff0:	eba2 0203 	sub.w	r2, r2, r3
 8000ff4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ff8:	0249      	lsls	r1, r1, #9
 8000ffa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ffe:	d037      	beq.n	8001070 <__aeabi_fdiv+0x98>
 8001000:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001004:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001008:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800100c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001010:	428b      	cmp	r3, r1
 8001012:	bf38      	it	cc
 8001014:	005b      	lslcc	r3, r3, #1
 8001016:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800101a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800101e:	428b      	cmp	r3, r1
 8001020:	bf24      	itt	cs
 8001022:	1a5b      	subcs	r3, r3, r1
 8001024:	ea40 000c 	orrcs.w	r0, r0, ip
 8001028:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800102c:	bf24      	itt	cs
 800102e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001032:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001036:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800103a:	bf24      	itt	cs
 800103c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001040:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001044:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001048:	bf24      	itt	cs
 800104a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800104e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	bf18      	it	ne
 8001056:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800105a:	d1e0      	bne.n	800101e <__aeabi_fdiv+0x46>
 800105c:	2afd      	cmp	r2, #253	; 0xfd
 800105e:	f63f af50 	bhi.w	8000f02 <__aeabi_fmul+0x92>
 8001062:	428b      	cmp	r3, r1
 8001064:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001068:	bf08      	it	eq
 800106a:	f020 0001 	biceq.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001074:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001078:	327f      	adds	r2, #127	; 0x7f
 800107a:	bfc2      	ittt	gt
 800107c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001080:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001084:	4770      	bxgt	lr
 8001086:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	3a01      	subs	r2, #1
 8001090:	e737      	b.n	8000f02 <__aeabi_fmul+0x92>
 8001092:	f092 0f00 	teq	r2, #0
 8001096:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800109a:	bf02      	ittt	eq
 800109c:	0040      	lsleq	r0, r0, #1
 800109e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010a2:	3a01      	subeq	r2, #1
 80010a4:	d0f9      	beq.n	800109a <__aeabi_fdiv+0xc2>
 80010a6:	ea40 000c 	orr.w	r0, r0, ip
 80010aa:	f093 0f00 	teq	r3, #0
 80010ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010b2:	bf02      	ittt	eq
 80010b4:	0049      	lsleq	r1, r1, #1
 80010b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010ba:	3b01      	subeq	r3, #1
 80010bc:	d0f9      	beq.n	80010b2 <__aeabi_fdiv+0xda>
 80010be:	ea41 010c 	orr.w	r1, r1, ip
 80010c2:	e795      	b.n	8000ff0 <__aeabi_fdiv+0x18>
 80010c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010c8:	ea92 0f0c 	teq	r2, ip
 80010cc:	d108      	bne.n	80010e0 <__aeabi_fdiv+0x108>
 80010ce:	0242      	lsls	r2, r0, #9
 80010d0:	f47f af7d 	bne.w	8000fce <__aeabi_fmul+0x15e>
 80010d4:	ea93 0f0c 	teq	r3, ip
 80010d8:	f47f af70 	bne.w	8000fbc <__aeabi_fmul+0x14c>
 80010dc:	4608      	mov	r0, r1
 80010de:	e776      	b.n	8000fce <__aeabi_fmul+0x15e>
 80010e0:	ea93 0f0c 	teq	r3, ip
 80010e4:	d104      	bne.n	80010f0 <__aeabi_fdiv+0x118>
 80010e6:	024b      	lsls	r3, r1, #9
 80010e8:	f43f af4c 	beq.w	8000f84 <__aeabi_fmul+0x114>
 80010ec:	4608      	mov	r0, r1
 80010ee:	e76e      	b.n	8000fce <__aeabi_fmul+0x15e>
 80010f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010f4:	bf18      	it	ne
 80010f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010fa:	d1ca      	bne.n	8001092 <__aeabi_fdiv+0xba>
 80010fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001100:	f47f af5c 	bne.w	8000fbc <__aeabi_fmul+0x14c>
 8001104:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001108:	f47f af3c 	bne.w	8000f84 <__aeabi_fmul+0x114>
 800110c:	e75f      	b.n	8000fce <__aeabi_fmul+0x15e>
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fcc3 	bl	8000aa8 <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff fa39 	bl	80005c4 <__aeabi_dmul>
 8001152:	f7ff fd0f 	bl	8000b74 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f9ba 	bl	80004d0 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff fa30 	bl	80005c4 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7ff f872 	bl	8000254 <__aeabi_dsub>
 8001170:	f7ff fd00 	bl	8000b74 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <DHT20_I2C_Delay>:
 */

#ifndef SRC_DHT20_C_
#define SRC_DHT20_C_
#include "DHT20.h"
static void DHT20_I2C_Delay(uint16_t time){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 ffcb 	bl	8002128 <HAL_Delay>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <DHT20_I2C_Init>:
void DHT20_I2C_Init( DHT20_I2C_DEVICE* DHT20,I2C_HandleTypeDef* hi2c ,uint8_t address){
 800119a:	b580      	push	{r7, lr}
 800119c:	b088      	sub	sp, #32
 800119e:	af02      	add	r7, sp, #8
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	4613      	mov	r3, r2
 80011a6:	71fb      	strb	r3, [r7, #7]
	DHT20_I2C_Delay(150);
 80011a8:	2096      	movs	r0, #150	; 0x96
 80011aa:	f7ff ffe9 	bl	8001180 <DHT20_I2C_Delay>
	DHT20->hi2c = hi2c;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	601a      	str	r2, [r3, #0]
	DHT20->address = address;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	79fa      	ldrb	r2, [r7, #7]
 80011b8:	711a      	strb	r2, [r3, #4]
	uint8_t dataBuffer[4];
	dataBuffer[0] = 0x70;
 80011ba:	2370      	movs	r3, #112	; 0x70
 80011bc:	753b      	strb	r3, [r7, #20]
	dataBuffer[1] = 0xA8;
 80011be:	23a8      	movs	r3, #168	; 0xa8
 80011c0:	757b      	strb	r3, [r7, #21]
	dataBuffer[2] = 0x00;
 80011c2:	2300      	movs	r3, #0
 80011c4:	75bb      	strb	r3, [r7, #22]
	dataBuffer[3] = 0x00;
 80011c6:	2300      	movs	r3, #0
 80011c8:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(DHT20->hi2c , DHT20->address<<1 | DHT20_Write, dataBuffer, sizeof(dataBuffer) , 100);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	791b      	ldrb	r3, [r3, #4]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	b299      	uxth	r1, r3
 80011d8:	f107 0214 	add.w	r2, r7, #20
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2304      	movs	r3, #4
 80011e2:	f001 fd05 	bl	8002bf0 <HAL_I2C_Master_Transmit>
	DHT20_I2C_Delay(10);
 80011e6:	200a      	movs	r0, #10
 80011e8:	f7ff ffca 	bl	8001180 <DHT20_I2C_Delay>
	dataBuffer[0] = 0x70;
 80011ec:	2370      	movs	r3, #112	; 0x70
 80011ee:	753b      	strb	r3, [r7, #20]
	dataBuffer[1] = 0xBE;
 80011f0:	23be      	movs	r3, #190	; 0xbe
 80011f2:	757b      	strb	r3, [r7, #21]
	dataBuffer[2] = 0x08;
 80011f4:	2308      	movs	r3, #8
 80011f6:	75bb      	strb	r3, [r7, #22]
	dataBuffer[3] = 0x00;
 80011f8:	2300      	movs	r3, #0
 80011fa:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(DHT20->hi2c , DHT20->address<<1 | DHT20_Write, dataBuffer, sizeof(dataBuffer) , 100);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	b29b      	uxth	r3, r3
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	b299      	uxth	r1, r3
 800120a:	f107 0214 	add.w	r2, r7, #20
 800120e:	2364      	movs	r3, #100	; 0x64
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2304      	movs	r3, #4
 8001214:	f001 fcec 	bl	8002bf0 <HAL_I2C_Master_Transmit>
	DHT20_I2C_Delay(10);
 8001218:	200a      	movs	r0, #10
 800121a:	f7ff ffb1 	bl	8001180 <DHT20_I2C_Delay>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <DHT20_I2C_TriggerMeasurement>:
	HAL_I2C_Master_Transmit(DHT20->hi2c,  DHT20->address<<1 | DHT20_Write, &dataBuffer, 1, 100);
	HAL_I2C_Master_Receive(DHT20->hi2c,  DHT20->address<<1 | DHT20_READ, &status, 1, 100);
	return status;
}

void DHT20_I2C_TriggerMeasurement(DHT20_I2C_DEVICE* DHT20){
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af02      	add	r7, sp, #8
 800122c:	6078      	str	r0, [r7, #4]
	uint8_t dataBuffer[4];
	dataBuffer[0] = 0x70;
 800122e:	2370      	movs	r3, #112	; 0x70
 8001230:	733b      	strb	r3, [r7, #12]
	dataBuffer[1] = 0xAC;
 8001232:	23ac      	movs	r3, #172	; 0xac
 8001234:	737b      	strb	r3, [r7, #13]
	dataBuffer[2] = 0x33;
 8001236:	2333      	movs	r3, #51	; 0x33
 8001238:	73bb      	strb	r3, [r7, #14]
	dataBuffer[3] = 0x00;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(DHT20->hi2c , DHT20->address<<1  | DHT20_Write, dataBuffer, sizeof(dataBuffer) , 100);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	791b      	ldrb	r3, [r3, #4]
 8001246:	b29b      	uxth	r3, r3
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	b299      	uxth	r1, r3
 800124c:	f107 020c 	add.w	r2, r7, #12
 8001250:	2364      	movs	r3, #100	; 0x64
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2304      	movs	r3, #4
 8001256:	f001 fccb 	bl	8002bf0 <HAL_I2C_Master_Transmit>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <DHT20_I2C_Read>:

void DHT20_I2C_Read(DHT20_I2C_DEVICE* DHT20, float* temp, float* humi){
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af02      	add	r7, sp, #8
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
	uint8_t   dataBuffer[7] ={0};
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2100      	movs	r1, #0
 800127a:	460a      	mov	r2, r1
 800127c:	801a      	strh	r2, [r3, #0]
 800127e:	460a      	mov	r2, r1
 8001280:	709a      	strb	r2, [r3, #2]
	uint32_t temp_data = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
	uint32_t humi_data = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
	// send request to Dht20 in order to trigger measurement
	DHT20_I2C_TriggerMeasurement(DHT20);
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff ffcb 	bl	8001226 <DHT20_I2C_TriggerMeasurement>
	DHT20_I2C_Delay(80);
 8001290:	2050      	movs	r0, #80	; 0x50
 8001292:	f7ff ff75 	bl	8001180 <DHT20_I2C_Delay>
	// if(status == 0x80 it means dht20 is complete measurement)

	HAL_I2C_Master_Receive(DHT20->hi2c,  DHT20->address<<1 | DHT20_READ, dataBuffer,sizeof(dataBuffer)  , 100);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	b299      	uxth	r1, r3
 80012aa:	f107 0210 	add.w	r2, r7, #16
 80012ae:	2364      	movs	r3, #100	; 0x64
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2307      	movs	r3, #7
 80012b4:	f001 fd9a 	bl	8002dec <HAL_I2C_Master_Receive>

	// get bytes of humi
	humi_data = (humi_data | dataBuffer[1]) << 8;
 80012b8:	7c7b      	ldrb	r3, [r7, #17]
 80012ba:	461a      	mov	r2, r3
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	61bb      	str	r3, [r7, #24]
	humi_data = (humi_data | dataBuffer[2]) << 8;
 80012c4:	7cbb      	ldrb	r3, [r7, #18]
 80012c6:	461a      	mov	r2, r3
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	61bb      	str	r3, [r7, #24]
	humi_data = (humi_data | dataBuffer[3]) >> 4;
 80012d0:	7cfb      	ldrb	r3, [r7, #19]
 80012d2:	461a      	mov	r2, r3
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	61bb      	str	r3, [r7, #24]
	//get bytes of data
	temp_data = (temp_data | dataBuffer[3]) << 8;
 80012dc:	7cfb      	ldrb	r3, [r7, #19]
 80012de:	461a      	mov	r2, r3
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	61fb      	str	r3, [r7, #28]
	temp_data = (temp_data | dataBuffer[4]) << 8;
 80012e8:	7d3b      	ldrb	r3, [r7, #20]
 80012ea:	461a      	mov	r2, r3
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	61fb      	str	r3, [r7, #28]
	temp_data = (temp_data | dataBuffer[5]);
 80012f4:	7d7b      	ldrb	r3, [r7, #21]
 80012f6:	461a      	mov	r2, r3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61fb      	str	r3, [r7, #28]
	temp_data = temp_data & 0x000FFFFF;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001304:	61fb      	str	r3, [r7, #28]

	*temp = (float) temp_data*200/1024/1024 - 50;
 8001306:	69f8      	ldr	r0, [r7, #28]
 8001308:	f7ff fd5a 	bl	8000dc0 <__aeabi_ui2f>
 800130c:	4603      	mov	r3, r0
 800130e:	491a      	ldr	r1, [pc, #104]	; (8001378 <DHT20_I2C_Read+0x114>)
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fdad 	bl	8000e70 <__aeabi_fmul>
 8001316:	4603      	mov	r3, r0
 8001318:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fe5b 	bl	8000fd8 <__aeabi_fdiv>
 8001322:	4603      	mov	r3, r0
 8001324:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fe55 	bl	8000fd8 <__aeabi_fdiv>
 800132e:	4603      	mov	r3, r0
 8001330:	4912      	ldr	r1, [pc, #72]	; (800137c <DHT20_I2C_Read+0x118>)
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fc92 	bl	8000c5c <__aeabi_fsub>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	601a      	str	r2, [r3, #0]
	*humi = (float) humi_data*100/1024/1024;
 8001340:	69b8      	ldr	r0, [r7, #24]
 8001342:	f7ff fd3d 	bl	8000dc0 <__aeabi_ui2f>
 8001346:	4603      	mov	r3, r0
 8001348:	490d      	ldr	r1, [pc, #52]	; (8001380 <DHT20_I2C_Read+0x11c>)
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fd90 	bl	8000e70 <__aeabi_fmul>
 8001350:	4603      	mov	r3, r0
 8001352:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fe3e 	bl	8000fd8 <__aeabi_fdiv>
 800135c:	4603      	mov	r3, r0
 800135e:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fe38 	bl	8000fd8 <__aeabi_fdiv>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	43480000 	.word	0x43480000
 800137c:	42480000 	.word	0x42480000
 8001380:	42c80000 	.word	0x42c80000

08001384 <buffer_init>:
 *
 *  Created on: May 4, 2024
 *      Author: NHAN
 */
#include "buffer.h"
void buffer_init(Buffer* buffer){
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	buffer->front =0;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	buffer->rear = 0;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	buffer->size = 0;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <read_buffer>:

uint8_t read_buffer(Buffer* buffer, uint8_t* data, uint8_t size){
 80013ae:	b480      	push	{r7}
 80013b0:	b087      	sub	sp, #28
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	4613      	mov	r3, r2
 80013ba:	71fb      	strb	r3, [r7, #7]
	// count: bytes read success full
	uint8_t count = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	75fb      	strb	r3, [r7, #23]
	if (buffer->data == NULL ) return 0;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <read_buffer+0x1c>
 80013c6:	2300      	movs	r3, #0
 80013c8:	e038      	b.n	800143c <read_buffer+0x8e>
	if (buffer->size == 0) return 0;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <read_buffer+0x2a>
 80013d4:	2300      	movs	r3, #0
 80013d6:	e031      	b.n	800143c <read_buffer+0x8e>

	for (int i = 0; i < size; ++i){
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	e029      	b.n	8001432 <read_buffer+0x84>
		data[i] = buffer->data[buffer->front];
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80013e4:	4619      	mov	r1, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	4413      	add	r3, r2
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	5c52      	ldrb	r2, [r2, r1]
 80013f0:	701a      	strb	r2, [r3, #0]
		buffer->front++;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
		buffer->size++;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8001408:	3301      	adds	r3, #1
 800140a:	b2da      	uxtb	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
		count++;
 8001412:	7dfb      	ldrb	r3, [r7, #23]
 8001414:	3301      	adds	r3, #1
 8001416:	75fb      	strb	r3, [r7, #23]
		if (buffer->front > MAX_BUFFER_SIZE){
				buffer->front = 0;
		}
		// buffer is empty cannot read more
		if (buffer->front == buffer->rear) return count;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8001424:	429a      	cmp	r2, r3
 8001426:	d101      	bne.n	800142c <read_buffer+0x7e>
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	e007      	b.n	800143c <read_buffer+0x8e>
	for (int i = 0; i < size; ++i){
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	3301      	adds	r3, #1
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	429a      	cmp	r2, r3
 8001438:	dbd1      	blt.n	80013de <read_buffer+0x30>
	}
	return count;
 800143a:	7dfb      	ldrb	r3, [r7, #23]

}
 800143c:	4618      	mov	r0, r3
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <write_buffer>:
uint8_t write_buffer(Buffer* buffer, uint8_t* data, uint8_t size){
 8001446:	b480      	push	{r7}
 8001448:	b087      	sub	sp, #28
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	4613      	mov	r3, r2
 8001452:	71fb      	strb	r3, [r7, #7]
	// count: bytes write success full
	uint8_t count = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	75fb      	strb	r3, [r7, #23]
	if (data == NULL) return 0;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <write_buffer+0x1c>
 800145e:	2300      	movs	r3, #0
 8001460:	e030      	b.n	80014c4 <write_buffer+0x7e>
	if(buffer->size == MAX_BUFFER_SIZE) return 0;

	for (int i = 0; i < size; ++i){
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e028      	b.n	80014ba <write_buffer+0x74>
		buffer->data[buffer->rear] = data[i];
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4413      	add	r3, r2
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	f892 212d 	ldrb.w	r2, [r2, #301]	; 0x12d
 8001474:	7819      	ldrb	r1, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	5499      	strb	r1, [r3, r2]
		buffer->rear++;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8001480:	3301      	adds	r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
		buffer->size--;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8001490:	3b01      	subs	r3, #1
 8001492:	b2da      	uxtb	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
		count++;
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	3301      	adds	r3, #1
 800149e:	75fb      	strb	r3, [r7, #23]
		if (buffer->rear > MAX_BUFFER_SIZE){
				buffer->rear = 0;
		}
		// buffer is full can not write more
		if ( buffer->rear == buffer->front) return count;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d101      	bne.n	80014b4 <write_buffer+0x6e>
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	e007      	b.n	80014c4 <write_buffer+0x7e>
	for (int i = 0; i < size; ++i){
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	3301      	adds	r3, #1
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbd2      	blt.n	8001468 <write_buffer+0x22>
	}
	return count;
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
	...

080014d0 <parse_command>:
#define NOT_IN_COMMAND 					0
#define STARTING_PARSE_COMMAND     	1
#define FINISHED_PARSE_COMMAND 		2


void parse_command(char* command, uint8_t size,uint8_t value){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0c2      	sub	sp, #264	; 0x108
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014de:	6018      	str	r0, [r3, #0]
 80014e0:	4608      	mov	r0, r1
 80014e2:	4611      	mov	r1, r2
 80014e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014e8:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 80014ec:	4602      	mov	r2, r0
 80014ee:	701a      	strb	r2, [r3, #0]
 80014f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014f4:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 80014f8:	460a      	mov	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
	// continue to do
	char raise [255] = {0};
 80014fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001500:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	3304      	adds	r3, #4
 800150a:	22fb      	movs	r2, #251	; 0xfb
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f005 f8d5 	bl	80066be <memset>
	HAL_UART_Transmit(&huart1, raise, sprintf(raise,"![PARSE]:OK# \n"), 1000);
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	4927      	ldr	r1, [pc, #156]	; (80015b8 <parse_command+0xe8>)
 800151a:	4618      	mov	r0, r3
 800151c:	f005 f840 	bl	80065a0 <siprintf>
 8001520:	4603      	mov	r3, r0
 8001522:	b29a      	uxth	r2, r3
 8001524:	f107 0108 	add.w	r1, r7, #8
 8001528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152c:	4823      	ldr	r0, [pc, #140]	; (80015bc <parse_command+0xec>)
 800152e:	f003 fae1 	bl	8004af4 <HAL_UART_Transmit>
	if (command == NULL) return;
 8001532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d035      	beq.n	80015ac <parse_command+0xdc>
	if (strcmp(command,"LED") == 0){
 8001540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001548:	491d      	ldr	r1, [pc, #116]	; (80015c0 <parse_command+0xf0>)
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	f7fe fe6c 	bl	8000228 <strcmp>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10f      	bne.n	8001576 <parse_command+0xa6>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, value? RESET:SET);
 8001556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800155a:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf0c      	ite	eq
 8001564:	2301      	moveq	r3, #1
 8001566:	2300      	movne	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001570:	4814      	ldr	r0, [pc, #80]	; (80015c4 <parse_command+0xf4>)
 8001572:	f001 f9e1 	bl	8002938 <HAL_GPIO_WritePin>
	}
	if (strcmp(command,"FAN") == 0){
 8001576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800157a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800157e:	4912      	ldr	r1, [pc, #72]	; (80015c8 <parse_command+0xf8>)
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	f7fe fe51 	bl	8000228 <strcmp>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d110      	bne.n	80015ae <parse_command+0xde>
		HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, value? RESET:SET);
 800158c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001590:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	2104      	movs	r1, #4
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <parse_command+0xfc>)
 80015a6:	f001 f9c7 	bl	8002938 <HAL_GPIO_WritePin>
 80015aa:	e000      	b.n	80015ae <parse_command+0xde>
	if (command == NULL) return;
 80015ac:	bf00      	nop
	}
}
 80015ae:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	0800a728 	.word	0x0800a728
 80015bc:	2000028c 	.word	0x2000028c
 80015c0:	0800a738 	.word	0x0800a738
 80015c4:	40010800 	.word	0x40010800
 80015c8:	0800a73c 	.word	0x0800a73c
 80015cc:	40011400 	.word	0x40011400

080015d0 <get_command>:

uint8_t state_command = NOT_IN_COMMAND;
void get_command(){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0c2      	sub	sp, #264	; 0x108
 80015d4:	af00      	add	r7, sp, #0
	char data = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if (read_buffer(&buffer_uart, &data, 1)){
 80015dc:	f207 1307 	addw	r3, r7, #263	; 0x107
 80015e0:	2201      	movs	r2, #1
 80015e2:	4619      	mov	r1, r3
 80015e4:	4838      	ldr	r0, [pc, #224]	; (80016c8 <get_command+0xf8>)
 80015e6:	f7ff fee2 	bl	80013ae <read_buffer>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <get_command+0x26>
//		HAL_UART_Transmit(&huart1, (uint8_t*)sending,sprintf(sending, "[RECIEVE]  data: %c \r\n",data),1000);
		buffer_flag = 0;
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <get_command+0xfc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
	}

	switch(state_command){
 80015f6:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <get_command+0x100>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d030      	beq.n	8001660 <get_command+0x90>
 80015fe:	2b02      	cmp	r3, #2
 8001600:	dc5d      	bgt.n	80016be <get_command+0xee>
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <get_command+0x3c>
 8001606:	2b01      	cmp	r3, #1
 8001608:	d015      	beq.n	8001636 <get_command+0x66>
				index_command_buffer = 0;
				strcpy(command_buffer, "");
				state_command = NOT_IN_COMMAND;
				break;
	}
}
 800160a:	e058      	b.n	80016be <get_command+0xee>
			if (data == '!'){
 800160c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001610:	2b21      	cmp	r3, #33	; 0x21
 8001612:	d151      	bne.n	80016b8 <get_command+0xe8>
				command_buffer[index_command_buffer] = data;
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <get_command+0x104>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	f897 1107 	ldrb.w	r1, [r7, #263]	; 0x107
 800161e:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <get_command+0x108>)
 8001620:	5499      	strb	r1, [r3, r2]
				index_command_buffer++;
 8001622:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <get_command+0x104>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <get_command+0x104>)
 800162c:	701a      	strb	r2, [r3, #0]
				state_command = STARTING_PARSE_COMMAND;
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <get_command+0x100>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
			break;
 8001634:	e040      	b.n	80016b8 <get_command+0xe8>
				command_buffer[index_command_buffer] = data;
 8001636:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <get_command+0x104>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	f897 1107 	ldrb.w	r1, [r7, #263]	; 0x107
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <get_command+0x108>)
 8001642:	5499      	strb	r1, [r3, r2]
				index_command_buffer++;
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <get_command+0x104>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <get_command+0x104>)
 800164e:	701a      	strb	r2, [r3, #0]
				if(data == '#'){
 8001650:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001654:	2b23      	cmp	r3, #35	; 0x23
 8001656:	d131      	bne.n	80016bc <get_command+0xec>
						state_command = FINISHED_PARSE_COMMAND;
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <get_command+0x100>)
 800165a:	2202      	movs	r2, #2
 800165c:	701a      	strb	r2, [r3, #0]
				break;
 800165e:	e02d      	b.n	80016bc <get_command+0xec>
				char command[255] = {0};
 8001660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001664:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	3304      	adds	r3, #4
 800166e:	22fb      	movs	r2, #251	; 0xfb
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f005 f823 	bl	80066be <memset>
				uint8_t value = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				sscanf(command_buffer, "!%[^:]:%d#", command, &value);
 800167e:	f507 7383 	add.w	r3, r7, #262	; 0x106
 8001682:	1d3a      	adds	r2, r7, #4
 8001684:	4915      	ldr	r1, [pc, #84]	; (80016dc <get_command+0x10c>)
 8001686:	4814      	ldr	r0, [pc, #80]	; (80016d8 <get_command+0x108>)
 8001688:	f004 ffaa 	bl	80065e0 <siscanf>
				parse_command(command, strlen(command), value);
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe fdd4 	bl	800023c <strlen>
 8001694:	4603      	mov	r3, r0
 8001696:	b2d9      	uxtb	r1, r3
 8001698:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff16 	bl	80014d0 <parse_command>
				index_command_buffer = 0;
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <get_command+0x104>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
				strcpy(command_buffer, "");
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <get_command+0x108>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
				state_command = NOT_IN_COMMAND;
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <get_command+0x100>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
				break;
 80016b6:	e002      	b.n	80016be <get_command+0xee>
			break;
 80016b8:	bf00      	nop
 80016ba:	e000      	b.n	80016be <get_command+0xee>
				break;
 80016bc:	bf00      	nop
}
 80016be:	bf00      	nop
 80016c0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200002dc 	.word	0x200002dc
 80016cc:	20000614 	.word	0x20000614
 80016d0:	20000615 	.word	0x20000615
 80016d4:	20000513 	.word	0x20000513
 80016d8:	20000414 	.word	0x20000414
 80016dc:	0800a740 	.word	0x0800a740

080016e0 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART1 ) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_UART_RxCpltCallback+0x30>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d109      	bne.n	8001706 <HAL_UART_RxCpltCallback+0x26>

		HAL_UART_Receive_IT (&huart1 , &temp , 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <HAL_UART_RxCpltCallback+0x34>)
 80016f6:	4808      	ldr	r0, [pc, #32]	; (8001718 <HAL_UART_RxCpltCallback+0x38>)
 80016f8:	f003 fa7f 	bl	8004bfa <HAL_UART_Receive_IT>
		write_buffer(&buffer_uart, &temp, 1);
 80016fc:	2201      	movs	r2, #1
 80016fe:	4905      	ldr	r1, [pc, #20]	; (8001714 <HAL_UART_RxCpltCallback+0x34>)
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <HAL_UART_RxCpltCallback+0x3c>)
 8001702:	f7ff fea0 	bl	8001446 <write_buffer>

	}
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40013800 	.word	0x40013800
 8001714:	20000613 	.word	0x20000613
 8001718:	2000028c 	.word	0x2000028c
 800171c:	200002dc 	.word	0x200002dc

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b5b0      	push	{r4, r5, r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001726:	f000 fc9d 	bl	8002064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172a:	f000 f89b 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172e:	f000 f97d 	bl	8001a2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001732:	f000 f8d3 	bl	80018dc <MX_I2C1_Init>
  MX_TIM1_Init();
 8001736:	f000 f8ff 	bl	8001938 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800173a:	f000 f94d 	bl	80019d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  uint8_t data = 0;
  HAL_TIM_Base_Start_IT(&htim1);
 800173e:	483b      	ldr	r0, [pc, #236]	; (800182c <main+0x10c>)
 8001740:	f002 fda6 	bl	8004290 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart1, &temp, 1);
 8001744:	2201      	movs	r2, #1
 8001746:	493a      	ldr	r1, [pc, #232]	; (8001830 <main+0x110>)
 8001748:	483a      	ldr	r0, [pc, #232]	; (8001834 <main+0x114>)
 800174a:	f003 fa56 	bl	8004bfa <HAL_UART_Receive_IT>
  DHT20_I2C_Init(&DHT20, &hi2c1, DHT20_ADDRESS);
 800174e:	2238      	movs	r2, #56	; 0x38
 8001750:	4939      	ldr	r1, [pc, #228]	; (8001838 <main+0x118>)
 8001752:	483a      	ldr	r0, [pc, #232]	; (800183c <main+0x11c>)
 8001754:	f7ff fd21 	bl	800119a <DHT20_I2C_Init>
  buffer_init(&buffer_uart);
 8001758:	4839      	ldr	r0, [pc, #228]	; (8001840 <main+0x120>)
 800175a:	f7ff fe13 	bl	8001384 <buffer_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  char starting_word[] = "HELLO NHANLOW \r\n";
//  HAL_UART_Transmit(&huart1, (uint8_t*) starting_word, sizeof(starting_word), 1000);
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 800175e:	2201      	movs	r2, #1
 8001760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001764:	4837      	ldr	r0, [pc, #220]	; (8001844 <main+0x124>)
 8001766:	f001 f8e7 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart1,sending , sprintf(sending,"!FAN:0#"), 1000);
 800176a:	4937      	ldr	r1, [pc, #220]	; (8001848 <main+0x128>)
 800176c:	4837      	ldr	r0, [pc, #220]	; (800184c <main+0x12c>)
 800176e:	f004 ff17 	bl	80065a0 <siprintf>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177a:	4934      	ldr	r1, [pc, #208]	; (800184c <main+0x12c>)
 800177c:	482d      	ldr	r0, [pc, #180]	; (8001834 <main+0x114>)
 800177e:	f003 f9b9 	bl	8004af4 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, SET);
 8001782:	2201      	movs	r2, #1
 8001784:	2104      	movs	r1, #4
 8001786:	4832      	ldr	r0, [pc, #200]	; (8001850 <main+0x130>)
 8001788:	f001 f8d6 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart1,sending , sprintf(sending,"!LED:0#"), 1000);
 800178c:	4931      	ldr	r1, [pc, #196]	; (8001854 <main+0x134>)
 800178e:	482f      	ldr	r0, [pc, #188]	; (800184c <main+0x12c>)
 8001790:	f004 ff06 	bl	80065a0 <siprintf>
 8001794:	4603      	mov	r3, r0
 8001796:	b29a      	uxth	r2, r3
 8001798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179c:	492b      	ldr	r1, [pc, #172]	; (800184c <main+0x12c>)
 800179e:	4825      	ldr	r0, [pc, #148]	; (8001834 <main+0x114>)
 80017a0:	f003 f9a8 	bl	8004af4 <HAL_UART_Transmit>
  set_timer(TIMER_COMMAND,10);
 80017a4:	210a      	movs	r1, #10
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 fbd2 	bl	8001f50 <set_timer>
  set_timer(TIMER_DHT20,10000);
 80017ac:	f242 7110 	movw	r1, #10000	; 0x2710
 80017b0:	2001      	movs	r0, #1
 80017b2:	f000 fbcd 	bl	8001f50 <set_timer>
  while (1)
  {
	 if(is_timer_timeout(TIMER_COMMAND)){
 80017b6:	2000      	movs	r0, #0
 80017b8:	f000 fbe4 	bl	8001f84 <is_timer_timeout>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <main+0xae>
		 get_command();
 80017c2:	f7ff ff05 	bl	80015d0 <get_command>
		 set_timer(TIMER_COMMAND,10);
 80017c6:	210a      	movs	r1, #10
 80017c8:	2000      	movs	r0, #0
 80017ca:	f000 fbc1 	bl	8001f50 <set_timer>
	 }
	 if (is_timer_timeout(TIMER_DHT20)){
 80017ce:	2001      	movs	r0, #1
 80017d0:	f000 fbd8 	bl	8001f84 <is_timer_timeout>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0ed      	beq.n	80017b6 <main+0x96>
		 DHT20_I2C_Read(&DHT20, &temperature, &humidity);
 80017da:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <main+0x138>)
 80017dc:	491f      	ldr	r1, [pc, #124]	; (800185c <main+0x13c>)
 80017de:	4817      	ldr	r0, [pc, #92]	; (800183c <main+0x11c>)
 80017e0:	f7ff fd40 	bl	8001264 <DHT20_I2C_Read>
		 HAL_UART_Transmit(&huart1,sending , sprintf(sending,"!TEMP:%.1f#!HUMI:%.1f#", temperature, humidity), 1000);
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <main+0x13c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fe93 	bl	8000514 <__aeabi_f2d>
 80017ee:	4604      	mov	r4, r0
 80017f0:	460d      	mov	r5, r1
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <main+0x138>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe8c 	bl	8000514 <__aeabi_f2d>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	e9cd 2300 	strd	r2, r3, [sp]
 8001804:	4622      	mov	r2, r4
 8001806:	462b      	mov	r3, r5
 8001808:	4915      	ldr	r1, [pc, #84]	; (8001860 <main+0x140>)
 800180a:	4810      	ldr	r0, [pc, #64]	; (800184c <main+0x12c>)
 800180c:	f004 fec8 	bl	80065a0 <siprintf>
 8001810:	4603      	mov	r3, r0
 8001812:	b29a      	uxth	r2, r3
 8001814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <main+0x12c>)
 800181a:	4806      	ldr	r0, [pc, #24]	; (8001834 <main+0x114>)
 800181c:	f003 f96a 	bl	8004af4 <HAL_UART_Transmit>
		 set_timer(TIMER_DHT20,10000);
 8001820:	f242 7110 	movw	r1, #10000	; 0x2710
 8001824:	2001      	movs	r0, #1
 8001826:	f000 fb93 	bl	8001f50 <set_timer>
	 if(is_timer_timeout(TIMER_COMMAND)){
 800182a:	e7c4      	b.n	80017b6 <main+0x96>
 800182c:	20000244 	.word	0x20000244
 8001830:	20000613 	.word	0x20000613
 8001834:	2000028c 	.word	0x2000028c
 8001838:	200001f0 	.word	0x200001f0
 800183c:	200002d4 	.word	0x200002d4
 8001840:	200002dc 	.word	0x200002dc
 8001844:	40010800 	.word	0x40010800
 8001848:	0800a74c 	.word	0x0800a74c
 800184c:	20000514 	.word	0x20000514
 8001850:	40011400 	.word	0x40011400
 8001854:	0800a754 	.word	0x0800a754
 8001858:	20000410 	.word	0x20000410
 800185c:	2000040c 	.word	0x2000040c
 8001860:	0800a75c 	.word	0x0800a75c

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b090      	sub	sp, #64	; 0x40
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0318 	add.w	r3, r7, #24
 800186e:	2228      	movs	r2, #40	; 0x28
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f004 ff23 	bl	80066be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800188a:	2301      	movs	r3, #1
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800188e:	2310      	movs	r3, #16
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001892:	2300      	movs	r3, #0
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001896:	f107 0318 	add.w	r3, r7, #24
 800189a:	4618      	mov	r0, r3
 800189c:	f002 f898 	bl	80039d0 <HAL_RCC_OscConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80018a6:	f000 f92b 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018aa:	230f      	movs	r3, #15
 80018ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 fb06 	bl	8003ed4 <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80018ce:	f000 f917 	bl	8001b00 <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3740      	adds	r7, #64	; 0x40
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_I2C1_Init+0x50>)
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <MX_I2C1_Init+0x54>)
 80018e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_I2C1_Init+0x50>)
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <MX_I2C1_Init+0x58>)
 80018ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_I2C1_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_I2C1_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_I2C1_Init+0x50>)
 80018fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <MX_I2C1_Init+0x50>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_I2C1_Init+0x50>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <MX_I2C1_Init+0x50>)
 800191a:	f001 f825 	bl	8002968 <HAL_I2C_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001924:	f000 f8ec 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200001f0 	.word	0x200001f0
 8001930:	40005400 	.word	0x40005400
 8001934:	000186a0 	.word	0x000186a0

08001938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194c:	463b      	mov	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <MX_TIM1_Init+0x98>)
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <MX_TIM1_Init+0x9c>)
 8001958:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MX_TIM1_Init+0x98>)
 800195c:	2207      	movs	r2, #7
 800195e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <MX_TIM1_Init+0x98>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_TIM1_Init+0x98>)
 8001968:	f242 720f 	movw	r2, #9999	; 0x270f
 800196c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MX_TIM1_Init+0x98>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_TIM1_Init+0x98>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_TIM1_Init+0x98>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001980:	4813      	ldr	r0, [pc, #76]	; (80019d0 <MX_TIM1_Init+0x98>)
 8001982:	f002 fc35 	bl	80041f0 <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800198c:	f000 f8b8 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001994:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	4619      	mov	r1, r3
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <MX_TIM1_Init+0x98>)
 800199e:	f002 fddf 	bl	8004560 <HAL_TIM_ConfigClockSource>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80019a8:	f000 f8aa 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b4:	463b      	mov	r3, r7
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_TIM1_Init+0x98>)
 80019ba:	f002 ffcd 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019c4:	f000 f89c 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000244 	.word	0x20000244
 80019d4:	40012c00 	.word	0x40012c00

080019d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_USART1_UART_Init+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 8001a10:	f003 f820 	bl	8004a54 <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a1a:	f000 f871 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000028c 	.word	0x2000028c
 8001a28:	40013800 	.word	0x40013800

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a26      	ldr	r2, [pc, #152]	; (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a58:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a20      	ldr	r2, [pc, #128]	; (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a76:	f043 0308 	orr.w	r3, r3, #8
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a8e:	4815      	ldr	r0, [pc, #84]	; (8001ae4 <MX_GPIO_Init+0xb8>)
 8001a90:	f000 ff52 	bl	8002938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2104      	movs	r1, #4
 8001a98:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <MX_GPIO_Init+0xbc>)
 8001a9a:	f000 ff4d 	bl	8002938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <MX_GPIO_Init+0xb8>)
 8001ab8:	f000 fdaa 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAN_Pin */
  GPIO_InitStruct.Pin = FAN_Pin;
 8001abc:	2304      	movs	r3, #4
 8001abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_GPIO_Init+0xbc>)
 8001ad4:	f000 fd9c 	bl	8002610 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad8:	bf00      	nop
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010800 	.word	0x40010800
 8001ae8:	40011400 	.word	0x40011400

08001aec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
//	Scheduler_Update(&scheduler);
	timer_run();
 8001af4:	f000 fa60 	bl	8001fb8 <timer_run>

}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>
	...

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6193      	str	r3, [r2, #24]
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_MspInit+0x60>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_MspInit+0x60>)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010000 	.word	0x40010000

08001b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <HAL_I2C_MspInit+0x70>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d123      	bne.n	8001bd8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba8:	23c0      	movs	r3, #192	; 0xc0
 8001baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bac:	2312      	movs	r3, #18
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480b      	ldr	r0, [pc, #44]	; (8001be8 <HAL_I2C_MspInit+0x78>)
 8001bbc:	f000 fd28 	bl	8002610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001bc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bca:	61d3      	str	r3, [r2, #28]
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40005400 	.word	0x40005400
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010c00 	.word	0x40010c00

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_TIM_Base_MspInit+0x74>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d12b      	bne.n	8001c56 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c08:	6193      	str	r3, [r2, #24]
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2018      	movs	r0, #24
 8001c1c:	f000 fb7f 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001c20:	2018      	movs	r0, #24
 8001c22:	f000 fb98 	bl	8002356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	2019      	movs	r0, #25
 8001c2c:	f000 fb77 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c30:	2019      	movs	r0, #25
 8001c32:	f000 fb90 	bl	8002356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	201a      	movs	r0, #26
 8001c3c:	f000 fb6f 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001c40:	201a      	movs	r0, #26
 8001c42:	f000 fb88 	bl	8002356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	201b      	movs	r0, #27
 8001c4c:	f000 fb67 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c50:	201b      	movs	r0, #27
 8001c52:	f000 fb80 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40012c00 	.word	0x40012c00
 8001c64:	40021000 	.word	0x40021000

08001c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <HAL_UART_MspInit+0x9c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d139      	bne.n	8001cfc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <HAL_UART_MspInit+0xa0>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_UART_MspInit+0xa0>)
 8001c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <HAL_UART_MspInit+0xa0>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_UART_MspInit+0xa0>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <HAL_UART_MspInit+0xa0>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_UART_MspInit+0xa0>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0310 	add.w	r3, r7, #16
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480f      	ldr	r0, [pc, #60]	; (8001d0c <HAL_UART_MspInit+0xa4>)
 8001cce:	f000 fc9f 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4809      	ldr	r0, [pc, #36]	; (8001d0c <HAL_UART_MspInit+0xa4>)
 8001ce8:	f000 fc92 	bl	8002610 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2025      	movs	r0, #37	; 0x25
 8001cf2:	f000 fb14 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cf6:	2025      	movs	r0, #37	; 0x25
 8001cf8:	f000 fb2d 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40013800 	.word	0x40013800
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010800 	.word	0x40010800

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d14:	e7fe      	b.n	8001d14 <NMI_Handler+0x4>

08001d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <HardFault_Handler+0x4>

08001d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <MemManage_Handler+0x4>

08001d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <BusFault_Handler+0x4>

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <UsageFault_Handler+0x4>

08001d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d56:	f000 f9cb 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <TIM1_BRK_IRQHandler+0x10>)
 8001d66:	f002 faf3 	bl	8004350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000244 	.word	0x20000244

08001d74 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <TIM1_UP_IRQHandler+0x10>)
 8001d7a:	f002 fae9 	bl	8004350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000244 	.word	0x20000244

08001d88 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001d8e:	f002 fadf 	bl	8004350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000244 	.word	0x20000244

08001d9c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <TIM1_CC_IRQHandler+0x10>)
 8001da2:	f002 fad5 	bl	8004350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000244 	.word	0x20000244

08001db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <USART1_IRQHandler+0x10>)
 8001db6:	f002 ff45 	bl	8004c44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000028c 	.word	0x2000028c

08001dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return 1;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <_kill>:

int _kill(int pid, int sig)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ddc:	f004 fcc2 	bl	8006764 <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2216      	movs	r2, #22
 8001de4:	601a      	str	r2, [r3, #0]
  return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_exit>:

void _exit (int status)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffe7 	bl	8001dd2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e04:	e7fe      	b.n	8001e04 <_exit+0x12>

08001e06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e00a      	b.n	8001e2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e18:	f3af 8000 	nop.w
 8001e1c:	4601      	mov	r1, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	60ba      	str	r2, [r7, #8]
 8001e24:	b2ca      	uxtb	r2, r1
 8001e26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	dbf0      	blt.n	8001e18 <_read+0x12>
  }

  return len;
 8001e36:	687b      	ldr	r3, [r7, #4]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e009      	b.n	8001e66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	60ba      	str	r2, [r7, #8]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3301      	adds	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	dbf1      	blt.n	8001e52 <_write+0x12>
  }
  return len;
 8001e6e:	687b      	ldr	r3, [r7, #4]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_close>:

int _close(int file)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <_isatty>:

int _isatty(int file)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eb4:	2301      	movs	r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <_sbrk+0x5c>)
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <_sbrk+0x60>)
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <_sbrk+0x64>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <_sbrk+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f08:	f004 fc2c 	bl	8006764 <__errno>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	220c      	movs	r2, #12
 8001f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e009      	b.n	8001f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <_sbrk+0x64>)
 8001f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	2000c000 	.word	0x2000c000
 8001f38:	00000400 	.word	0x00000400
 8001f3c:	20000618 	.word	0x20000618
 8001f40:	200007e8 	.word	0x200007e8

08001f44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <set_timer>:
#include "timer.h"

int timer_counter[NUMBER_OF_TIMER] = {0};
int timer_flag[NUMBER_OF_TIMER] = {0};

void set_timer(int index, int duration){
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIME_CYCLE;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <set_timer+0x2c>)
 8001f5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f62:	1092      	asrs	r2, r2, #2
 8001f64:	17db      	asrs	r3, r3, #31
 8001f66:	1ad2      	subs	r2, r2, r3
 8001f68:	4905      	ldr	r1, [pc, #20]	; (8001f80 <set_timer+0x30>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	66666667 	.word	0x66666667
 8001f80:	2000061c 	.word	0x2000061c

08001f84 <is_timer_timeout>:
int get_time_of_counter(int index){
	return timer_counter[index]*TIME_CYCLE;
}


int is_timer_timeout(int index){
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	if(timer_flag[index]){
 8001f8c:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <is_timer_timeout+0x30>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <is_timer_timeout+0x22>
		timer_flag[index] = 0;
 8001f98:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <is_timer_timeout+0x30>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <is_timer_timeout+0x24>
	}
	return 0;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000658 	.word	0x20000658

08001fb8 <timer_run>:
void timer_run(){
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUMBER_OF_TIMER; ++i){
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	e01c      	b.n	8001ffe <timer_run+0x46>
		if(timer_counter[i] > 0){
 8001fc4:	4a12      	ldr	r2, [pc, #72]	; (8002010 <timer_run+0x58>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	dd13      	ble.n	8001ff8 <timer_run+0x40>
			timer_counter[i]--;
 8001fd0:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <timer_run+0x58>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	1e5a      	subs	r2, r3, #1
 8001fda:	490d      	ldr	r1, [pc, #52]	; (8002010 <timer_run+0x58>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0) timer_flag[i] = 1;
 8001fe2:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <timer_run+0x58>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	dc04      	bgt.n	8001ff8 <timer_run+0x40>
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <timer_run+0x5c>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ; i < NUMBER_OF_TIMER; ++i){
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b0e      	cmp	r3, #14
 8002002:	dddf      	ble.n	8001fc4 <timer_run+0xc>
		}
	}
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	2000061c 	.word	0x2000061c
 8002014:	20000658 	.word	0x20000658

08002018 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002018:	f7ff ff94 	bl	8001f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800201e:	490c      	ldr	r1, [pc, #48]	; (8002050 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002020:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002034:	4c09      	ldr	r4, [pc, #36]	; (800205c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002042:	f004 fb95 	bl	8006770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002046:	f7ff fb6b 	bl	8001720 <main>
  bx lr
 800204a:	4770      	bx	lr
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002054:	0800abf4 	.word	0x0800abf4
  ldr r2, =_sbss
 8002058:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800205c:	200007e4 	.word	0x200007e4

08002060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC1_2_IRQHandler>
	...

08002064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_Init+0x28>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <HAL_Init+0x28>)
 800206e:	f043 0310 	orr.w	r3, r3, #16
 8002072:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002074:	2003      	movs	r0, #3
 8002076:	f000 f947 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207a:	200f      	movs	r0, #15
 800207c:	f000 f808 	bl	8002090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002080:	f7ff fd44 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40022000 	.word	0x40022000

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_InitTick+0x54>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_InitTick+0x58>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f95f 	bl	8002372 <HAL_SYSTICK_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00e      	b.n	80020dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d80a      	bhi.n	80020da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f000 f927 	bl	800231e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d0:	4a06      	ldr	r2, [pc, #24]	; (80020ec <HAL_InitTick+0x5c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000008 	.word	0x20000008
 80020ec:	20000004 	.word	0x20000004

080020f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_IncTick+0x1c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_IncTick+0x20>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a03      	ldr	r2, [pc, #12]	; (8002110 <HAL_IncTick+0x20>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	20000008 	.word	0x20000008
 8002110:	20000694 	.word	0x20000694

08002114 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return uwTick;
 8002118:	4b02      	ldr	r3, [pc, #8]	; (8002124 <HAL_GetTick+0x10>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	20000694 	.word	0x20000694

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff fff0 	bl	8002114 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffe0 	bl	8002114 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000008 	.word	0x20000008

08002170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4906      	ldr	r1, [pc, #24]	; (8002208 <__NVIC_EnableIRQ+0x34>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	; (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	; (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d4:	d301      	bcc.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <SysTick_Config+0x40>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	210f      	movs	r1, #15
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	f7ff ff90 	bl	800220c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SysTick_Config+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <SysTick_Config+0x40>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000e010 	.word	0xe000e010

08002308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff2d 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002330:	f7ff ff42 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 8002334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f7ff ff90 	bl	8002260 <NVIC_EncodePriority>
 8002340:	4602      	mov	r2, r0
 8002342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff5f 	bl	800220c <__NVIC_SetPriority>
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff35 	bl	80021d4 <__NVIC_EnableIRQ>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ffa2 	bl	80022c4 <SysTick_Config>
 8002380:	4603      	mov	r3, r0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d008      	beq.n	80023b4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2204      	movs	r2, #4
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e020      	b.n	80023f6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 020e 	bic.w	r2, r2, #14
 80023c2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f202 	lsl.w	r2, r1, r2
 80023e2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d005      	beq.n	8002424 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2204      	movs	r2, #4
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e0d6      	b.n	80025d2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 020e 	bic.w	r2, r2, #14
 8002432:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b64      	ldr	r3, [pc, #400]	; (80025dc <HAL_DMA_Abort_IT+0x1dc>)
 800244c:	429a      	cmp	r2, r3
 800244e:	d958      	bls.n	8002502 <HAL_DMA_Abort_IT+0x102>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a62      	ldr	r2, [pc, #392]	; (80025e0 <HAL_DMA_Abort_IT+0x1e0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d04f      	beq.n	80024fa <HAL_DMA_Abort_IT+0xfa>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a61      	ldr	r2, [pc, #388]	; (80025e4 <HAL_DMA_Abort_IT+0x1e4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d048      	beq.n	80024f6 <HAL_DMA_Abort_IT+0xf6>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a5f      	ldr	r2, [pc, #380]	; (80025e8 <HAL_DMA_Abort_IT+0x1e8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d040      	beq.n	80024f0 <HAL_DMA_Abort_IT+0xf0>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a5e      	ldr	r2, [pc, #376]	; (80025ec <HAL_DMA_Abort_IT+0x1ec>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d038      	beq.n	80024ea <HAL_DMA_Abort_IT+0xea>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a5c      	ldr	r2, [pc, #368]	; (80025f0 <HAL_DMA_Abort_IT+0x1f0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d030      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xe4>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a5b      	ldr	r2, [pc, #364]	; (80025f4 <HAL_DMA_Abort_IT+0x1f4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d028      	beq.n	80024de <HAL_DMA_Abort_IT+0xde>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a52      	ldr	r2, [pc, #328]	; (80025dc <HAL_DMA_Abort_IT+0x1dc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d020      	beq.n	80024d8 <HAL_DMA_Abort_IT+0xd8>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a57      	ldr	r2, [pc, #348]	; (80025f8 <HAL_DMA_Abort_IT+0x1f8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d019      	beq.n	80024d4 <HAL_DMA_Abort_IT+0xd4>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a55      	ldr	r2, [pc, #340]	; (80025fc <HAL_DMA_Abort_IT+0x1fc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d012      	beq.n	80024d0 <HAL_DMA_Abort_IT+0xd0>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a54      	ldr	r2, [pc, #336]	; (8002600 <HAL_DMA_Abort_IT+0x200>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00a      	beq.n	80024ca <HAL_DMA_Abort_IT+0xca>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_DMA_Abort_IT+0x204>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d102      	bne.n	80024c4 <HAL_DMA_Abort_IT+0xc4>
 80024be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c2:	e01b      	b.n	80024fc <HAL_DMA_Abort_IT+0xfc>
 80024c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024c8:	e018      	b.n	80024fc <HAL_DMA_Abort_IT+0xfc>
 80024ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ce:	e015      	b.n	80024fc <HAL_DMA_Abort_IT+0xfc>
 80024d0:	2310      	movs	r3, #16
 80024d2:	e013      	b.n	80024fc <HAL_DMA_Abort_IT+0xfc>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e011      	b.n	80024fc <HAL_DMA_Abort_IT+0xfc>
 80024d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024dc:	e00e      	b.n	80024fc <HAL_DMA_Abort_IT+0xfc>
 80024de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024e2:	e00b      	b.n	80024fc <HAL_DMA_Abort_IT+0xfc>
 80024e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e8:	e008      	b.n	80024fc <HAL_DMA_Abort_IT+0xfc>
 80024ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ee:	e005      	b.n	80024fc <HAL_DMA_Abort_IT+0xfc>
 80024f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f4:	e002      	b.n	80024fc <HAL_DMA_Abort_IT+0xfc>
 80024f6:	2310      	movs	r3, #16
 80024f8:	e000      	b.n	80024fc <HAL_DMA_Abort_IT+0xfc>
 80024fa:	2301      	movs	r3, #1
 80024fc:	4a42      	ldr	r2, [pc, #264]	; (8002608 <HAL_DMA_Abort_IT+0x208>)
 80024fe:	6053      	str	r3, [r2, #4]
 8002500:	e057      	b.n	80025b2 <HAL_DMA_Abort_IT+0x1b2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a36      	ldr	r2, [pc, #216]	; (80025e0 <HAL_DMA_Abort_IT+0x1e0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d04f      	beq.n	80025ac <HAL_DMA_Abort_IT+0x1ac>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a34      	ldr	r2, [pc, #208]	; (80025e4 <HAL_DMA_Abort_IT+0x1e4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d048      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x1a8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a33      	ldr	r2, [pc, #204]	; (80025e8 <HAL_DMA_Abort_IT+0x1e8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d040      	beq.n	80025a2 <HAL_DMA_Abort_IT+0x1a2>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a31      	ldr	r2, [pc, #196]	; (80025ec <HAL_DMA_Abort_IT+0x1ec>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d038      	beq.n	800259c <HAL_DMA_Abort_IT+0x19c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a30      	ldr	r2, [pc, #192]	; (80025f0 <HAL_DMA_Abort_IT+0x1f0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d030      	beq.n	8002596 <HAL_DMA_Abort_IT+0x196>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2e      	ldr	r2, [pc, #184]	; (80025f4 <HAL_DMA_Abort_IT+0x1f4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d028      	beq.n	8002590 <HAL_DMA_Abort_IT+0x190>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a26      	ldr	r2, [pc, #152]	; (80025dc <HAL_DMA_Abort_IT+0x1dc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d020      	beq.n	800258a <HAL_DMA_Abort_IT+0x18a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2a      	ldr	r2, [pc, #168]	; (80025f8 <HAL_DMA_Abort_IT+0x1f8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d019      	beq.n	8002586 <HAL_DMA_Abort_IT+0x186>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a29      	ldr	r2, [pc, #164]	; (80025fc <HAL_DMA_Abort_IT+0x1fc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d012      	beq.n	8002582 <HAL_DMA_Abort_IT+0x182>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a27      	ldr	r2, [pc, #156]	; (8002600 <HAL_DMA_Abort_IT+0x200>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00a      	beq.n	800257c <HAL_DMA_Abort_IT+0x17c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a26      	ldr	r2, [pc, #152]	; (8002604 <HAL_DMA_Abort_IT+0x204>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d102      	bne.n	8002576 <HAL_DMA_Abort_IT+0x176>
 8002570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002574:	e01b      	b.n	80025ae <HAL_DMA_Abort_IT+0x1ae>
 8002576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800257a:	e018      	b.n	80025ae <HAL_DMA_Abort_IT+0x1ae>
 800257c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002580:	e015      	b.n	80025ae <HAL_DMA_Abort_IT+0x1ae>
 8002582:	2310      	movs	r3, #16
 8002584:	e013      	b.n	80025ae <HAL_DMA_Abort_IT+0x1ae>
 8002586:	2301      	movs	r3, #1
 8002588:	e011      	b.n	80025ae <HAL_DMA_Abort_IT+0x1ae>
 800258a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800258e:	e00e      	b.n	80025ae <HAL_DMA_Abort_IT+0x1ae>
 8002590:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002594:	e00b      	b.n	80025ae <HAL_DMA_Abort_IT+0x1ae>
 8002596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800259a:	e008      	b.n	80025ae <HAL_DMA_Abort_IT+0x1ae>
 800259c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a0:	e005      	b.n	80025ae <HAL_DMA_Abort_IT+0x1ae>
 80025a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a6:	e002      	b.n	80025ae <HAL_DMA_Abort_IT+0x1ae>
 80025a8:	2310      	movs	r3, #16
 80025aa:	e000      	b.n	80025ae <HAL_DMA_Abort_IT+0x1ae>
 80025ac:	2301      	movs	r3, #1
 80025ae:	4a17      	ldr	r2, [pc, #92]	; (800260c <HAL_DMA_Abort_IT+0x20c>)
 80025b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	4798      	blx	r3
    } 
  }
  return status;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40020080 	.word	0x40020080
 80025e0:	40020008 	.word	0x40020008
 80025e4:	4002001c 	.word	0x4002001c
 80025e8:	40020030 	.word	0x40020030
 80025ec:	40020044 	.word	0x40020044
 80025f0:	40020058 	.word	0x40020058
 80025f4:	4002006c 	.word	0x4002006c
 80025f8:	40020408 	.word	0x40020408
 80025fc:	4002041c 	.word	0x4002041c
 8002600:	40020430 	.word	0x40020430
 8002604:	40020444 	.word	0x40020444
 8002608:	40020400 	.word	0x40020400
 800260c:	40020000 	.word	0x40020000

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b08b      	sub	sp, #44	; 0x2c
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261a:	2300      	movs	r3, #0
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002622:	e179      	b.n	8002918 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002624:	2201      	movs	r2, #1
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	429a      	cmp	r2, r3
 800263e:	f040 8168 	bne.w	8002912 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a96      	ldr	r2, [pc, #600]	; (80028a0 <HAL_GPIO_Init+0x290>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d05e      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 800264c:	4a94      	ldr	r2, [pc, #592]	; (80028a0 <HAL_GPIO_Init+0x290>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d875      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002652:	4a94      	ldr	r2, [pc, #592]	; (80028a4 <HAL_GPIO_Init+0x294>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d058      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002658:	4a92      	ldr	r2, [pc, #584]	; (80028a4 <HAL_GPIO_Init+0x294>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d86f      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800265e:	4a92      	ldr	r2, [pc, #584]	; (80028a8 <HAL_GPIO_Init+0x298>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d052      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002664:	4a90      	ldr	r2, [pc, #576]	; (80028a8 <HAL_GPIO_Init+0x298>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d869      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800266a:	4a90      	ldr	r2, [pc, #576]	; (80028ac <HAL_GPIO_Init+0x29c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d04c      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002670:	4a8e      	ldr	r2, [pc, #568]	; (80028ac <HAL_GPIO_Init+0x29c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d863      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002676:	4a8e      	ldr	r2, [pc, #568]	; (80028b0 <HAL_GPIO_Init+0x2a0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d046      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 800267c:	4a8c      	ldr	r2, [pc, #560]	; (80028b0 <HAL_GPIO_Init+0x2a0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d85d      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002682:	2b12      	cmp	r3, #18
 8002684:	d82a      	bhi.n	80026dc <HAL_GPIO_Init+0xcc>
 8002686:	2b12      	cmp	r3, #18
 8002688:	d859      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800268a:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <HAL_GPIO_Init+0x80>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	0800270b 	.word	0x0800270b
 8002694:	080026e5 	.word	0x080026e5
 8002698:	080026f7 	.word	0x080026f7
 800269c:	08002739 	.word	0x08002739
 80026a0:	0800273f 	.word	0x0800273f
 80026a4:	0800273f 	.word	0x0800273f
 80026a8:	0800273f 	.word	0x0800273f
 80026ac:	0800273f 	.word	0x0800273f
 80026b0:	0800273f 	.word	0x0800273f
 80026b4:	0800273f 	.word	0x0800273f
 80026b8:	0800273f 	.word	0x0800273f
 80026bc:	0800273f 	.word	0x0800273f
 80026c0:	0800273f 	.word	0x0800273f
 80026c4:	0800273f 	.word	0x0800273f
 80026c8:	0800273f 	.word	0x0800273f
 80026cc:	0800273f 	.word	0x0800273f
 80026d0:	0800273f 	.word	0x0800273f
 80026d4:	080026ed 	.word	0x080026ed
 80026d8:	08002701 	.word	0x08002701
 80026dc:	4a75      	ldr	r2, [pc, #468]	; (80028b4 <HAL_GPIO_Init+0x2a4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026e2:	e02c      	b.n	800273e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	623b      	str	r3, [r7, #32]
          break;
 80026ea:	e029      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	3304      	adds	r3, #4
 80026f2:	623b      	str	r3, [r7, #32]
          break;
 80026f4:	e024      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	3308      	adds	r3, #8
 80026fc:	623b      	str	r3, [r7, #32]
          break;
 80026fe:	e01f      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	330c      	adds	r3, #12
 8002706:	623b      	str	r3, [r7, #32]
          break;
 8002708:	e01a      	b.n	8002740 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d102      	bne.n	8002718 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002712:	2304      	movs	r3, #4
 8002714:	623b      	str	r3, [r7, #32]
          break;
 8002716:	e013      	b.n	8002740 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002720:	2308      	movs	r3, #8
 8002722:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	611a      	str	r2, [r3, #16]
          break;
 800272a:	e009      	b.n	8002740 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800272c:	2308      	movs	r3, #8
 800272e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	615a      	str	r2, [r3, #20]
          break;
 8002736:	e003      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
          break;
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x130>
          break;
 800273e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	d801      	bhi.n	800274a <HAL_GPIO_Init+0x13a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	e001      	b.n	800274e <HAL_GPIO_Init+0x13e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2bff      	cmp	r3, #255	; 0xff
 8002754:	d802      	bhi.n	800275c <HAL_GPIO_Init+0x14c>
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	e002      	b.n	8002762 <HAL_GPIO_Init+0x152>
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	3b08      	subs	r3, #8
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	210f      	movs	r1, #15
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	401a      	ands	r2, r3
 8002774:	6a39      	ldr	r1, [r7, #32]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	431a      	orrs	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80c1 	beq.w	8002912 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002790:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <HAL_GPIO_Init+0x2a8>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a48      	ldr	r2, [pc, #288]	; (80028b8 <HAL_GPIO_Init+0x2a8>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <HAL_GPIO_Init+0x2a8>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027a8:	4a44      	ldr	r2, [pc, #272]	; (80028bc <HAL_GPIO_Init+0x2ac>)
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3c      	ldr	r2, [pc, #240]	; (80028c0 <HAL_GPIO_Init+0x2b0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d01f      	beq.n	8002814 <HAL_GPIO_Init+0x204>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3b      	ldr	r2, [pc, #236]	; (80028c4 <HAL_GPIO_Init+0x2b4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d019      	beq.n	8002810 <HAL_GPIO_Init+0x200>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3a      	ldr	r2, [pc, #232]	; (80028c8 <HAL_GPIO_Init+0x2b8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_GPIO_Init+0x1fc>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a39      	ldr	r2, [pc, #228]	; (80028cc <HAL_GPIO_Init+0x2bc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00d      	beq.n	8002808 <HAL_GPIO_Init+0x1f8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a38      	ldr	r2, [pc, #224]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <HAL_GPIO_Init+0x1f4>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a37      	ldr	r2, [pc, #220]	; (80028d4 <HAL_GPIO_Init+0x2c4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_GPIO_Init+0x1f0>
 80027fc:	2305      	movs	r3, #5
 80027fe:	e00a      	b.n	8002816 <HAL_GPIO_Init+0x206>
 8002800:	2306      	movs	r3, #6
 8002802:	e008      	b.n	8002816 <HAL_GPIO_Init+0x206>
 8002804:	2304      	movs	r3, #4
 8002806:	e006      	b.n	8002816 <HAL_GPIO_Init+0x206>
 8002808:	2303      	movs	r3, #3
 800280a:	e004      	b.n	8002816 <HAL_GPIO_Init+0x206>
 800280c:	2302      	movs	r3, #2
 800280e:	e002      	b.n	8002816 <HAL_GPIO_Init+0x206>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_GPIO_Init+0x206>
 8002814:	2300      	movs	r3, #0
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	f002 0203 	and.w	r2, r2, #3
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	4093      	lsls	r3, r2
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002826:	4925      	ldr	r1, [pc, #148]	; (80028bc <HAL_GPIO_Init+0x2ac>)
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d006      	beq.n	800284e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002840:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <HAL_GPIO_Init+0x2c8>)
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	4924      	ldr	r1, [pc, #144]	; (80028d8 <HAL_GPIO_Init+0x2c8>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]
 800284c:	e006      	b.n	800285c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_GPIO_Init+0x2c8>)
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	43db      	mvns	r3, r3
 8002856:	4920      	ldr	r1, [pc, #128]	; (80028d8 <HAL_GPIO_Init+0x2c8>)
 8002858:	4013      	ands	r3, r2
 800285a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_GPIO_Init+0x2c8>)
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	491a      	ldr	r1, [pc, #104]	; (80028d8 <HAL_GPIO_Init+0x2c8>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	4313      	orrs	r3, r2
 8002872:	60cb      	str	r3, [r1, #12]
 8002874:	e006      	b.n	8002884 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002876:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <HAL_GPIO_Init+0x2c8>)
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	43db      	mvns	r3, r3
 800287e:	4916      	ldr	r1, [pc, #88]	; (80028d8 <HAL_GPIO_Init+0x2c8>)
 8002880:	4013      	ands	r3, r2
 8002882:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d025      	beq.n	80028dc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_GPIO_Init+0x2c8>)
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4910      	ldr	r1, [pc, #64]	; (80028d8 <HAL_GPIO_Init+0x2c8>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	e025      	b.n	80028ea <HAL_GPIO_Init+0x2da>
 800289e:	bf00      	nop
 80028a0:	10320000 	.word	0x10320000
 80028a4:	10310000 	.word	0x10310000
 80028a8:	10220000 	.word	0x10220000
 80028ac:	10210000 	.word	0x10210000
 80028b0:	10120000 	.word	0x10120000
 80028b4:	10110000 	.word	0x10110000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010000 	.word	0x40010000
 80028c0:	40010800 	.word	0x40010800
 80028c4:	40010c00 	.word	0x40010c00
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40011400 	.word	0x40011400
 80028d0:	40011800 	.word	0x40011800
 80028d4:	40011c00 	.word	0x40011c00
 80028d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_GPIO_Init+0x324>)
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	4913      	ldr	r1, [pc, #76]	; (8002934 <HAL_GPIO_Init+0x324>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028f6:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_GPIO_Init+0x324>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	490e      	ldr	r1, [pc, #56]	; (8002934 <HAL_GPIO_Init+0x324>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
 8002902:	e006      	b.n	8002912 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_GPIO_Init+0x324>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	43db      	mvns	r3, r3
 800290c:	4909      	ldr	r1, [pc, #36]	; (8002934 <HAL_GPIO_Init+0x324>)
 800290e:	4013      	ands	r3, r2
 8002910:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	3301      	adds	r3, #1
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	fa22 f303 	lsr.w	r3, r2, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	f47f ae7e 	bne.w	8002624 <HAL_GPIO_Init+0x14>
  }
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	372c      	adds	r7, #44	; 0x2c
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	40010400 	.word	0x40010400

08002938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
 8002944:	4613      	mov	r3, r2
 8002946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002948:	787b      	ldrb	r3, [r7, #1]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002954:	e003      	b.n	800295e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002956:	887b      	ldrh	r3, [r7, #2]
 8002958:	041a      	lsls	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	611a      	str	r2, [r3, #16]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e12b      	b.n	8002bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff f8ee 	bl	8001b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	; 0x24
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029cc:	f001 fbca 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 80029d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4a81      	ldr	r2, [pc, #516]	; (8002bdc <HAL_I2C_Init+0x274>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d807      	bhi.n	80029ec <HAL_I2C_Init+0x84>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a80      	ldr	r2, [pc, #512]	; (8002be0 <HAL_I2C_Init+0x278>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	bf94      	ite	ls
 80029e4:	2301      	movls	r3, #1
 80029e6:	2300      	movhi	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e006      	b.n	80029fa <HAL_I2C_Init+0x92>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a7d      	ldr	r2, [pc, #500]	; (8002be4 <HAL_I2C_Init+0x27c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	bf94      	ite	ls
 80029f4:	2301      	movls	r3, #1
 80029f6:	2300      	movhi	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e0e7      	b.n	8002bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a78      	ldr	r2, [pc, #480]	; (8002be8 <HAL_I2C_Init+0x280>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0c9b      	lsrs	r3, r3, #18
 8002a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a6a      	ldr	r2, [pc, #424]	; (8002bdc <HAL_I2C_Init+0x274>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d802      	bhi.n	8002a3c <HAL_I2C_Init+0xd4>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	e009      	b.n	8002a50 <HAL_I2C_Init+0xe8>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	4a69      	ldr	r2, [pc, #420]	; (8002bec <HAL_I2C_Init+0x284>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	3301      	adds	r3, #1
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	495c      	ldr	r1, [pc, #368]	; (8002bdc <HAL_I2C_Init+0x274>)
 8002a6c:	428b      	cmp	r3, r1
 8002a6e:	d819      	bhi.n	8002aa4 <HAL_I2C_Init+0x13c>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e59      	subs	r1, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a7e:	1c59      	adds	r1, r3, #1
 8002a80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a84:	400b      	ands	r3, r1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_I2C_Init+0x138>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1e59      	subs	r1, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9e:	e051      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	e04f      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d111      	bne.n	8002ad0 <HAL_I2C_Init+0x168>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e58      	subs	r0, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	440b      	add	r3, r1
 8002aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e012      	b.n	8002af6 <HAL_I2C_Init+0x18e>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	0099      	lsls	r1, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Init+0x196>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e022      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10e      	bne.n	8002b24 <HAL_I2C_Init+0x1bc>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e58      	subs	r0, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	440b      	add	r3, r1
 8002b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b22:	e00f      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1e58      	subs	r0, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	0099      	lsls	r1, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	6809      	ldr	r1, [r1, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6911      	ldr	r1, [r2, #16]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	000186a0 	.word	0x000186a0
 8002be0:	001e847f 	.word	0x001e847f
 8002be4:	003d08ff 	.word	0x003d08ff
 8002be8:	431bde83 	.word	0x431bde83
 8002bec:	10624dd3 	.word	0x10624dd3

08002bf0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	817b      	strh	r3, [r7, #10]
 8002c00:	4613      	mov	r3, r2
 8002c02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c04:	f7ff fa86 	bl	8002114 <HAL_GetTick>
 8002c08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	f040 80e0 	bne.w	8002dd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2319      	movs	r3, #25
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4970      	ldr	r1, [pc, #448]	; (8002de4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fc9e 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e0d3      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_I2C_Master_Transmit+0x50>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e0cc      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ea>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d007      	beq.n	8002c66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2221      	movs	r2, #33	; 0x21
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2210      	movs	r2, #16
 8002c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	893a      	ldrh	r2, [r7, #8]
 8002c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4a50      	ldr	r2, [pc, #320]	; (8002de8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ca8:	8979      	ldrh	r1, [r7, #10]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	6a3a      	ldr	r2, [r7, #32]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fb08 	bl	80032c4 <I2C_MasterRequestWrite>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e08d      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cd4:	e066      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	6a39      	ldr	r1, [r7, #32]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fd5c 	bl	8003798 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00d      	beq.n	8002d02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d107      	bne.n	8002cfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e06b      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d11b      	bne.n	8002d78 <HAL_I2C_Master_Transmit+0x188>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d017      	beq.n	8002d78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	6a39      	ldr	r1, [r7, #32]
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fd53 	bl	8003828 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d107      	bne.n	8002da0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e01a      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d194      	bne.n	8002cd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e000      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	00100002 	.word	0x00100002
 8002de8:	ffff0000 	.word	0xffff0000

08002dec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08c      	sub	sp, #48	; 0x30
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	461a      	mov	r2, r3
 8002df8:	460b      	mov	r3, r1
 8002dfa:	817b      	strh	r3, [r7, #10]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e04:	f7ff f986 	bl	8002114 <HAL_GetTick>
 8002e08:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	f040 824b 	bne.w	80032ae <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2319      	movs	r3, #25
 8002e1e:	2201      	movs	r2, #1
 8002e20:	497f      	ldr	r1, [pc, #508]	; (8003020 <HAL_I2C_Master_Receive+0x234>)
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fb9e 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e23e      	b.n	80032b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_I2C_Master_Receive+0x54>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e237      	b.n	80032b0 <HAL_I2C_Master_Receive+0x4c4>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d007      	beq.n	8002e66 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2222      	movs	r2, #34	; 0x22
 8002e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2210      	movs	r2, #16
 8002e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	893a      	ldrh	r2, [r7, #8]
 8002e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4a5f      	ldr	r2, [pc, #380]	; (8003024 <HAL_I2C_Master_Receive+0x238>)
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ea8:	8979      	ldrh	r1, [r7, #10]
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fa8a 	bl	80033c8 <I2C_MasterRequestRead>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e1f8      	b.n	80032b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d113      	bne.n	8002eee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e1cc      	b.n	8003288 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d11e      	bne.n	8002f34 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f06:	b672      	cpsid	i
}
 8002f08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f30:	b662      	cpsie	i
}
 8002f32:	e035      	b.n	8002fa0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d11e      	bne.n	8002f7a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4c:	b672      	cpsid	i
}
 8002f4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f76:	b662      	cpsie	i
}
 8002f78:	e012      	b.n	8002fa0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002fa0:	e172      	b.n	8003288 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	f200 811f 	bhi.w	80031ea <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d123      	bne.n	8002ffc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fc7d 	bl	80038b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e173      	b.n	80032b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ffa:	e145      	b.n	8003288 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	2b02      	cmp	r3, #2
 8003002:	d152      	bne.n	80030aa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	2200      	movs	r2, #0
 800300c:	4906      	ldr	r1, [pc, #24]	; (8003028 <HAL_I2C_Master_Receive+0x23c>)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 faa8 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e148      	b.n	80032b0 <HAL_I2C_Master_Receive+0x4c4>
 800301e:	bf00      	nop
 8003020:	00100002 	.word	0x00100002
 8003024:	ffff0000 	.word	0xffff0000
 8003028:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800302c:	b672      	cpsid	i
}
 800302e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003072:	b662      	cpsie	i
}
 8003074:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030a8:	e0ee      	b.n	8003288 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	2200      	movs	r2, #0
 80030b2:	4981      	ldr	r1, [pc, #516]	; (80032b8 <HAL_I2C_Master_Receive+0x4cc>)
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fa55 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0f5      	b.n	80032b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030d4:	b672      	cpsid	i
}
 80030d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800310a:	4b6c      	ldr	r3, [pc, #432]	; (80032bc <HAL_I2C_Master_Receive+0x4d0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	08db      	lsrs	r3, r3, #3
 8003110:	4a6b      	ldr	r2, [pc, #428]	; (80032c0 <HAL_I2C_Master_Receive+0x4d4>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	0a1a      	lsrs	r2, r3, #8
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00da      	lsls	r2, r3, #3
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	3b01      	subs	r3, #1
 8003128:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d118      	bne.n	8003162 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003152:	b662      	cpsie	i
}
 8003154:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0a6      	b.n	80032b0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d1d9      	bne.n	8003124 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031b2:	b662      	cpsie	i
}
 80031b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031e8:	e04e      	b.n	8003288 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fb62 	bl	80038b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e058      	b.n	80032b0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b04      	cmp	r3, #4
 800323c:	d124      	bne.n	8003288 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003242:	2b03      	cmp	r3, #3
 8003244:	d107      	bne.n	8003256 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003254:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	f47f ae88 	bne.w	8002fa2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
  }
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	00010004 	.word	0x00010004
 80032bc:	20000000 	.word	0x20000000
 80032c0:	14f8b589 	.word	0x14f8b589

080032c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	460b      	mov	r3, r1
 80032d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d006      	beq.n	80032ee <I2C_MasterRequestWrite+0x2a>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d003      	beq.n	80032ee <I2C_MasterRequestWrite+0x2a>
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ec:	d108      	bne.n	8003300 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e00b      	b.n	8003318 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	2b12      	cmp	r3, #18
 8003306:	d107      	bne.n	8003318 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003316:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f91d 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00d      	beq.n	800334c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333e:	d103      	bne.n	8003348 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003346:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e035      	b.n	80033b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003354:	d108      	bne.n	8003368 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003364:	611a      	str	r2, [r3, #16]
 8003366:	e01b      	b.n	80033a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003368:	897b      	ldrh	r3, [r7, #10]
 800336a:	11db      	asrs	r3, r3, #7
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f003 0306 	and.w	r3, r3, #6
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f063 030f 	orn	r3, r3, #15
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	490e      	ldr	r1, [pc, #56]	; (80033c0 <I2C_MasterRequestWrite+0xfc>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f966 	bl	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e010      	b.n	80033b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4907      	ldr	r1, [pc, #28]	; (80033c4 <I2C_MasterRequestWrite+0x100>)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f956 	bl	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	00010008 	.word	0x00010008
 80033c4:	00010002 	.word	0x00010002

080033c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	460b      	mov	r3, r1
 80033d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d006      	beq.n	8003402 <I2C_MasterRequestRead+0x3a>
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d003      	beq.n	8003402 <I2C_MasterRequestRead+0x3a>
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003400:	d108      	bne.n	8003414 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	e00b      	b.n	800342c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	2b11      	cmp	r3, #17
 800341a:	d107      	bne.n	800342c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800342a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f893 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003452:	d103      	bne.n	800345c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e079      	b.n	8003554 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003468:	d108      	bne.n	800347c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800346a:	897b      	ldrh	r3, [r7, #10]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	b2da      	uxtb	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	611a      	str	r2, [r3, #16]
 800347a:	e05f      	b.n	800353c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800347c:	897b      	ldrh	r3, [r7, #10]
 800347e:	11db      	asrs	r3, r3, #7
 8003480:	b2db      	uxtb	r3, r3
 8003482:	f003 0306 	and.w	r3, r3, #6
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f063 030f 	orn	r3, r3, #15
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4930      	ldr	r1, [pc, #192]	; (800355c <I2C_MasterRequestRead+0x194>)
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f8dc 	bl	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e054      	b.n	8003554 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034aa:	897b      	ldrh	r3, [r7, #10]
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4929      	ldr	r1, [pc, #164]	; (8003560 <I2C_MasterRequestRead+0x198>)
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f8cc 	bl	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e044      	b.n	8003554 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f831 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003516:	d103      	bne.n	8003520 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e017      	b.n	8003554 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003524:	897b      	ldrh	r3, [r7, #10]
 8003526:	11db      	asrs	r3, r3, #7
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f003 0306 	and.w	r3, r3, #6
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f063 030e 	orn	r3, r3, #14
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4907      	ldr	r1, [pc, #28]	; (8003560 <I2C_MasterRequestRead+0x198>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f888 	bl	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	00010008 	.word	0x00010008
 8003560:	00010002 	.word	0x00010002

08003564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003574:	e048      	b.n	8003608 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d044      	beq.n	8003608 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7fe fdc9 	bl	8002114 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <I2C_WaitOnFlagUntilTimeout+0x30>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d139      	bne.n	8003608 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	0c1b      	lsrs	r3, r3, #16
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d10d      	bne.n	80035ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	43da      	mvns	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4013      	ands	r3, r2
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	e00c      	b.n	80035d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	43da      	mvns	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4013      	ands	r3, r2
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d116      	bne.n	8003608 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f043 0220 	orr.w	r2, r3, #32
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e023      	b.n	8003650 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	0c1b      	lsrs	r3, r3, #16
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10d      	bne.n	800362e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	43da      	mvns	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4013      	ands	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf0c      	ite	eq
 8003624:	2301      	moveq	r3, #1
 8003626:	2300      	movne	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	e00c      	b.n	8003648 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	43da      	mvns	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	429a      	cmp	r2, r3
 800364c:	d093      	beq.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003666:	e071      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003676:	d123      	bne.n	80036c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003686:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003690:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f043 0204 	orr.w	r2, r3, #4
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e067      	b.n	8003790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d041      	beq.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c8:	f7fe fd24 	bl	8002114 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d136      	bne.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	0c1b      	lsrs	r3, r3, #16
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d10c      	bne.n	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	43da      	mvns	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf14      	ite	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	2300      	moveq	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	e00b      	b.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	43da      	mvns	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4013      	ands	r3, r2
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf14      	ite	ne
 8003714:	2301      	movne	r3, #1
 8003716:	2300      	moveq	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e021      	b.n	8003790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	0c1b      	lsrs	r3, r3, #16
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d10c      	bne.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	43da      	mvns	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4013      	ands	r3, r2
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	e00b      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	bf14      	ite	ne
 8003782:	2301      	movne	r3, #1
 8003784:	2300      	moveq	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	f47f af6d 	bne.w	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037a4:	e034      	b.n	8003810 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f8e3 	bl	8003972 <I2C_IsAcknowledgeFailed>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e034      	b.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d028      	beq.n	8003810 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037be:	f7fe fca9 	bl	8002114 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d302      	bcc.n	80037d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d11d      	bne.n	8003810 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b80      	cmp	r3, #128	; 0x80
 80037e0:	d016      	beq.n	8003810 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e007      	b.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381a:	2b80      	cmp	r3, #128	; 0x80
 800381c:	d1c3      	bne.n	80037a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003834:	e034      	b.n	80038a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f89b 	bl	8003972 <I2C_IsAcknowledgeFailed>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e034      	b.n	80038b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d028      	beq.n	80038a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fe fc61 	bl	8002114 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d11d      	bne.n	80038a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b04      	cmp	r3, #4
 8003870:	d016      	beq.n	80038a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	f043 0220 	orr.w	r2, r3, #32
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e007      	b.n	80038b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d1c3      	bne.n	8003836 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038c4:	e049      	b.n	800395a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d119      	bne.n	8003908 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0210 	mvn.w	r2, #16
 80038dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e030      	b.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003908:	f7fe fc04 	bl	8002114 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	429a      	cmp	r2, r3
 8003916:	d302      	bcc.n	800391e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d11d      	bne.n	800395a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b40      	cmp	r3, #64	; 0x40
 800392a:	d016      	beq.n	800395a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e007      	b.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d1ae      	bne.n	80038c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003988:	d11b      	bne.n	80039c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003992:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f043 0204 	orr.w	r2, r3, #4
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr
	...

080039d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e272      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 8087 	beq.w	8003afe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039f0:	4b92      	ldr	r3, [pc, #584]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 030c 	and.w	r3, r3, #12
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d00c      	beq.n	8003a16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039fc:	4b8f      	ldr	r3, [pc, #572]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d112      	bne.n	8003a2e <HAL_RCC_OscConfig+0x5e>
 8003a08:	4b8c      	ldr	r3, [pc, #560]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a14:	d10b      	bne.n	8003a2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a16:	4b89      	ldr	r3, [pc, #548]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d06c      	beq.n	8003afc <HAL_RCC_OscConfig+0x12c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d168      	bne.n	8003afc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e24c      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a36:	d106      	bne.n	8003a46 <HAL_RCC_OscConfig+0x76>
 8003a38:	4b80      	ldr	r3, [pc, #512]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a7f      	ldr	r2, [pc, #508]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	e02e      	b.n	8003aa4 <HAL_RCC_OscConfig+0xd4>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x98>
 8003a4e:	4b7b      	ldr	r3, [pc, #492]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a7a      	ldr	r2, [pc, #488]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	4b78      	ldr	r3, [pc, #480]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a77      	ldr	r2, [pc, #476]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e01d      	b.n	8003aa4 <HAL_RCC_OscConfig+0xd4>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0xbc>
 8003a72:	4b72      	ldr	r3, [pc, #456]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a71      	ldr	r2, [pc, #452]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b6f      	ldr	r3, [pc, #444]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a6e      	ldr	r2, [pc, #440]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e00b      	b.n	8003aa4 <HAL_RCC_OscConfig+0xd4>
 8003a8c:	4b6b      	ldr	r3, [pc, #428]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a6a      	ldr	r2, [pc, #424]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	4b68      	ldr	r3, [pc, #416]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a67      	ldr	r2, [pc, #412]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d013      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fe fb32 	bl	8002114 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7fe fb2e 	bl	8002114 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e200      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac6:	4b5d      	ldr	r3, [pc, #372]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0xe4>
 8003ad2:	e014      	b.n	8003afe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fb1e 	bl	8002114 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fe fb1a 	bl	8002114 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e1ec      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aee:	4b53      	ldr	r3, [pc, #332]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x10c>
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d063      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b0a:	4b4c      	ldr	r3, [pc, #304]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b16:	4b49      	ldr	r3, [pc, #292]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d11c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x18c>
 8003b22:	4b46      	ldr	r3, [pc, #280]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d116      	bne.n	8003b5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2e:	4b43      	ldr	r3, [pc, #268]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_RCC_OscConfig+0x176>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d001      	beq.n	8003b46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e1c0      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b46:	4b3d      	ldr	r3, [pc, #244]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4939      	ldr	r1, [pc, #228]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5a:	e03a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b64:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <HAL_RCC_OscConfig+0x270>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fad3 	bl	8002114 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b72:	f7fe facf 	bl	8002114 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e1a1      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b84:	4b2d      	ldr	r3, [pc, #180]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b90:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4927      	ldr	r1, [pc, #156]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]
 8003ba4:	e015      	b.n	8003bd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba6:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <HAL_RCC_OscConfig+0x270>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fe fab2 	bl	8002114 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb4:	f7fe faae 	bl	8002114 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e180      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d03a      	beq.n	8003c54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d019      	beq.n	8003c1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be6:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bec:	f7fe fa92 	bl	8002114 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf4:	f7fe fa8e 	bl	8002114 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e160      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c06:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <HAL_RCC_OscConfig+0x26c>)
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c12:	2001      	movs	r0, #1
 8003c14:	f000 face 	bl	80041b4 <RCC_Delay>
 8003c18:	e01c      	b.n	8003c54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_RCC_OscConfig+0x274>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c20:	f7fe fa78 	bl	8002114 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c26:	e00f      	b.n	8003c48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c28:	f7fe fa74 	bl	8002114 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d908      	bls.n	8003c48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e146      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	42420000 	.word	0x42420000
 8003c44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c48:	4b92      	ldr	r3, [pc, #584]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e9      	bne.n	8003c28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80a6 	beq.w	8003dae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c62:	2300      	movs	r3, #0
 8003c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c66:	4b8b      	ldr	r3, [pc, #556]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10d      	bne.n	8003c8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c72:	4b88      	ldr	r3, [pc, #544]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	4a87      	ldr	r2, [pc, #540]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	61d3      	str	r3, [r2, #28]
 8003c7e:	4b85      	ldr	r3, [pc, #532]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c86:	60bb      	str	r3, [r7, #8]
 8003c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8e:	4b82      	ldr	r3, [pc, #520]	; (8003e98 <HAL_RCC_OscConfig+0x4c8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d118      	bne.n	8003ccc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9a:	4b7f      	ldr	r3, [pc, #508]	; (8003e98 <HAL_RCC_OscConfig+0x4c8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a7e      	ldr	r2, [pc, #504]	; (8003e98 <HAL_RCC_OscConfig+0x4c8>)
 8003ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca6:	f7fe fa35 	bl	8002114 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cae:	f7fe fa31 	bl	8002114 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b64      	cmp	r3, #100	; 0x64
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e103      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc0:	4b75      	ldr	r3, [pc, #468]	; (8003e98 <HAL_RCC_OscConfig+0x4c8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d106      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x312>
 8003cd4:	4b6f      	ldr	r3, [pc, #444]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	4a6e      	ldr	r2, [pc, #440]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	6213      	str	r3, [r2, #32]
 8003ce0:	e02d      	b.n	8003d3e <HAL_RCC_OscConfig+0x36e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x334>
 8003cea:	4b6a      	ldr	r3, [pc, #424]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	4a69      	ldr	r2, [pc, #420]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	6213      	str	r3, [r2, #32]
 8003cf6:	4b67      	ldr	r3, [pc, #412]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	4a66      	ldr	r2, [pc, #408]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	6213      	str	r3, [r2, #32]
 8003d02:	e01c      	b.n	8003d3e <HAL_RCC_OscConfig+0x36e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d10c      	bne.n	8003d26 <HAL_RCC_OscConfig+0x356>
 8003d0c:	4b61      	ldr	r3, [pc, #388]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4a60      	ldr	r2, [pc, #384]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	f043 0304 	orr.w	r3, r3, #4
 8003d16:	6213      	str	r3, [r2, #32]
 8003d18:	4b5e      	ldr	r3, [pc, #376]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	4a5d      	ldr	r2, [pc, #372]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	6213      	str	r3, [r2, #32]
 8003d24:	e00b      	b.n	8003d3e <HAL_RCC_OscConfig+0x36e>
 8003d26:	4b5b      	ldr	r3, [pc, #364]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	4a5a      	ldr	r2, [pc, #360]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	6213      	str	r3, [r2, #32]
 8003d32:	4b58      	ldr	r3, [pc, #352]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	4a57      	ldr	r2, [pc, #348]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	f023 0304 	bic.w	r3, r3, #4
 8003d3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d015      	beq.n	8003d72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d46:	f7fe f9e5 	bl	8002114 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4c:	e00a      	b.n	8003d64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4e:	f7fe f9e1 	bl	8002114 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e0b1      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d64:	4b4b      	ldr	r3, [pc, #300]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ee      	beq.n	8003d4e <HAL_RCC_OscConfig+0x37e>
 8003d70:	e014      	b.n	8003d9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d72:	f7fe f9cf 	bl	8002114 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fe f9cb 	bl	8002114 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e09b      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d90:	4b40      	ldr	r3, [pc, #256]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1ee      	bne.n	8003d7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d105      	bne.n	8003dae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da2:	4b3c      	ldr	r3, [pc, #240]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	4a3b      	ldr	r2, [pc, #236]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 8087 	beq.w	8003ec6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003db8:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d061      	beq.n	8003e88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d146      	bne.n	8003e5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dcc:	4b33      	ldr	r3, [pc, #204]	; (8003e9c <HAL_RCC_OscConfig+0x4cc>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd2:	f7fe f99f 	bl	8002114 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dda:	f7fe f99b 	bl	8002114 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e06d      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dec:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f0      	bne.n	8003dda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d108      	bne.n	8003e14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	4921      	ldr	r1, [pc, #132]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e14:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a19      	ldr	r1, [r3, #32]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	430b      	orrs	r3, r1
 8003e26:	491b      	ldr	r1, [pc, #108]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e2c:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_RCC_OscConfig+0x4cc>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e32:	f7fe f96f 	bl	8002114 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3a:	f7fe f96b 	bl	8002114 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e03d      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x46a>
 8003e58:	e035      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_RCC_OscConfig+0x4cc>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e60:	f7fe f958 	bl	8002114 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe f954 	bl	8002114 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e026      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x498>
 8003e86:	e01e      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e019      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40007000 	.word	0x40007000
 8003e9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_OscConfig+0x500>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d106      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000

08003ed4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0d0      	b.n	800408a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b6a      	ldr	r3, [pc, #424]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d910      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b67      	ldr	r3, [pc, #412]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 0207 	bic.w	r2, r3, #7
 8003efe:	4965      	ldr	r1, [pc, #404]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b63      	ldr	r3, [pc, #396]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0b8      	b.n	800408a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f30:	4b59      	ldr	r3, [pc, #356]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4a58      	ldr	r2, [pc, #352]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f48:	4b53      	ldr	r3, [pc, #332]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f54:	4b50      	ldr	r3, [pc, #320]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	494d      	ldr	r1, [pc, #308]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d040      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d115      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07f      	b.n	800408a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e073      	b.n	800408a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	4b3d      	ldr	r3, [pc, #244]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e06b      	b.n	800408a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb2:	4b39      	ldr	r3, [pc, #228]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4936      	ldr	r1, [pc, #216]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc4:	f7fe f8a6 	bl	8002114 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7fe f8a2 	bl	8002114 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e053      	b.n	800408a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f003 020c 	and.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1eb      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b27      	ldr	r3, [pc, #156]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d210      	bcs.n	8004024 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f023 0207 	bic.w	r2, r3, #7
 800400a:	4922      	ldr	r1, [pc, #136]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	4313      	orrs	r3, r2
 8004010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e032      	b.n	800408a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004030:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4916      	ldr	r1, [pc, #88]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 800403e:	4313      	orrs	r3, r2
 8004040:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	490e      	ldr	r1, [pc, #56]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004062:	f000 f821 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8004066:	4602      	mov	r2, r0
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	490a      	ldr	r1, [pc, #40]	; (800409c <HAL_RCC_ClockConfig+0x1c8>)
 8004074:	5ccb      	ldrb	r3, [r1, r3]
 8004076:	fa22 f303 	lsr.w	r3, r2, r3
 800407a:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x1cc>)
 800407c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe f804 	bl	8002090 <HAL_InitTick>

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40022000 	.word	0x40022000
 8004098:	40021000 	.word	0x40021000
 800409c:	0800a780 	.word	0x0800a780
 80040a0:	20000000 	.word	0x20000000
 80040a4:	20000004 	.word	0x20000004

080040a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040c2:	4b1e      	ldr	r3, [pc, #120]	; (800413c <HAL_RCC_GetSysClockFreq+0x94>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d002      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0x30>
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d003      	beq.n	80040de <HAL_RCC_GetSysClockFreq+0x36>
 80040d6:	e027      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040d8:	4b19      	ldr	r3, [pc, #100]	; (8004140 <HAL_RCC_GetSysClockFreq+0x98>)
 80040da:	613b      	str	r3, [r7, #16]
      break;
 80040dc:	e027      	b.n	800412e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	0c9b      	lsrs	r3, r3, #18
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	4a17      	ldr	r2, [pc, #92]	; (8004144 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040e8:	5cd3      	ldrb	r3, [r2, r3]
 80040ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d010      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040f6:	4b11      	ldr	r3, [pc, #68]	; (800413c <HAL_RCC_GetSysClockFreq+0x94>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	0c5b      	lsrs	r3, r3, #17
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	4a11      	ldr	r2, [pc, #68]	; (8004148 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004102:	5cd3      	ldrb	r3, [r2, r3]
 8004104:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a0d      	ldr	r2, [pc, #52]	; (8004140 <HAL_RCC_GetSysClockFreq+0x98>)
 800410a:	fb03 f202 	mul.w	r2, r3, r2
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e004      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a0c      	ldr	r2, [pc, #48]	; (800414c <HAL_RCC_GetSysClockFreq+0xa4>)
 800411c:	fb02 f303 	mul.w	r3, r2, r3
 8004120:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	613b      	str	r3, [r7, #16]
      break;
 8004126:	e002      	b.n	800412e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <HAL_RCC_GetSysClockFreq+0x98>)
 800412a:	613b      	str	r3, [r7, #16]
      break;
 800412c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800412e:	693b      	ldr	r3, [r7, #16]
}
 8004130:	4618      	mov	r0, r3
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	007a1200 	.word	0x007a1200
 8004144:	0800a798 	.word	0x0800a798
 8004148:	0800a7a8 	.word	0x0800a7a8
 800414c:	003d0900 	.word	0x003d0900

08004150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004154:	4b02      	ldr	r3, [pc, #8]	; (8004160 <HAL_RCC_GetHCLKFreq+0x10>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr
 8004160:	20000000 	.word	0x20000000

08004164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004168:	f7ff fff2 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 800416c:	4602      	mov	r2, r0
 800416e:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	4903      	ldr	r1, [pc, #12]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40021000 	.word	0x40021000
 8004188:	0800a790 	.word	0x0800a790

0800418c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004190:	f7ff ffde 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004194:	4602      	mov	r2, r0
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	0adb      	lsrs	r3, r3, #11
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	4903      	ldr	r1, [pc, #12]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a2:	5ccb      	ldrb	r3, [r1, r3]
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000
 80041b0:	0800a790 	.word	0x0800a790

080041b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <RCC_Delay+0x34>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <RCC_Delay+0x38>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	0a5b      	lsrs	r3, r3, #9
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041d0:	bf00      	nop
  }
  while (Delay --);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1e5a      	subs	r2, r3, #1
 80041d6:	60fa      	str	r2, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f9      	bne.n	80041d0 <RCC_Delay+0x1c>
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	20000000 	.word	0x20000000
 80041ec:	10624dd3 	.word	0x10624dd3

080041f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e041      	b.n	8004286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fd fce8 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f000 fa82 	bl	8004738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d001      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e044      	b.n	8004332 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <HAL_TIM_Base_Start_IT+0xac>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d018      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x6c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <HAL_TIM_Base_Start_IT+0xb0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d013      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x6c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042dc:	d00e      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x6c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a18      	ldr	r2, [pc, #96]	; (8004344 <HAL_TIM_Base_Start_IT+0xb4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d009      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x6c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a16      	ldr	r2, [pc, #88]	; (8004348 <HAL_TIM_Base_Start_IT+0xb8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x6c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a15      	ldr	r2, [pc, #84]	; (800434c <HAL_TIM_Base_Start_IT+0xbc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d111      	bne.n	8004320 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b06      	cmp	r3, #6
 800430c:	d010      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431e:	e007      	b.n	8004330 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40013400 	.word	0x40013400
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00

08004350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b02      	cmp	r3, #2
 8004364:	d122      	bne.n	80043ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b02      	cmp	r3, #2
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0202 	mvn.w	r2, #2
 800437c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f9b4 	bl	8004700 <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f9a7 	bl	80046ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f9b6 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d122      	bne.n	8004400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d11b      	bne.n	8004400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0204 	mvn.w	r2, #4
 80043d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f98a 	bl	8004700 <HAL_TIM_IC_CaptureCallback>
 80043ec:	e005      	b.n	80043fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f97d 	bl	80046ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f98c 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b08      	cmp	r3, #8
 800440c:	d122      	bne.n	8004454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b08      	cmp	r3, #8
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0208 	mvn.w	r2, #8
 8004424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2204      	movs	r2, #4
 800442a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f960 	bl	8004700 <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f953 	bl	80046ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f962 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b10      	cmp	r3, #16
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b10      	cmp	r3, #16
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0210 	mvn.w	r2, #16
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2208      	movs	r2, #8
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f936 	bl	8004700 <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f929 	bl	80046ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f938 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d10e      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d107      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0201 	mvn.w	r2, #1
 80044cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fd fb0c 	bl	8001aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044de:	2b80      	cmp	r3, #128	; 0x80
 80044e0:	d10e      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	2b80      	cmp	r3, #128	; 0x80
 80044ee:	d107      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 faa1 	bl	8004a42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d10e      	bne.n	800452c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d107      	bne.n	800452c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f8fc 	bl	8004724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b20      	cmp	r3, #32
 8004538:	d10e      	bne.n	8004558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b20      	cmp	r3, #32
 8004546:	d107      	bne.n	8004558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0220 	mvn.w	r2, #32
 8004550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa6c 	bl	8004a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_TIM_ConfigClockSource+0x1c>
 8004578:	2302      	movs	r3, #2
 800457a:	e0b4      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x186>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800459a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b4:	d03e      	beq.n	8004634 <HAL_TIM_ConfigClockSource+0xd4>
 80045b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ba:	f200 8087 	bhi.w	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c2:	f000 8086 	beq.w	80046d2 <HAL_TIM_ConfigClockSource+0x172>
 80045c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ca:	d87f      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045cc:	2b70      	cmp	r3, #112	; 0x70
 80045ce:	d01a      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xa6>
 80045d0:	2b70      	cmp	r3, #112	; 0x70
 80045d2:	d87b      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b60      	cmp	r3, #96	; 0x60
 80045d6:	d050      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x11a>
 80045d8:	2b60      	cmp	r3, #96	; 0x60
 80045da:	d877      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b50      	cmp	r3, #80	; 0x50
 80045de:	d03c      	beq.n	800465a <HAL_TIM_ConfigClockSource+0xfa>
 80045e0:	2b50      	cmp	r3, #80	; 0x50
 80045e2:	d873      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d058      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x13a>
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	d86f      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b30      	cmp	r3, #48	; 0x30
 80045ee:	d064      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x15a>
 80045f0:	2b30      	cmp	r3, #48	; 0x30
 80045f2:	d86b      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d060      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x15a>
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d867      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d05c      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x15a>
 8004600:	2b10      	cmp	r3, #16
 8004602:	d05a      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x15a>
 8004604:	e062      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004616:	f000 f980 	bl	800491a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	609a      	str	r2, [r3, #8]
      break;
 8004632:	e04f      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004644:	f000 f969 	bl	800491a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004656:	609a      	str	r2, [r3, #8]
      break;
 8004658:	e03c      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004666:	461a      	mov	r2, r3
 8004668:	f000 f8e0 	bl	800482c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2150      	movs	r1, #80	; 0x50
 8004672:	4618      	mov	r0, r3
 8004674:	f000 f937 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 8004678:	e02c      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004686:	461a      	mov	r2, r3
 8004688:	f000 f8fe 	bl	8004888 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2160      	movs	r1, #96	; 0x60
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f927 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 8004698:	e01c      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a6:	461a      	mov	r2, r3
 80046a8:	f000 f8c0 	bl	800482c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2140      	movs	r1, #64	; 0x40
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 f917 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 80046b8:	e00c      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4619      	mov	r1, r3
 80046c4:	4610      	mov	r0, r2
 80046c6:	f000 f90e 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 80046ca:	e003      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
      break;
 80046d0:	e000      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr

08004712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
	...

08004738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a33      	ldr	r2, [pc, #204]	; (8004818 <TIM_Base_SetConfig+0xe0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d013      	beq.n	8004778 <TIM_Base_SetConfig+0x40>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a32      	ldr	r2, [pc, #200]	; (800481c <TIM_Base_SetConfig+0xe4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00f      	beq.n	8004778 <TIM_Base_SetConfig+0x40>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d00b      	beq.n	8004778 <TIM_Base_SetConfig+0x40>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a2f      	ldr	r2, [pc, #188]	; (8004820 <TIM_Base_SetConfig+0xe8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <TIM_Base_SetConfig+0x40>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a2e      	ldr	r2, [pc, #184]	; (8004824 <TIM_Base_SetConfig+0xec>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_Base_SetConfig+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a2d      	ldr	r2, [pc, #180]	; (8004828 <TIM_Base_SetConfig+0xf0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d108      	bne.n	800478a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a22      	ldr	r2, [pc, #136]	; (8004818 <TIM_Base_SetConfig+0xe0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <TIM_Base_SetConfig+0x82>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a21      	ldr	r2, [pc, #132]	; (800481c <TIM_Base_SetConfig+0xe4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00f      	beq.n	80047ba <TIM_Base_SetConfig+0x82>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a0:	d00b      	beq.n	80047ba <TIM_Base_SetConfig+0x82>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1e      	ldr	r2, [pc, #120]	; (8004820 <TIM_Base_SetConfig+0xe8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d007      	beq.n	80047ba <TIM_Base_SetConfig+0x82>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <TIM_Base_SetConfig+0xec>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d003      	beq.n	80047ba <TIM_Base_SetConfig+0x82>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <TIM_Base_SetConfig+0xf0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d108      	bne.n	80047cc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <TIM_Base_SetConfig+0xe0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_Base_SetConfig+0xc8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a08      	ldr	r2, [pc, #32]	; (800481c <TIM_Base_SetConfig+0xe4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d103      	bne.n	8004808 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	615a      	str	r2, [r3, #20]
}
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40013400 	.word	0x40013400
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800
 8004828:	40000c00 	.word	0x40000c00

0800482c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f023 0201 	bic.w	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f023 030a 	bic.w	r3, r3, #10
 8004868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0210 	bic.w	r2, r3, #16
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	031b      	lsls	r3, r3, #12
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	621a      	str	r2, [r3, #32]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr

080048e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	f043 0307 	orr.w	r3, r3, #7
 8004908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	609a      	str	r2, [r3, #8]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800491a:	b480      	push	{r7}
 800491c:	b087      	sub	sp, #28
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004934:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	021a      	lsls	r2, r3, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	431a      	orrs	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4313      	orrs	r3, r2
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	609a      	str	r2, [r3, #8]
}
 800494e:	bf00      	nop
 8004950:	371c      	adds	r7, #28
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800496c:	2302      	movs	r3, #2
 800496e:	e050      	b.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d018      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c6:	d00e      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d009      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d10c      	bne.n	8004a00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40013400 	.word	0x40013400
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40000800 	.word	0x40000800
 8004a2c:	40000c00 	.word	0x40000c00

08004a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e042      	b.n	8004aec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fd f8f4 	bl	8001c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2224      	movs	r2, #36	; 0x24
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fdc5 	bl	8005628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695a      	ldr	r2, [r3, #20]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d16d      	bne.n	8004bf0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_UART_Transmit+0x2c>
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e066      	b.n	8004bf2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2221      	movs	r2, #33	; 0x21
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b32:	f7fd faef 	bl	8002114 <HAL_GetTick>
 8004b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	88fa      	ldrh	r2, [r7, #6]
 8004b42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4c:	d108      	bne.n	8004b60 <HAL_UART_Transmit+0x6c>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d104      	bne.n	8004b60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	e003      	b.n	8004b68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b68:	e02a      	b.n	8004bc0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fb14 	bl	80051a2 <UART_WaitOnFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e036      	b.n	8004bf2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10b      	bne.n	8004ba2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	e007      	b.n	8004bb2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	781a      	ldrb	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1cf      	bne.n	8004b6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2140      	movs	r1, #64	; 0x40
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fae4 	bl	80051a2 <UART_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e006      	b.n	8004bf2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e000      	b.n	8004bf2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	4613      	mov	r3, r2
 8004c06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d112      	bne.n	8004c3a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_UART_Receive_IT+0x26>
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e00b      	b.n	8004c3c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c2a:	88fb      	ldrh	r3, [r7, #6]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fb24 	bl	800527e <UART_Start_Receive_IT>
 8004c36:	4603      	mov	r3, r0
 8004c38:	e000      	b.n	8004c3c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b0ba      	sub	sp, #232	; 0xe8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10f      	bne.n	8004caa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <HAL_UART_IRQHandler+0x66>
 8004c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fc01 	bl	80054aa <UART_Receive_IT>
      return;
 8004ca8:	e25b      	b.n	8005162 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004caa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 80de 	beq.w	8004e70 <HAL_UART_IRQHandler+0x22c>
 8004cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d106      	bne.n	8004cce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80d1 	beq.w	8004e70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <HAL_UART_IRQHandler+0xae>
 8004cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	f043 0201 	orr.w	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <HAL_UART_IRQHandler+0xd2>
 8004cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	f043 0202 	orr.w	r2, r3, #2
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <HAL_UART_IRQHandler+0xf6>
 8004d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	f043 0204 	orr.w	r2, r3, #4
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d011      	beq.n	8004d6a <HAL_UART_IRQHandler+0x126>
 8004d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d105      	bne.n	8004d5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	f043 0208 	orr.w	r2, r3, #8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 81f2 	beq.w	8005158 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_UART_IRQHandler+0x14e>
 8004d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fb8c 	bl	80054aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d103      	bne.n	8004dbe <HAL_UART_IRQHandler+0x17a>
 8004db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d04f      	beq.n	8004e5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa96 	bl	80052f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d041      	beq.n	8004e56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3314      	adds	r3, #20
 8004dfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1d9      	bne.n	8004dd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d013      	beq.n	8004e4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	4a7e      	ldr	r2, [pc, #504]	; (8005024 <HAL_UART_IRQHandler+0x3e0>)
 8004e2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fd fae4 	bl	8002400 <HAL_DMA_Abort_IT>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d016      	beq.n	8004e6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4c:	e00e      	b.n	8004e6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f993 	bl	800517a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e54:	e00a      	b.n	8004e6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f98f 	bl	800517a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5c:	e006      	b.n	8004e6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f98b 	bl	800517a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004e6a:	e175      	b.n	8005158 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e6c:	bf00      	nop
    return;
 8004e6e:	e173      	b.n	8005158 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	f040 814f 	bne.w	8005118 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 8148 	beq.w	8005118 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8141 	beq.w	8005118 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80b6 	beq.w	8005028 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ec8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8145 	beq.w	800515c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ed6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004eda:	429a      	cmp	r2, r3
 8004edc:	f080 813e 	bcs.w	800515c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ee6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	f000 8088 	beq.w	8005004 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f20:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1d9      	bne.n	8004ef4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3314      	adds	r3, #20
 8004f46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3314      	adds	r3, #20
 8004f60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e1      	bne.n	8004f40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3314      	adds	r3, #20
 8004f82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3314      	adds	r3, #20
 8004f9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fa0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fa2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fa6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e3      	bne.n	8004f7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd4:	f023 0310 	bic.w	r3, r3, #16
 8004fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004fe6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fe8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e3      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fd f9c3 	bl	800238a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005012:	b29b      	uxth	r3, r3
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	b29b      	uxth	r3, r3
 8005018:	4619      	mov	r1, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f8b6 	bl	800518c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005020:	e09c      	b.n	800515c <HAL_UART_IRQHandler+0x518>
 8005022:	bf00      	nop
 8005024:	080053b5 	.word	0x080053b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005030:	b29b      	uxth	r3, r3
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 808e 	beq.w	8005160 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005044:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8089 	beq.w	8005160 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	330c      	adds	r3, #12
 8005054:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005060:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005064:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	330c      	adds	r3, #12
 800506e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005072:	647a      	str	r2, [r7, #68]	; 0x44
 8005074:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005078:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e3      	bne.n	800504e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3314      	adds	r3, #20
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	623b      	str	r3, [r7, #32]
   return(result);
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	f023 0301 	bic.w	r3, r3, #1
 800509c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3314      	adds	r3, #20
 80050a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050aa:	633a      	str	r2, [r7, #48]	; 0x30
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e3      	bne.n	8005086 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	60fb      	str	r3, [r7, #12]
   return(result);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0310 	bic.w	r3, r3, #16
 80050e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050f0:	61fa      	str	r2, [r7, #28]
 80050f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	69b9      	ldr	r1, [r7, #24]
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	617b      	str	r3, [r7, #20]
   return(result);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e3      	bne.n	80050cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800510a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f83b 	bl	800518c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005116:	e023      	b.n	8005160 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005120:	2b00      	cmp	r3, #0
 8005122:	d009      	beq.n	8005138 <HAL_UART_IRQHandler+0x4f4>
 8005124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f953 	bl	80053dc <UART_Transmit_IT>
    return;
 8005136:	e014      	b.n	8005162 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00e      	beq.n	8005162 <HAL_UART_IRQHandler+0x51e>
 8005144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f992 	bl	800547a <UART_EndTransmit_IT>
    return;
 8005156:	e004      	b.n	8005162 <HAL_UART_IRQHandler+0x51e>
    return;
 8005158:	bf00      	nop
 800515a:	e002      	b.n	8005162 <HAL_UART_IRQHandler+0x51e>
      return;
 800515c:	bf00      	nop
 800515e:	e000      	b.n	8005162 <HAL_UART_IRQHandler+0x51e>
      return;
 8005160:	bf00      	nop
  }
}
 8005162:	37e8      	adds	r7, #232	; 0xe8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr

0800518c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr

080051a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b090      	sub	sp, #64	; 0x40
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	603b      	str	r3, [r7, #0]
 80051ae:	4613      	mov	r3, r2
 80051b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b2:	e050      	b.n	8005256 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d04c      	beq.n	8005256 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80051c2:	f7fc ffa7 	bl	8002114 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d241      	bcs.n	8005256 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	330c      	adds	r3, #12
 80051f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051f2:	637a      	str	r2, [r7, #52]	; 0x34
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e5      	bne.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3314      	adds	r3, #20
 800520c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	613b      	str	r3, [r7, #16]
   return(result);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f023 0301 	bic.w	r3, r3, #1
 800521c:	63bb      	str	r3, [r7, #56]	; 0x38
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3314      	adds	r3, #20
 8005224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005226:	623a      	str	r2, [r7, #32]
 8005228:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	69f9      	ldr	r1, [r7, #28]
 800522c:	6a3a      	ldr	r2, [r7, #32]
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	61bb      	str	r3, [r7, #24]
   return(result);
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e00f      	b.n	8005276 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4013      	ands	r3, r2
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	429a      	cmp	r2, r3
 8005264:	bf0c      	ite	eq
 8005266:	2301      	moveq	r3, #1
 8005268:	2300      	movne	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	429a      	cmp	r2, r3
 8005272:	d09f      	beq.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3740      	adds	r7, #64	; 0x40
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	4613      	mov	r3, r2
 800528a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	88fa      	ldrh	r2, [r7, #6]
 8005296:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2222      	movs	r2, #34	; 0x22
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695a      	ldr	r2, [r3, #20]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0220 	orr.w	r2, r2, #32
 80052e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr

080052f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b095      	sub	sp, #84	; 0x54
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	330c      	adds	r3, #12
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800530e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	330c      	adds	r3, #12
 8005316:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005318:	643a      	str	r2, [r7, #64]	; 0x40
 800531a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800531e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e5      	bne.n	80052f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3314      	adds	r3, #20
 8005332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	61fb      	str	r3, [r7, #28]
   return(result);
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f023 0301 	bic.w	r3, r3, #1
 8005342:	64bb      	str	r3, [r7, #72]	; 0x48
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3314      	adds	r3, #20
 800534a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800534c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e5      	bne.n	800532c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	2b01      	cmp	r3, #1
 8005366:	d119      	bne.n	800539c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	330c      	adds	r3, #12
 800536e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	60bb      	str	r3, [r7, #8]
   return(result);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f023 0310 	bic.w	r3, r3, #16
 800537e:	647b      	str	r3, [r7, #68]	; 0x44
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005388:	61ba      	str	r2, [r7, #24]
 800538a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6979      	ldr	r1, [r7, #20]
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	613b      	str	r3, [r7, #16]
   return(result);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e5      	bne.n	8005368 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053aa:	bf00      	nop
 80053ac:	3754      	adds	r7, #84	; 0x54
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff fed3 	bl	800517a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b21      	cmp	r3, #33	; 0x21
 80053ee:	d13e      	bne.n	800546e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f8:	d114      	bne.n	8005424 <UART_Transmit_IT+0x48>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d110      	bne.n	8005424 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005416:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	1c9a      	adds	r2, r3, #2
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	621a      	str	r2, [r3, #32]
 8005422:	e008      	b.n	8005436 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	1c59      	adds	r1, r3, #1
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6211      	str	r1, [r2, #32]
 800542e:	781a      	ldrb	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29b      	uxth	r3, r3
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	4619      	mov	r1, r3
 8005444:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10f      	bne.n	800546a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005458:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005468:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e000      	b.n	8005470 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800546e:	2302      	movs	r3, #2
  }
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005490:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff fe64 	bl	8005168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b08c      	sub	sp, #48	; 0x30
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b22      	cmp	r3, #34	; 0x22
 80054bc:	f040 80ae 	bne.w	800561c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c8:	d117      	bne.n	80054fa <UART_Receive_IT+0x50>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d113      	bne.n	80054fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	1c9a      	adds	r2, r3, #2
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	629a      	str	r2, [r3, #40]	; 0x28
 80054f8:	e026      	b.n	8005548 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550c:	d007      	beq.n	800551e <UART_Receive_IT+0x74>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10a      	bne.n	800552c <UART_Receive_IT+0x82>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e008      	b.n	800553e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005538:	b2da      	uxtb	r2, r3
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29b      	uxth	r3, r3
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	4619      	mov	r1, r3
 8005556:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005558:	2b00      	cmp	r3, #0
 800555a:	d15d      	bne.n	8005618 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0220 	bic.w	r2, r2, #32
 800556a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800557a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0201 	bic.w	r2, r2, #1
 800558a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d135      	bne.n	800560e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	613b      	str	r3, [r7, #16]
   return(result);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f023 0310 	bic.w	r3, r3, #16
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c8:	623a      	str	r2, [r7, #32]
 80055ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	69f9      	ldr	r1, [r7, #28]
 80055ce:	6a3a      	ldr	r2, [r7, #32]
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e5      	bne.n	80055a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	2b10      	cmp	r3, #16
 80055e8:	d10a      	bne.n	8005600 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005604:	4619      	mov	r1, r3
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff fdc0 	bl	800518c <HAL_UARTEx_RxEventCallback>
 800560c:	e002      	b.n	8005614 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fc f866 	bl	80016e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	e002      	b.n	800561e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	e000      	b.n	800561e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	3730      	adds	r7, #48	; 0x30
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005662:	f023 030c 	bic.w	r3, r3, #12
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	430b      	orrs	r3, r1
 800566e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2c      	ldr	r2, [pc, #176]	; (800573c <UART_SetConfig+0x114>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d103      	bne.n	8005698 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005690:	f7fe fd7c 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	e002      	b.n	800569e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005698:	f7fe fd64 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 800569c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009a      	lsls	r2, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	4a22      	ldr	r2, [pc, #136]	; (8005740 <UART_SetConfig+0x118>)
 80056b6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	0119      	lsls	r1, r3, #4
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009a      	lsls	r2, r3, #2
 80056c8:	441a      	add	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056d4:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <UART_SetConfig+0x118>)
 80056d6:	fba3 0302 	umull	r0, r3, r3, r2
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	2064      	movs	r0, #100	; 0x64
 80056de:	fb00 f303 	mul.w	r3, r0, r3
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	3332      	adds	r3, #50	; 0x32
 80056e8:	4a15      	ldr	r2, [pc, #84]	; (8005740 <UART_SetConfig+0x118>)
 80056ea:	fba2 2303 	umull	r2, r3, r2, r3
 80056ee:	095b      	lsrs	r3, r3, #5
 80056f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056f4:	4419      	add	r1, r3
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	009a      	lsls	r2, r3, #2
 8005700:	441a      	add	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	fbb2 f2f3 	udiv	r2, r2, r3
 800570c:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <UART_SetConfig+0x118>)
 800570e:	fba3 0302 	umull	r0, r3, r3, r2
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	2064      	movs	r0, #100	; 0x64
 8005716:	fb00 f303 	mul.w	r3, r0, r3
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	3332      	adds	r3, #50	; 0x32
 8005720:	4a07      	ldr	r2, [pc, #28]	; (8005740 <UART_SetConfig+0x118>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	f003 020f 	and.w	r2, r3, #15
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	440a      	add	r2, r1
 8005732:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40013800 	.word	0x40013800
 8005740:	51eb851f 	.word	0x51eb851f

08005744 <__cvt>:
 8005744:	2b00      	cmp	r3, #0
 8005746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800574a:	461f      	mov	r7, r3
 800574c:	bfbb      	ittet	lt
 800574e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005752:	461f      	movlt	r7, r3
 8005754:	2300      	movge	r3, #0
 8005756:	232d      	movlt	r3, #45	; 0x2d
 8005758:	b088      	sub	sp, #32
 800575a:	4614      	mov	r4, r2
 800575c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800575e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005760:	7013      	strb	r3, [r2, #0]
 8005762:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005764:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005768:	f023 0820 	bic.w	r8, r3, #32
 800576c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005770:	d005      	beq.n	800577e <__cvt+0x3a>
 8005772:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005776:	d100      	bne.n	800577a <__cvt+0x36>
 8005778:	3501      	adds	r5, #1
 800577a:	2302      	movs	r3, #2
 800577c:	e000      	b.n	8005780 <__cvt+0x3c>
 800577e:	2303      	movs	r3, #3
 8005780:	aa07      	add	r2, sp, #28
 8005782:	9204      	str	r2, [sp, #16]
 8005784:	aa06      	add	r2, sp, #24
 8005786:	e9cd a202 	strd	sl, r2, [sp, #8]
 800578a:	e9cd 3500 	strd	r3, r5, [sp]
 800578e:	4622      	mov	r2, r4
 8005790:	463b      	mov	r3, r7
 8005792:	f001 f8b1 	bl	80068f8 <_dtoa_r>
 8005796:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800579a:	4606      	mov	r6, r0
 800579c:	d102      	bne.n	80057a4 <__cvt+0x60>
 800579e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057a0:	07db      	lsls	r3, r3, #31
 80057a2:	d522      	bpl.n	80057ea <__cvt+0xa6>
 80057a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057a8:	eb06 0905 	add.w	r9, r6, r5
 80057ac:	d110      	bne.n	80057d0 <__cvt+0x8c>
 80057ae:	7833      	ldrb	r3, [r6, #0]
 80057b0:	2b30      	cmp	r3, #48	; 0x30
 80057b2:	d10a      	bne.n	80057ca <__cvt+0x86>
 80057b4:	2200      	movs	r2, #0
 80057b6:	2300      	movs	r3, #0
 80057b8:	4620      	mov	r0, r4
 80057ba:	4639      	mov	r1, r7
 80057bc:	f7fb f96a 	bl	8000a94 <__aeabi_dcmpeq>
 80057c0:	b918      	cbnz	r0, 80057ca <__cvt+0x86>
 80057c2:	f1c5 0501 	rsb	r5, r5, #1
 80057c6:	f8ca 5000 	str.w	r5, [sl]
 80057ca:	f8da 3000 	ldr.w	r3, [sl]
 80057ce:	4499      	add	r9, r3
 80057d0:	2200      	movs	r2, #0
 80057d2:	2300      	movs	r3, #0
 80057d4:	4620      	mov	r0, r4
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fb f95c 	bl	8000a94 <__aeabi_dcmpeq>
 80057dc:	b108      	cbz	r0, 80057e2 <__cvt+0x9e>
 80057de:	f8cd 901c 	str.w	r9, [sp, #28]
 80057e2:	2230      	movs	r2, #48	; 0x30
 80057e4:	9b07      	ldr	r3, [sp, #28]
 80057e6:	454b      	cmp	r3, r9
 80057e8:	d307      	bcc.n	80057fa <__cvt+0xb6>
 80057ea:	4630      	mov	r0, r6
 80057ec:	9b07      	ldr	r3, [sp, #28]
 80057ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80057f0:	1b9b      	subs	r3, r3, r6
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	b008      	add	sp, #32
 80057f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057fa:	1c59      	adds	r1, r3, #1
 80057fc:	9107      	str	r1, [sp, #28]
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	e7f0      	b.n	80057e4 <__cvt+0xa0>

08005802 <__exponent>:
 8005802:	4603      	mov	r3, r0
 8005804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005806:	2900      	cmp	r1, #0
 8005808:	f803 2b02 	strb.w	r2, [r3], #2
 800580c:	bfb6      	itet	lt
 800580e:	222d      	movlt	r2, #45	; 0x2d
 8005810:	222b      	movge	r2, #43	; 0x2b
 8005812:	4249      	neglt	r1, r1
 8005814:	2909      	cmp	r1, #9
 8005816:	7042      	strb	r2, [r0, #1]
 8005818:	dd2a      	ble.n	8005870 <__exponent+0x6e>
 800581a:	f10d 0207 	add.w	r2, sp, #7
 800581e:	4617      	mov	r7, r2
 8005820:	260a      	movs	r6, #10
 8005822:	fb91 f5f6 	sdiv	r5, r1, r6
 8005826:	4694      	mov	ip, r2
 8005828:	fb06 1415 	mls	r4, r6, r5, r1
 800582c:	3430      	adds	r4, #48	; 0x30
 800582e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005832:	460c      	mov	r4, r1
 8005834:	2c63      	cmp	r4, #99	; 0x63
 8005836:	4629      	mov	r1, r5
 8005838:	f102 32ff 	add.w	r2, r2, #4294967295
 800583c:	dcf1      	bgt.n	8005822 <__exponent+0x20>
 800583e:	3130      	adds	r1, #48	; 0x30
 8005840:	f1ac 0402 	sub.w	r4, ip, #2
 8005844:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005848:	4622      	mov	r2, r4
 800584a:	1c41      	adds	r1, r0, #1
 800584c:	42ba      	cmp	r2, r7
 800584e:	d30a      	bcc.n	8005866 <__exponent+0x64>
 8005850:	f10d 0209 	add.w	r2, sp, #9
 8005854:	eba2 020c 	sub.w	r2, r2, ip
 8005858:	42bc      	cmp	r4, r7
 800585a:	bf88      	it	hi
 800585c:	2200      	movhi	r2, #0
 800585e:	4413      	add	r3, r2
 8005860:	1a18      	subs	r0, r3, r0
 8005862:	b003      	add	sp, #12
 8005864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005866:	f812 5b01 	ldrb.w	r5, [r2], #1
 800586a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800586e:	e7ed      	b.n	800584c <__exponent+0x4a>
 8005870:	2330      	movs	r3, #48	; 0x30
 8005872:	3130      	adds	r1, #48	; 0x30
 8005874:	7083      	strb	r3, [r0, #2]
 8005876:	70c1      	strb	r1, [r0, #3]
 8005878:	1d03      	adds	r3, r0, #4
 800587a:	e7f1      	b.n	8005860 <__exponent+0x5e>

0800587c <_printf_float>:
 800587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	b091      	sub	sp, #68	; 0x44
 8005882:	460c      	mov	r4, r1
 8005884:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005888:	4616      	mov	r6, r2
 800588a:	461f      	mov	r7, r3
 800588c:	4605      	mov	r5, r0
 800588e:	f000 ff1f 	bl	80066d0 <_localeconv_r>
 8005892:	6803      	ldr	r3, [r0, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	9309      	str	r3, [sp, #36]	; 0x24
 8005898:	f7fa fcd0 	bl	800023c <strlen>
 800589c:	2300      	movs	r3, #0
 800589e:	930e      	str	r3, [sp, #56]	; 0x38
 80058a0:	f8d8 3000 	ldr.w	r3, [r8]
 80058a4:	900a      	str	r0, [sp, #40]	; 0x28
 80058a6:	3307      	adds	r3, #7
 80058a8:	f023 0307 	bic.w	r3, r3, #7
 80058ac:	f103 0208 	add.w	r2, r3, #8
 80058b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80058b4:	f8d4 b000 	ldr.w	fp, [r4]
 80058b8:	f8c8 2000 	str.w	r2, [r8]
 80058bc:	e9d3 a800 	ldrd	sl, r8, [r3]
 80058c0:	4652      	mov	r2, sl
 80058c2:	4643      	mov	r3, r8
 80058c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058c8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80058cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80058ce:	f04f 32ff 	mov.w	r2, #4294967295
 80058d2:	4650      	mov	r0, sl
 80058d4:	4b9c      	ldr	r3, [pc, #624]	; (8005b48 <_printf_float+0x2cc>)
 80058d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058d8:	f7fb f90e 	bl	8000af8 <__aeabi_dcmpun>
 80058dc:	bb70      	cbnz	r0, 800593c <_printf_float+0xc0>
 80058de:	f04f 32ff 	mov.w	r2, #4294967295
 80058e2:	4650      	mov	r0, sl
 80058e4:	4b98      	ldr	r3, [pc, #608]	; (8005b48 <_printf_float+0x2cc>)
 80058e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058e8:	f7fb f8e8 	bl	8000abc <__aeabi_dcmple>
 80058ec:	bb30      	cbnz	r0, 800593c <_printf_float+0xc0>
 80058ee:	2200      	movs	r2, #0
 80058f0:	2300      	movs	r3, #0
 80058f2:	4650      	mov	r0, sl
 80058f4:	4641      	mov	r1, r8
 80058f6:	f7fb f8d7 	bl	8000aa8 <__aeabi_dcmplt>
 80058fa:	b110      	cbz	r0, 8005902 <_printf_float+0x86>
 80058fc:	232d      	movs	r3, #45	; 0x2d
 80058fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005902:	4a92      	ldr	r2, [pc, #584]	; (8005b4c <_printf_float+0x2d0>)
 8005904:	4b92      	ldr	r3, [pc, #584]	; (8005b50 <_printf_float+0x2d4>)
 8005906:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800590a:	bf94      	ite	ls
 800590c:	4690      	movls	r8, r2
 800590e:	4698      	movhi	r8, r3
 8005910:	2303      	movs	r3, #3
 8005912:	f04f 0a00 	mov.w	sl, #0
 8005916:	6123      	str	r3, [r4, #16]
 8005918:	f02b 0304 	bic.w	r3, fp, #4
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	4633      	mov	r3, r6
 8005920:	4621      	mov	r1, r4
 8005922:	4628      	mov	r0, r5
 8005924:	9700      	str	r7, [sp, #0]
 8005926:	aa0f      	add	r2, sp, #60	; 0x3c
 8005928:	f000 f9d6 	bl	8005cd8 <_printf_common>
 800592c:	3001      	adds	r0, #1
 800592e:	f040 8090 	bne.w	8005a52 <_printf_float+0x1d6>
 8005932:	f04f 30ff 	mov.w	r0, #4294967295
 8005936:	b011      	add	sp, #68	; 0x44
 8005938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593c:	4652      	mov	r2, sl
 800593e:	4643      	mov	r3, r8
 8005940:	4650      	mov	r0, sl
 8005942:	4641      	mov	r1, r8
 8005944:	f7fb f8d8 	bl	8000af8 <__aeabi_dcmpun>
 8005948:	b148      	cbz	r0, 800595e <_printf_float+0xe2>
 800594a:	f1b8 0f00 	cmp.w	r8, #0
 800594e:	bfb8      	it	lt
 8005950:	232d      	movlt	r3, #45	; 0x2d
 8005952:	4a80      	ldr	r2, [pc, #512]	; (8005b54 <_printf_float+0x2d8>)
 8005954:	bfb8      	it	lt
 8005956:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800595a:	4b7f      	ldr	r3, [pc, #508]	; (8005b58 <_printf_float+0x2dc>)
 800595c:	e7d3      	b.n	8005906 <_printf_float+0x8a>
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	d142      	bne.n	80059ee <_printf_float+0x172>
 8005968:	2306      	movs	r3, #6
 800596a:	6063      	str	r3, [r4, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	9206      	str	r2, [sp, #24]
 8005970:	aa0e      	add	r2, sp, #56	; 0x38
 8005972:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005976:	aa0d      	add	r2, sp, #52	; 0x34
 8005978:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800597c:	9203      	str	r2, [sp, #12]
 800597e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005982:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005986:	6023      	str	r3, [r4, #0]
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	4652      	mov	r2, sl
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	4628      	mov	r0, r5
 8005990:	4643      	mov	r3, r8
 8005992:	910b      	str	r1, [sp, #44]	; 0x2c
 8005994:	f7ff fed6 	bl	8005744 <__cvt>
 8005998:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800599a:	4680      	mov	r8, r0
 800599c:	2947      	cmp	r1, #71	; 0x47
 800599e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059a0:	d108      	bne.n	80059b4 <_printf_float+0x138>
 80059a2:	1cc8      	adds	r0, r1, #3
 80059a4:	db02      	blt.n	80059ac <_printf_float+0x130>
 80059a6:	6863      	ldr	r3, [r4, #4]
 80059a8:	4299      	cmp	r1, r3
 80059aa:	dd40      	ble.n	8005a2e <_printf_float+0x1b2>
 80059ac:	f1a9 0902 	sub.w	r9, r9, #2
 80059b0:	fa5f f989 	uxtb.w	r9, r9
 80059b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059b8:	d81f      	bhi.n	80059fa <_printf_float+0x17e>
 80059ba:	464a      	mov	r2, r9
 80059bc:	3901      	subs	r1, #1
 80059be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059c2:	910d      	str	r1, [sp, #52]	; 0x34
 80059c4:	f7ff ff1d 	bl	8005802 <__exponent>
 80059c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059ca:	4682      	mov	sl, r0
 80059cc:	1813      	adds	r3, r2, r0
 80059ce:	2a01      	cmp	r2, #1
 80059d0:	6123      	str	r3, [r4, #16]
 80059d2:	dc02      	bgt.n	80059da <_printf_float+0x15e>
 80059d4:	6822      	ldr	r2, [r4, #0]
 80059d6:	07d2      	lsls	r2, r2, #31
 80059d8:	d501      	bpl.n	80059de <_printf_float+0x162>
 80059da:	3301      	adds	r3, #1
 80059dc:	6123      	str	r3, [r4, #16]
 80059de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d09b      	beq.n	800591e <_printf_float+0xa2>
 80059e6:	232d      	movs	r3, #45	; 0x2d
 80059e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ec:	e797      	b.n	800591e <_printf_float+0xa2>
 80059ee:	2947      	cmp	r1, #71	; 0x47
 80059f0:	d1bc      	bne.n	800596c <_printf_float+0xf0>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1ba      	bne.n	800596c <_printf_float+0xf0>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e7b7      	b.n	800596a <_printf_float+0xee>
 80059fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80059fe:	d118      	bne.n	8005a32 <_printf_float+0x1b6>
 8005a00:	2900      	cmp	r1, #0
 8005a02:	6863      	ldr	r3, [r4, #4]
 8005a04:	dd0b      	ble.n	8005a1e <_printf_float+0x1a2>
 8005a06:	6121      	str	r1, [r4, #16]
 8005a08:	b913      	cbnz	r3, 8005a10 <_printf_float+0x194>
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	07d0      	lsls	r0, r2, #31
 8005a0e:	d502      	bpl.n	8005a16 <_printf_float+0x19a>
 8005a10:	3301      	adds	r3, #1
 8005a12:	440b      	add	r3, r1
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	f04f 0a00 	mov.w	sl, #0
 8005a1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a1c:	e7df      	b.n	80059de <_printf_float+0x162>
 8005a1e:	b913      	cbnz	r3, 8005a26 <_printf_float+0x1aa>
 8005a20:	6822      	ldr	r2, [r4, #0]
 8005a22:	07d2      	lsls	r2, r2, #31
 8005a24:	d501      	bpl.n	8005a2a <_printf_float+0x1ae>
 8005a26:	3302      	adds	r3, #2
 8005a28:	e7f4      	b.n	8005a14 <_printf_float+0x198>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e7f2      	b.n	8005a14 <_printf_float+0x198>
 8005a2e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a34:	4299      	cmp	r1, r3
 8005a36:	db05      	blt.n	8005a44 <_printf_float+0x1c8>
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	6121      	str	r1, [r4, #16]
 8005a3c:	07d8      	lsls	r0, r3, #31
 8005a3e:	d5ea      	bpl.n	8005a16 <_printf_float+0x19a>
 8005a40:	1c4b      	adds	r3, r1, #1
 8005a42:	e7e7      	b.n	8005a14 <_printf_float+0x198>
 8005a44:	2900      	cmp	r1, #0
 8005a46:	bfcc      	ite	gt
 8005a48:	2201      	movgt	r2, #1
 8005a4a:	f1c1 0202 	rsble	r2, r1, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	e7e0      	b.n	8005a14 <_printf_float+0x198>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	055a      	lsls	r2, r3, #21
 8005a56:	d407      	bmi.n	8005a68 <_printf_float+0x1ec>
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	4642      	mov	r2, r8
 8005a5c:	4631      	mov	r1, r6
 8005a5e:	4628      	mov	r0, r5
 8005a60:	47b8      	blx	r7
 8005a62:	3001      	adds	r0, #1
 8005a64:	d12b      	bne.n	8005abe <_printf_float+0x242>
 8005a66:	e764      	b.n	8005932 <_printf_float+0xb6>
 8005a68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a6c:	f240 80dd 	bls.w	8005c2a <_printf_float+0x3ae>
 8005a70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a74:	2200      	movs	r2, #0
 8005a76:	2300      	movs	r3, #0
 8005a78:	f7fb f80c 	bl	8000a94 <__aeabi_dcmpeq>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d033      	beq.n	8005ae8 <_printf_float+0x26c>
 8005a80:	2301      	movs	r3, #1
 8005a82:	4631      	mov	r1, r6
 8005a84:	4628      	mov	r0, r5
 8005a86:	4a35      	ldr	r2, [pc, #212]	; (8005b5c <_printf_float+0x2e0>)
 8005a88:	47b8      	blx	r7
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	f43f af51 	beq.w	8005932 <_printf_float+0xb6>
 8005a90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a94:	429a      	cmp	r2, r3
 8005a96:	db02      	blt.n	8005a9e <_printf_float+0x222>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	07d8      	lsls	r0, r3, #31
 8005a9c:	d50f      	bpl.n	8005abe <_printf_float+0x242>
 8005a9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b8      	blx	r7
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	f43f af42 	beq.w	8005932 <_printf_float+0xb6>
 8005aae:	f04f 0800 	mov.w	r8, #0
 8005ab2:	f104 091a 	add.w	r9, r4, #26
 8005ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	4543      	cmp	r3, r8
 8005abc:	dc09      	bgt.n	8005ad2 <_printf_float+0x256>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	079b      	lsls	r3, r3, #30
 8005ac2:	f100 8104 	bmi.w	8005cce <_printf_float+0x452>
 8005ac6:	68e0      	ldr	r0, [r4, #12]
 8005ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005aca:	4298      	cmp	r0, r3
 8005acc:	bfb8      	it	lt
 8005ace:	4618      	movlt	r0, r3
 8005ad0:	e731      	b.n	8005936 <_printf_float+0xba>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	464a      	mov	r2, r9
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b8      	blx	r7
 8005adc:	3001      	adds	r0, #1
 8005ade:	f43f af28 	beq.w	8005932 <_printf_float+0xb6>
 8005ae2:	f108 0801 	add.w	r8, r8, #1
 8005ae6:	e7e6      	b.n	8005ab6 <_printf_float+0x23a>
 8005ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	dc38      	bgt.n	8005b60 <_printf_float+0x2e4>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	4a19      	ldr	r2, [pc, #100]	; (8005b5c <_printf_float+0x2e0>)
 8005af6:	47b8      	blx	r7
 8005af8:	3001      	adds	r0, #1
 8005afa:	f43f af1a 	beq.w	8005932 <_printf_float+0xb6>
 8005afe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005b02:	4313      	orrs	r3, r2
 8005b04:	d102      	bne.n	8005b0c <_printf_float+0x290>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	07d9      	lsls	r1, r3, #31
 8005b0a:	d5d8      	bpl.n	8005abe <_printf_float+0x242>
 8005b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	47b8      	blx	r7
 8005b16:	3001      	adds	r0, #1
 8005b18:	f43f af0b 	beq.w	8005932 <_printf_float+0xb6>
 8005b1c:	f04f 0900 	mov.w	r9, #0
 8005b20:	f104 0a1a 	add.w	sl, r4, #26
 8005b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b26:	425b      	negs	r3, r3
 8005b28:	454b      	cmp	r3, r9
 8005b2a:	dc01      	bgt.n	8005b30 <_printf_float+0x2b4>
 8005b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b2e:	e794      	b.n	8005a5a <_printf_float+0x1de>
 8005b30:	2301      	movs	r3, #1
 8005b32:	4652      	mov	r2, sl
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f aef9 	beq.w	8005932 <_printf_float+0xb6>
 8005b40:	f109 0901 	add.w	r9, r9, #1
 8005b44:	e7ee      	b.n	8005b24 <_printf_float+0x2a8>
 8005b46:	bf00      	nop
 8005b48:	7fefffff 	.word	0x7fefffff
 8005b4c:	0800a7aa 	.word	0x0800a7aa
 8005b50:	0800a7ae 	.word	0x0800a7ae
 8005b54:	0800a7b2 	.word	0x0800a7b2
 8005b58:	0800a7b6 	.word	0x0800a7b6
 8005b5c:	0800ab40 	.word	0x0800ab40
 8005b60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b64:	429a      	cmp	r2, r3
 8005b66:	bfa8      	it	ge
 8005b68:	461a      	movge	r2, r3
 8005b6a:	2a00      	cmp	r2, #0
 8005b6c:	4691      	mov	r9, r2
 8005b6e:	dc37      	bgt.n	8005be0 <_printf_float+0x364>
 8005b70:	f04f 0b00 	mov.w	fp, #0
 8005b74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b78:	f104 021a 	add.w	r2, r4, #26
 8005b7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b80:	ebaa 0309 	sub.w	r3, sl, r9
 8005b84:	455b      	cmp	r3, fp
 8005b86:	dc33      	bgt.n	8005bf0 <_printf_float+0x374>
 8005b88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	db3b      	blt.n	8005c08 <_printf_float+0x38c>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	07da      	lsls	r2, r3, #31
 8005b94:	d438      	bmi.n	8005c08 <_printf_float+0x38c>
 8005b96:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005b9a:	eba2 0903 	sub.w	r9, r2, r3
 8005b9e:	eba2 020a 	sub.w	r2, r2, sl
 8005ba2:	4591      	cmp	r9, r2
 8005ba4:	bfa8      	it	ge
 8005ba6:	4691      	movge	r9, r2
 8005ba8:	f1b9 0f00 	cmp.w	r9, #0
 8005bac:	dc34      	bgt.n	8005c18 <_printf_float+0x39c>
 8005bae:	f04f 0800 	mov.w	r8, #0
 8005bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bb6:	f104 0a1a 	add.w	sl, r4, #26
 8005bba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	eba3 0309 	sub.w	r3, r3, r9
 8005bc4:	4543      	cmp	r3, r8
 8005bc6:	f77f af7a 	ble.w	8005abe <_printf_float+0x242>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4652      	mov	r2, sl
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	f43f aeac 	beq.w	8005932 <_printf_float+0xb6>
 8005bda:	f108 0801 	add.w	r8, r8, #1
 8005bde:	e7ec      	b.n	8005bba <_printf_float+0x33e>
 8005be0:	4613      	mov	r3, r2
 8005be2:	4631      	mov	r1, r6
 8005be4:	4642      	mov	r2, r8
 8005be6:	4628      	mov	r0, r5
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	d1c0      	bne.n	8005b70 <_printf_float+0x2f4>
 8005bee:	e6a0      	b.n	8005932 <_printf_float+0xb6>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005bf8:	47b8      	blx	r7
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f43f ae99 	beq.w	8005932 <_printf_float+0xb6>
 8005c00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c02:	f10b 0b01 	add.w	fp, fp, #1
 8005c06:	e7b9      	b.n	8005b7c <_printf_float+0x300>
 8005c08:	4631      	mov	r1, r6
 8005c0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b8      	blx	r7
 8005c12:	3001      	adds	r0, #1
 8005c14:	d1bf      	bne.n	8005b96 <_printf_float+0x31a>
 8005c16:	e68c      	b.n	8005932 <_printf_float+0xb6>
 8005c18:	464b      	mov	r3, r9
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	eb08 020a 	add.w	r2, r8, sl
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	d1c2      	bne.n	8005bae <_printf_float+0x332>
 8005c28:	e683      	b.n	8005932 <_printf_float+0xb6>
 8005c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c2c:	2a01      	cmp	r2, #1
 8005c2e:	dc01      	bgt.n	8005c34 <_printf_float+0x3b8>
 8005c30:	07db      	lsls	r3, r3, #31
 8005c32:	d539      	bpl.n	8005ca8 <_printf_float+0x42c>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4642      	mov	r2, r8
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	f43f ae77 	beq.w	8005932 <_printf_float+0xb6>
 8005c44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b8      	blx	r7
 8005c4e:	3001      	adds	r0, #1
 8005c50:	f43f ae6f 	beq.w	8005932 <_printf_float+0xb6>
 8005c54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005c60:	f7fa ff18 	bl	8000a94 <__aeabi_dcmpeq>
 8005c64:	b9d8      	cbnz	r0, 8005c9e <_printf_float+0x422>
 8005c66:	f109 33ff 	add.w	r3, r9, #4294967295
 8005c6a:	f108 0201 	add.w	r2, r8, #1
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4628      	mov	r0, r5
 8005c72:	47b8      	blx	r7
 8005c74:	3001      	adds	r0, #1
 8005c76:	d10e      	bne.n	8005c96 <_printf_float+0x41a>
 8005c78:	e65b      	b.n	8005932 <_printf_float+0xb6>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	464a      	mov	r2, r9
 8005c7e:	4631      	mov	r1, r6
 8005c80:	4628      	mov	r0, r5
 8005c82:	47b8      	blx	r7
 8005c84:	3001      	adds	r0, #1
 8005c86:	f43f ae54 	beq.w	8005932 <_printf_float+0xb6>
 8005c8a:	f108 0801 	add.w	r8, r8, #1
 8005c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c90:	3b01      	subs	r3, #1
 8005c92:	4543      	cmp	r3, r8
 8005c94:	dcf1      	bgt.n	8005c7a <_printf_float+0x3fe>
 8005c96:	4653      	mov	r3, sl
 8005c98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c9c:	e6de      	b.n	8005a5c <_printf_float+0x1e0>
 8005c9e:	f04f 0800 	mov.w	r8, #0
 8005ca2:	f104 091a 	add.w	r9, r4, #26
 8005ca6:	e7f2      	b.n	8005c8e <_printf_float+0x412>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	4642      	mov	r2, r8
 8005cac:	e7df      	b.n	8005c6e <_printf_float+0x3f2>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	464a      	mov	r2, r9
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f43f ae3a 	beq.w	8005932 <_printf_float+0xb6>
 8005cbe:	f108 0801 	add.w	r8, r8, #1
 8005cc2:	68e3      	ldr	r3, [r4, #12]
 8005cc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cc6:	1a5b      	subs	r3, r3, r1
 8005cc8:	4543      	cmp	r3, r8
 8005cca:	dcf0      	bgt.n	8005cae <_printf_float+0x432>
 8005ccc:	e6fb      	b.n	8005ac6 <_printf_float+0x24a>
 8005cce:	f04f 0800 	mov.w	r8, #0
 8005cd2:	f104 0919 	add.w	r9, r4, #25
 8005cd6:	e7f4      	b.n	8005cc2 <_printf_float+0x446>

08005cd8 <_printf_common>:
 8005cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cdc:	4616      	mov	r6, r2
 8005cde:	4699      	mov	r9, r3
 8005ce0:	688a      	ldr	r2, [r1, #8]
 8005ce2:	690b      	ldr	r3, [r1, #16]
 8005ce4:	4607      	mov	r7, r0
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	bfb8      	it	lt
 8005cea:	4613      	movlt	r3, r2
 8005cec:	6033      	str	r3, [r6, #0]
 8005cee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cf8:	b10a      	cbz	r2, 8005cfe <_printf_common+0x26>
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	6033      	str	r3, [r6, #0]
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	0699      	lsls	r1, r3, #26
 8005d02:	bf42      	ittt	mi
 8005d04:	6833      	ldrmi	r3, [r6, #0]
 8005d06:	3302      	addmi	r3, #2
 8005d08:	6033      	strmi	r3, [r6, #0]
 8005d0a:	6825      	ldr	r5, [r4, #0]
 8005d0c:	f015 0506 	ands.w	r5, r5, #6
 8005d10:	d106      	bne.n	8005d20 <_printf_common+0x48>
 8005d12:	f104 0a19 	add.w	sl, r4, #25
 8005d16:	68e3      	ldr	r3, [r4, #12]
 8005d18:	6832      	ldr	r2, [r6, #0]
 8005d1a:	1a9b      	subs	r3, r3, r2
 8005d1c:	42ab      	cmp	r3, r5
 8005d1e:	dc2b      	bgt.n	8005d78 <_printf_common+0xa0>
 8005d20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d24:	1e13      	subs	r3, r2, #0
 8005d26:	6822      	ldr	r2, [r4, #0]
 8005d28:	bf18      	it	ne
 8005d2a:	2301      	movne	r3, #1
 8005d2c:	0692      	lsls	r2, r2, #26
 8005d2e:	d430      	bmi.n	8005d92 <_printf_common+0xba>
 8005d30:	4649      	mov	r1, r9
 8005d32:	4638      	mov	r0, r7
 8005d34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d38:	47c0      	blx	r8
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d023      	beq.n	8005d86 <_printf_common+0xae>
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	6922      	ldr	r2, [r4, #16]
 8005d42:	f003 0306 	and.w	r3, r3, #6
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	bf14      	ite	ne
 8005d4a:	2500      	movne	r5, #0
 8005d4c:	6833      	ldreq	r3, [r6, #0]
 8005d4e:	f04f 0600 	mov.w	r6, #0
 8005d52:	bf08      	it	eq
 8005d54:	68e5      	ldreq	r5, [r4, #12]
 8005d56:	f104 041a 	add.w	r4, r4, #26
 8005d5a:	bf08      	it	eq
 8005d5c:	1aed      	subeq	r5, r5, r3
 8005d5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d62:	bf08      	it	eq
 8005d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	bfc4      	itt	gt
 8005d6c:	1a9b      	subgt	r3, r3, r2
 8005d6e:	18ed      	addgt	r5, r5, r3
 8005d70:	42b5      	cmp	r5, r6
 8005d72:	d11a      	bne.n	8005daa <_printf_common+0xd2>
 8005d74:	2000      	movs	r0, #0
 8005d76:	e008      	b.n	8005d8a <_printf_common+0xb2>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	4652      	mov	r2, sl
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	4638      	mov	r0, r7
 8005d80:	47c0      	blx	r8
 8005d82:	3001      	adds	r0, #1
 8005d84:	d103      	bne.n	8005d8e <_printf_common+0xb6>
 8005d86:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8e:	3501      	adds	r5, #1
 8005d90:	e7c1      	b.n	8005d16 <_printf_common+0x3e>
 8005d92:	2030      	movs	r0, #48	; 0x30
 8005d94:	18e1      	adds	r1, r4, r3
 8005d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005da0:	4422      	add	r2, r4
 8005da2:	3302      	adds	r3, #2
 8005da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005da8:	e7c2      	b.n	8005d30 <_printf_common+0x58>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4622      	mov	r2, r4
 8005dae:	4649      	mov	r1, r9
 8005db0:	4638      	mov	r0, r7
 8005db2:	47c0      	blx	r8
 8005db4:	3001      	adds	r0, #1
 8005db6:	d0e6      	beq.n	8005d86 <_printf_common+0xae>
 8005db8:	3601      	adds	r6, #1
 8005dba:	e7d9      	b.n	8005d70 <_printf_common+0x98>

08005dbc <_printf_i>:
 8005dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc0:	7e0f      	ldrb	r7, [r1, #24]
 8005dc2:	4691      	mov	r9, r2
 8005dc4:	2f78      	cmp	r7, #120	; 0x78
 8005dc6:	4680      	mov	r8, r0
 8005dc8:	460c      	mov	r4, r1
 8005dca:	469a      	mov	sl, r3
 8005dcc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dd2:	d807      	bhi.n	8005de4 <_printf_i+0x28>
 8005dd4:	2f62      	cmp	r7, #98	; 0x62
 8005dd6:	d80a      	bhi.n	8005dee <_printf_i+0x32>
 8005dd8:	2f00      	cmp	r7, #0
 8005dda:	f000 80d5 	beq.w	8005f88 <_printf_i+0x1cc>
 8005dde:	2f58      	cmp	r7, #88	; 0x58
 8005de0:	f000 80c1 	beq.w	8005f66 <_printf_i+0x1aa>
 8005de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dec:	e03a      	b.n	8005e64 <_printf_i+0xa8>
 8005dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005df2:	2b15      	cmp	r3, #21
 8005df4:	d8f6      	bhi.n	8005de4 <_printf_i+0x28>
 8005df6:	a101      	add	r1, pc, #4	; (adr r1, 8005dfc <_printf_i+0x40>)
 8005df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dfc:	08005e55 	.word	0x08005e55
 8005e00:	08005e69 	.word	0x08005e69
 8005e04:	08005de5 	.word	0x08005de5
 8005e08:	08005de5 	.word	0x08005de5
 8005e0c:	08005de5 	.word	0x08005de5
 8005e10:	08005de5 	.word	0x08005de5
 8005e14:	08005e69 	.word	0x08005e69
 8005e18:	08005de5 	.word	0x08005de5
 8005e1c:	08005de5 	.word	0x08005de5
 8005e20:	08005de5 	.word	0x08005de5
 8005e24:	08005de5 	.word	0x08005de5
 8005e28:	08005f6f 	.word	0x08005f6f
 8005e2c:	08005e95 	.word	0x08005e95
 8005e30:	08005f29 	.word	0x08005f29
 8005e34:	08005de5 	.word	0x08005de5
 8005e38:	08005de5 	.word	0x08005de5
 8005e3c:	08005f91 	.word	0x08005f91
 8005e40:	08005de5 	.word	0x08005de5
 8005e44:	08005e95 	.word	0x08005e95
 8005e48:	08005de5 	.word	0x08005de5
 8005e4c:	08005de5 	.word	0x08005de5
 8005e50:	08005f31 	.word	0x08005f31
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	1d1a      	adds	r2, r3, #4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	602a      	str	r2, [r5, #0]
 8005e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e64:	2301      	movs	r3, #1
 8005e66:	e0a0      	b.n	8005faa <_printf_i+0x1ee>
 8005e68:	6820      	ldr	r0, [r4, #0]
 8005e6a:	682b      	ldr	r3, [r5, #0]
 8005e6c:	0607      	lsls	r7, r0, #24
 8005e6e:	f103 0104 	add.w	r1, r3, #4
 8005e72:	6029      	str	r1, [r5, #0]
 8005e74:	d501      	bpl.n	8005e7a <_printf_i+0xbe>
 8005e76:	681e      	ldr	r6, [r3, #0]
 8005e78:	e003      	b.n	8005e82 <_printf_i+0xc6>
 8005e7a:	0646      	lsls	r6, r0, #25
 8005e7c:	d5fb      	bpl.n	8005e76 <_printf_i+0xba>
 8005e7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	da03      	bge.n	8005e8e <_printf_i+0xd2>
 8005e86:	232d      	movs	r3, #45	; 0x2d
 8005e88:	4276      	negs	r6, r6
 8005e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e8e:	230a      	movs	r3, #10
 8005e90:	4859      	ldr	r0, [pc, #356]	; (8005ff8 <_printf_i+0x23c>)
 8005e92:	e012      	b.n	8005eba <_printf_i+0xfe>
 8005e94:	682b      	ldr	r3, [r5, #0]
 8005e96:	6820      	ldr	r0, [r4, #0]
 8005e98:	1d19      	adds	r1, r3, #4
 8005e9a:	6029      	str	r1, [r5, #0]
 8005e9c:	0605      	lsls	r5, r0, #24
 8005e9e:	d501      	bpl.n	8005ea4 <_printf_i+0xe8>
 8005ea0:	681e      	ldr	r6, [r3, #0]
 8005ea2:	e002      	b.n	8005eaa <_printf_i+0xee>
 8005ea4:	0641      	lsls	r1, r0, #25
 8005ea6:	d5fb      	bpl.n	8005ea0 <_printf_i+0xe4>
 8005ea8:	881e      	ldrh	r6, [r3, #0]
 8005eaa:	2f6f      	cmp	r7, #111	; 0x6f
 8005eac:	bf0c      	ite	eq
 8005eae:	2308      	moveq	r3, #8
 8005eb0:	230a      	movne	r3, #10
 8005eb2:	4851      	ldr	r0, [pc, #324]	; (8005ff8 <_printf_i+0x23c>)
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eba:	6865      	ldr	r5, [r4, #4]
 8005ebc:	2d00      	cmp	r5, #0
 8005ebe:	bfa8      	it	ge
 8005ec0:	6821      	ldrge	r1, [r4, #0]
 8005ec2:	60a5      	str	r5, [r4, #8]
 8005ec4:	bfa4      	itt	ge
 8005ec6:	f021 0104 	bicge.w	r1, r1, #4
 8005eca:	6021      	strge	r1, [r4, #0]
 8005ecc:	b90e      	cbnz	r6, 8005ed2 <_printf_i+0x116>
 8005ece:	2d00      	cmp	r5, #0
 8005ed0:	d04b      	beq.n	8005f6a <_printf_i+0x1ae>
 8005ed2:	4615      	mov	r5, r2
 8005ed4:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ed8:	fb03 6711 	mls	r7, r3, r1, r6
 8005edc:	5dc7      	ldrb	r7, [r0, r7]
 8005ede:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ee2:	4637      	mov	r7, r6
 8005ee4:	42bb      	cmp	r3, r7
 8005ee6:	460e      	mov	r6, r1
 8005ee8:	d9f4      	bls.n	8005ed4 <_printf_i+0x118>
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d10b      	bne.n	8005f06 <_printf_i+0x14a>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	07de      	lsls	r6, r3, #31
 8005ef2:	d508      	bpl.n	8005f06 <_printf_i+0x14a>
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	6861      	ldr	r1, [r4, #4]
 8005ef8:	4299      	cmp	r1, r3
 8005efa:	bfde      	ittt	le
 8005efc:	2330      	movle	r3, #48	; 0x30
 8005efe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f06:	1b52      	subs	r2, r2, r5
 8005f08:	6122      	str	r2, [r4, #16]
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4640      	mov	r0, r8
 8005f10:	f8cd a000 	str.w	sl, [sp]
 8005f14:	aa03      	add	r2, sp, #12
 8005f16:	f7ff fedf 	bl	8005cd8 <_printf_common>
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	d14a      	bne.n	8005fb4 <_printf_i+0x1f8>
 8005f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f22:	b004      	add	sp, #16
 8005f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	f043 0320 	orr.w	r3, r3, #32
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	2778      	movs	r7, #120	; 0x78
 8005f32:	4832      	ldr	r0, [pc, #200]	; (8005ffc <_printf_i+0x240>)
 8005f34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	6829      	ldr	r1, [r5, #0]
 8005f3c:	061f      	lsls	r7, r3, #24
 8005f3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f42:	d402      	bmi.n	8005f4a <_printf_i+0x18e>
 8005f44:	065f      	lsls	r7, r3, #25
 8005f46:	bf48      	it	mi
 8005f48:	b2b6      	uxthmi	r6, r6
 8005f4a:	07df      	lsls	r7, r3, #31
 8005f4c:	bf48      	it	mi
 8005f4e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f52:	6029      	str	r1, [r5, #0]
 8005f54:	bf48      	it	mi
 8005f56:	6023      	strmi	r3, [r4, #0]
 8005f58:	b91e      	cbnz	r6, 8005f62 <_printf_i+0x1a6>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	f023 0320 	bic.w	r3, r3, #32
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	2310      	movs	r3, #16
 8005f64:	e7a6      	b.n	8005eb4 <_printf_i+0xf8>
 8005f66:	4824      	ldr	r0, [pc, #144]	; (8005ff8 <_printf_i+0x23c>)
 8005f68:	e7e4      	b.n	8005f34 <_printf_i+0x178>
 8005f6a:	4615      	mov	r5, r2
 8005f6c:	e7bd      	b.n	8005eea <_printf_i+0x12e>
 8005f6e:	682b      	ldr	r3, [r5, #0]
 8005f70:	6826      	ldr	r6, [r4, #0]
 8005f72:	1d18      	adds	r0, r3, #4
 8005f74:	6961      	ldr	r1, [r4, #20]
 8005f76:	6028      	str	r0, [r5, #0]
 8005f78:	0635      	lsls	r5, r6, #24
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	d501      	bpl.n	8005f82 <_printf_i+0x1c6>
 8005f7e:	6019      	str	r1, [r3, #0]
 8005f80:	e002      	b.n	8005f88 <_printf_i+0x1cc>
 8005f82:	0670      	lsls	r0, r6, #25
 8005f84:	d5fb      	bpl.n	8005f7e <_printf_i+0x1c2>
 8005f86:	8019      	strh	r1, [r3, #0]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4615      	mov	r5, r2
 8005f8c:	6123      	str	r3, [r4, #16]
 8005f8e:	e7bc      	b.n	8005f0a <_printf_i+0x14e>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	2100      	movs	r1, #0
 8005f94:	1d1a      	adds	r2, r3, #4
 8005f96:	602a      	str	r2, [r5, #0]
 8005f98:	681d      	ldr	r5, [r3, #0]
 8005f9a:	6862      	ldr	r2, [r4, #4]
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	f000 fc0e 	bl	80067be <memchr>
 8005fa2:	b108      	cbz	r0, 8005fa8 <_printf_i+0x1ec>
 8005fa4:	1b40      	subs	r0, r0, r5
 8005fa6:	6060      	str	r0, [r4, #4]
 8005fa8:	6863      	ldr	r3, [r4, #4]
 8005faa:	6123      	str	r3, [r4, #16]
 8005fac:	2300      	movs	r3, #0
 8005fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fb2:	e7aa      	b.n	8005f0a <_printf_i+0x14e>
 8005fb4:	462a      	mov	r2, r5
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4640      	mov	r0, r8
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	47d0      	blx	sl
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d0ad      	beq.n	8005f1e <_printf_i+0x162>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	079b      	lsls	r3, r3, #30
 8005fc6:	d413      	bmi.n	8005ff0 <_printf_i+0x234>
 8005fc8:	68e0      	ldr	r0, [r4, #12]
 8005fca:	9b03      	ldr	r3, [sp, #12]
 8005fcc:	4298      	cmp	r0, r3
 8005fce:	bfb8      	it	lt
 8005fd0:	4618      	movlt	r0, r3
 8005fd2:	e7a6      	b.n	8005f22 <_printf_i+0x166>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	4632      	mov	r2, r6
 8005fd8:	4649      	mov	r1, r9
 8005fda:	4640      	mov	r0, r8
 8005fdc:	47d0      	blx	sl
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d09d      	beq.n	8005f1e <_printf_i+0x162>
 8005fe2:	3501      	adds	r5, #1
 8005fe4:	68e3      	ldr	r3, [r4, #12]
 8005fe6:	9903      	ldr	r1, [sp, #12]
 8005fe8:	1a5b      	subs	r3, r3, r1
 8005fea:	42ab      	cmp	r3, r5
 8005fec:	dcf2      	bgt.n	8005fd4 <_printf_i+0x218>
 8005fee:	e7eb      	b.n	8005fc8 <_printf_i+0x20c>
 8005ff0:	2500      	movs	r5, #0
 8005ff2:	f104 0619 	add.w	r6, r4, #25
 8005ff6:	e7f5      	b.n	8005fe4 <_printf_i+0x228>
 8005ff8:	0800a7ba 	.word	0x0800a7ba
 8005ffc:	0800a7cb 	.word	0x0800a7cb

08006000 <_scanf_float>:
 8006000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	b087      	sub	sp, #28
 8006006:	9303      	str	r3, [sp, #12]
 8006008:	688b      	ldr	r3, [r1, #8]
 800600a:	4617      	mov	r7, r2
 800600c:	1e5a      	subs	r2, r3, #1
 800600e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006012:	bf85      	ittet	hi
 8006014:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006018:	195b      	addhi	r3, r3, r5
 800601a:	2300      	movls	r3, #0
 800601c:	9302      	strhi	r3, [sp, #8]
 800601e:	bf88      	it	hi
 8006020:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006024:	468b      	mov	fp, r1
 8006026:	f04f 0500 	mov.w	r5, #0
 800602a:	bf8c      	ite	hi
 800602c:	608b      	strhi	r3, [r1, #8]
 800602e:	9302      	strls	r3, [sp, #8]
 8006030:	680b      	ldr	r3, [r1, #0]
 8006032:	4680      	mov	r8, r0
 8006034:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006038:	f84b 3b1c 	str.w	r3, [fp], #28
 800603c:	460c      	mov	r4, r1
 800603e:	465e      	mov	r6, fp
 8006040:	46aa      	mov	sl, r5
 8006042:	46a9      	mov	r9, r5
 8006044:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006048:	9501      	str	r5, [sp, #4]
 800604a:	68a2      	ldr	r2, [r4, #8]
 800604c:	b152      	cbz	r2, 8006064 <_scanf_float+0x64>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b4e      	cmp	r3, #78	; 0x4e
 8006054:	d864      	bhi.n	8006120 <_scanf_float+0x120>
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d83c      	bhi.n	80060d4 <_scanf_float+0xd4>
 800605a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800605e:	b2c8      	uxtb	r0, r1
 8006060:	280e      	cmp	r0, #14
 8006062:	d93a      	bls.n	80060da <_scanf_float+0xda>
 8006064:	f1b9 0f00 	cmp.w	r9, #0
 8006068:	d003      	beq.n	8006072 <_scanf_float+0x72>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006076:	f1ba 0f01 	cmp.w	sl, #1
 800607a:	f200 8113 	bhi.w	80062a4 <_scanf_float+0x2a4>
 800607e:	455e      	cmp	r6, fp
 8006080:	f200 8105 	bhi.w	800628e <_scanf_float+0x28e>
 8006084:	2501      	movs	r5, #1
 8006086:	4628      	mov	r0, r5
 8006088:	b007      	add	sp, #28
 800608a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006092:	2a0d      	cmp	r2, #13
 8006094:	d8e6      	bhi.n	8006064 <_scanf_float+0x64>
 8006096:	a101      	add	r1, pc, #4	; (adr r1, 800609c <_scanf_float+0x9c>)
 8006098:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800609c:	080061db 	.word	0x080061db
 80060a0:	08006065 	.word	0x08006065
 80060a4:	08006065 	.word	0x08006065
 80060a8:	08006065 	.word	0x08006065
 80060ac:	0800623b 	.word	0x0800623b
 80060b0:	08006213 	.word	0x08006213
 80060b4:	08006065 	.word	0x08006065
 80060b8:	08006065 	.word	0x08006065
 80060bc:	080061e9 	.word	0x080061e9
 80060c0:	08006065 	.word	0x08006065
 80060c4:	08006065 	.word	0x08006065
 80060c8:	08006065 	.word	0x08006065
 80060cc:	08006065 	.word	0x08006065
 80060d0:	080061a1 	.word	0x080061a1
 80060d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80060d8:	e7db      	b.n	8006092 <_scanf_float+0x92>
 80060da:	290e      	cmp	r1, #14
 80060dc:	d8c2      	bhi.n	8006064 <_scanf_float+0x64>
 80060de:	a001      	add	r0, pc, #4	; (adr r0, 80060e4 <_scanf_float+0xe4>)
 80060e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80060e4:	08006193 	.word	0x08006193
 80060e8:	08006065 	.word	0x08006065
 80060ec:	08006193 	.word	0x08006193
 80060f0:	08006227 	.word	0x08006227
 80060f4:	08006065 	.word	0x08006065
 80060f8:	08006141 	.word	0x08006141
 80060fc:	0800617d 	.word	0x0800617d
 8006100:	0800617d 	.word	0x0800617d
 8006104:	0800617d 	.word	0x0800617d
 8006108:	0800617d 	.word	0x0800617d
 800610c:	0800617d 	.word	0x0800617d
 8006110:	0800617d 	.word	0x0800617d
 8006114:	0800617d 	.word	0x0800617d
 8006118:	0800617d 	.word	0x0800617d
 800611c:	0800617d 	.word	0x0800617d
 8006120:	2b6e      	cmp	r3, #110	; 0x6e
 8006122:	d809      	bhi.n	8006138 <_scanf_float+0x138>
 8006124:	2b60      	cmp	r3, #96	; 0x60
 8006126:	d8b2      	bhi.n	800608e <_scanf_float+0x8e>
 8006128:	2b54      	cmp	r3, #84	; 0x54
 800612a:	d077      	beq.n	800621c <_scanf_float+0x21c>
 800612c:	2b59      	cmp	r3, #89	; 0x59
 800612e:	d199      	bne.n	8006064 <_scanf_float+0x64>
 8006130:	2d07      	cmp	r5, #7
 8006132:	d197      	bne.n	8006064 <_scanf_float+0x64>
 8006134:	2508      	movs	r5, #8
 8006136:	e029      	b.n	800618c <_scanf_float+0x18c>
 8006138:	2b74      	cmp	r3, #116	; 0x74
 800613a:	d06f      	beq.n	800621c <_scanf_float+0x21c>
 800613c:	2b79      	cmp	r3, #121	; 0x79
 800613e:	e7f6      	b.n	800612e <_scanf_float+0x12e>
 8006140:	6821      	ldr	r1, [r4, #0]
 8006142:	05c8      	lsls	r0, r1, #23
 8006144:	d51a      	bpl.n	800617c <_scanf_float+0x17c>
 8006146:	9b02      	ldr	r3, [sp, #8]
 8006148:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800614c:	6021      	str	r1, [r4, #0]
 800614e:	f109 0901 	add.w	r9, r9, #1
 8006152:	b11b      	cbz	r3, 800615c <_scanf_float+0x15c>
 8006154:	3b01      	subs	r3, #1
 8006156:	3201      	adds	r2, #1
 8006158:	9302      	str	r3, [sp, #8]
 800615a:	60a2      	str	r2, [r4, #8]
 800615c:	68a3      	ldr	r3, [r4, #8]
 800615e:	3b01      	subs	r3, #1
 8006160:	60a3      	str	r3, [r4, #8]
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	3301      	adds	r3, #1
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3b01      	subs	r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	607b      	str	r3, [r7, #4]
 8006170:	f340 8084 	ble.w	800627c <_scanf_float+0x27c>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	3301      	adds	r3, #1
 8006178:	603b      	str	r3, [r7, #0]
 800617a:	e766      	b.n	800604a <_scanf_float+0x4a>
 800617c:	eb1a 0f05 	cmn.w	sl, r5
 8006180:	f47f af70 	bne.w	8006064 <_scanf_float+0x64>
 8006184:	6822      	ldr	r2, [r4, #0]
 8006186:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800618a:	6022      	str	r2, [r4, #0]
 800618c:	f806 3b01 	strb.w	r3, [r6], #1
 8006190:	e7e4      	b.n	800615c <_scanf_float+0x15c>
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	0610      	lsls	r0, r2, #24
 8006196:	f57f af65 	bpl.w	8006064 <_scanf_float+0x64>
 800619a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800619e:	e7f4      	b.n	800618a <_scanf_float+0x18a>
 80061a0:	f1ba 0f00 	cmp.w	sl, #0
 80061a4:	d10e      	bne.n	80061c4 <_scanf_float+0x1c4>
 80061a6:	f1b9 0f00 	cmp.w	r9, #0
 80061aa:	d10e      	bne.n	80061ca <_scanf_float+0x1ca>
 80061ac:	6822      	ldr	r2, [r4, #0]
 80061ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80061b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80061b6:	d108      	bne.n	80061ca <_scanf_float+0x1ca>
 80061b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061bc:	f04f 0a01 	mov.w	sl, #1
 80061c0:	6022      	str	r2, [r4, #0]
 80061c2:	e7e3      	b.n	800618c <_scanf_float+0x18c>
 80061c4:	f1ba 0f02 	cmp.w	sl, #2
 80061c8:	d055      	beq.n	8006276 <_scanf_float+0x276>
 80061ca:	2d01      	cmp	r5, #1
 80061cc:	d002      	beq.n	80061d4 <_scanf_float+0x1d4>
 80061ce:	2d04      	cmp	r5, #4
 80061d0:	f47f af48 	bne.w	8006064 <_scanf_float+0x64>
 80061d4:	3501      	adds	r5, #1
 80061d6:	b2ed      	uxtb	r5, r5
 80061d8:	e7d8      	b.n	800618c <_scanf_float+0x18c>
 80061da:	f1ba 0f01 	cmp.w	sl, #1
 80061de:	f47f af41 	bne.w	8006064 <_scanf_float+0x64>
 80061e2:	f04f 0a02 	mov.w	sl, #2
 80061e6:	e7d1      	b.n	800618c <_scanf_float+0x18c>
 80061e8:	b97d      	cbnz	r5, 800620a <_scanf_float+0x20a>
 80061ea:	f1b9 0f00 	cmp.w	r9, #0
 80061ee:	f47f af3c 	bne.w	800606a <_scanf_float+0x6a>
 80061f2:	6822      	ldr	r2, [r4, #0]
 80061f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80061f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80061fc:	f47f af39 	bne.w	8006072 <_scanf_float+0x72>
 8006200:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006204:	2501      	movs	r5, #1
 8006206:	6022      	str	r2, [r4, #0]
 8006208:	e7c0      	b.n	800618c <_scanf_float+0x18c>
 800620a:	2d03      	cmp	r5, #3
 800620c:	d0e2      	beq.n	80061d4 <_scanf_float+0x1d4>
 800620e:	2d05      	cmp	r5, #5
 8006210:	e7de      	b.n	80061d0 <_scanf_float+0x1d0>
 8006212:	2d02      	cmp	r5, #2
 8006214:	f47f af26 	bne.w	8006064 <_scanf_float+0x64>
 8006218:	2503      	movs	r5, #3
 800621a:	e7b7      	b.n	800618c <_scanf_float+0x18c>
 800621c:	2d06      	cmp	r5, #6
 800621e:	f47f af21 	bne.w	8006064 <_scanf_float+0x64>
 8006222:	2507      	movs	r5, #7
 8006224:	e7b2      	b.n	800618c <_scanf_float+0x18c>
 8006226:	6822      	ldr	r2, [r4, #0]
 8006228:	0591      	lsls	r1, r2, #22
 800622a:	f57f af1b 	bpl.w	8006064 <_scanf_float+0x64>
 800622e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006232:	6022      	str	r2, [r4, #0]
 8006234:	f8cd 9004 	str.w	r9, [sp, #4]
 8006238:	e7a8      	b.n	800618c <_scanf_float+0x18c>
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006240:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006244:	d006      	beq.n	8006254 <_scanf_float+0x254>
 8006246:	0550      	lsls	r0, r2, #21
 8006248:	f57f af0c 	bpl.w	8006064 <_scanf_float+0x64>
 800624c:	f1b9 0f00 	cmp.w	r9, #0
 8006250:	f43f af0f 	beq.w	8006072 <_scanf_float+0x72>
 8006254:	0591      	lsls	r1, r2, #22
 8006256:	bf58      	it	pl
 8006258:	9901      	ldrpl	r1, [sp, #4]
 800625a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800625e:	bf58      	it	pl
 8006260:	eba9 0101 	subpl.w	r1, r9, r1
 8006264:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006268:	f04f 0900 	mov.w	r9, #0
 800626c:	bf58      	it	pl
 800626e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006272:	6022      	str	r2, [r4, #0]
 8006274:	e78a      	b.n	800618c <_scanf_float+0x18c>
 8006276:	f04f 0a03 	mov.w	sl, #3
 800627a:	e787      	b.n	800618c <_scanf_float+0x18c>
 800627c:	4639      	mov	r1, r7
 800627e:	4640      	mov	r0, r8
 8006280:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006284:	4798      	blx	r3
 8006286:	2800      	cmp	r0, #0
 8006288:	f43f aedf 	beq.w	800604a <_scanf_float+0x4a>
 800628c:	e6ea      	b.n	8006064 <_scanf_float+0x64>
 800628e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006292:	463a      	mov	r2, r7
 8006294:	4640      	mov	r0, r8
 8006296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800629a:	4798      	blx	r3
 800629c:	6923      	ldr	r3, [r4, #16]
 800629e:	3b01      	subs	r3, #1
 80062a0:	6123      	str	r3, [r4, #16]
 80062a2:	e6ec      	b.n	800607e <_scanf_float+0x7e>
 80062a4:	1e6b      	subs	r3, r5, #1
 80062a6:	2b06      	cmp	r3, #6
 80062a8:	d825      	bhi.n	80062f6 <_scanf_float+0x2f6>
 80062aa:	2d02      	cmp	r5, #2
 80062ac:	d836      	bhi.n	800631c <_scanf_float+0x31c>
 80062ae:	455e      	cmp	r6, fp
 80062b0:	f67f aee8 	bls.w	8006084 <_scanf_float+0x84>
 80062b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062b8:	463a      	mov	r2, r7
 80062ba:	4640      	mov	r0, r8
 80062bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062c0:	4798      	blx	r3
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	6123      	str	r3, [r4, #16]
 80062c8:	e7f1      	b.n	80062ae <_scanf_float+0x2ae>
 80062ca:	9802      	ldr	r0, [sp, #8]
 80062cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80062d4:	463a      	mov	r2, r7
 80062d6:	9002      	str	r0, [sp, #8]
 80062d8:	4640      	mov	r0, r8
 80062da:	4798      	blx	r3
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	3b01      	subs	r3, #1
 80062e0:	6123      	str	r3, [r4, #16]
 80062e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062e6:	fa5f fa8a 	uxtb.w	sl, sl
 80062ea:	f1ba 0f02 	cmp.w	sl, #2
 80062ee:	d1ec      	bne.n	80062ca <_scanf_float+0x2ca>
 80062f0:	3d03      	subs	r5, #3
 80062f2:	b2ed      	uxtb	r5, r5
 80062f4:	1b76      	subs	r6, r6, r5
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	05da      	lsls	r2, r3, #23
 80062fa:	d52f      	bpl.n	800635c <_scanf_float+0x35c>
 80062fc:	055b      	lsls	r3, r3, #21
 80062fe:	d510      	bpl.n	8006322 <_scanf_float+0x322>
 8006300:	455e      	cmp	r6, fp
 8006302:	f67f aebf 	bls.w	8006084 <_scanf_float+0x84>
 8006306:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800630a:	463a      	mov	r2, r7
 800630c:	4640      	mov	r0, r8
 800630e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006312:	4798      	blx	r3
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	3b01      	subs	r3, #1
 8006318:	6123      	str	r3, [r4, #16]
 800631a:	e7f1      	b.n	8006300 <_scanf_float+0x300>
 800631c:	46aa      	mov	sl, r5
 800631e:	9602      	str	r6, [sp, #8]
 8006320:	e7df      	b.n	80062e2 <_scanf_float+0x2e2>
 8006322:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006326:	6923      	ldr	r3, [r4, #16]
 8006328:	2965      	cmp	r1, #101	; 0x65
 800632a:	f103 33ff 	add.w	r3, r3, #4294967295
 800632e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006332:	6123      	str	r3, [r4, #16]
 8006334:	d00c      	beq.n	8006350 <_scanf_float+0x350>
 8006336:	2945      	cmp	r1, #69	; 0x45
 8006338:	d00a      	beq.n	8006350 <_scanf_float+0x350>
 800633a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800633e:	463a      	mov	r2, r7
 8006340:	4640      	mov	r0, r8
 8006342:	4798      	blx	r3
 8006344:	6923      	ldr	r3, [r4, #16]
 8006346:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800634a:	3b01      	subs	r3, #1
 800634c:	1eb5      	subs	r5, r6, #2
 800634e:	6123      	str	r3, [r4, #16]
 8006350:	463a      	mov	r2, r7
 8006352:	4640      	mov	r0, r8
 8006354:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006358:	4798      	blx	r3
 800635a:	462e      	mov	r6, r5
 800635c:	6825      	ldr	r5, [r4, #0]
 800635e:	f015 0510 	ands.w	r5, r5, #16
 8006362:	d155      	bne.n	8006410 <_scanf_float+0x410>
 8006364:	7035      	strb	r5, [r6, #0]
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800636c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006370:	d11d      	bne.n	80063ae <_scanf_float+0x3ae>
 8006372:	9b01      	ldr	r3, [sp, #4]
 8006374:	454b      	cmp	r3, r9
 8006376:	eba3 0209 	sub.w	r2, r3, r9
 800637a:	d125      	bne.n	80063c8 <_scanf_float+0x3c8>
 800637c:	2200      	movs	r2, #0
 800637e:	4659      	mov	r1, fp
 8006380:	4640      	mov	r0, r8
 8006382:	f002 fc4d 	bl	8008c20 <_strtod_r>
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	f8d4 c000 	ldr.w	ip, [r4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f01c 0f02 	tst.w	ip, #2
 8006392:	4606      	mov	r6, r0
 8006394:	460f      	mov	r7, r1
 8006396:	f103 0204 	add.w	r2, r3, #4
 800639a:	d020      	beq.n	80063de <_scanf_float+0x3de>
 800639c:	9903      	ldr	r1, [sp, #12]
 800639e:	600a      	str	r2, [r1, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	e9c3 6700 	strd	r6, r7, [r3]
 80063a6:	68e3      	ldr	r3, [r4, #12]
 80063a8:	3301      	adds	r3, #1
 80063aa:	60e3      	str	r3, [r4, #12]
 80063ac:	e66b      	b.n	8006086 <_scanf_float+0x86>
 80063ae:	9b04      	ldr	r3, [sp, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0e3      	beq.n	800637c <_scanf_float+0x37c>
 80063b4:	9905      	ldr	r1, [sp, #20]
 80063b6:	230a      	movs	r3, #10
 80063b8:	462a      	mov	r2, r5
 80063ba:	4640      	mov	r0, r8
 80063bc:	3101      	adds	r1, #1
 80063be:	f002 fcb3 	bl	8008d28 <_strtol_r>
 80063c2:	9b04      	ldr	r3, [sp, #16]
 80063c4:	9e05      	ldr	r6, [sp, #20]
 80063c6:	1ac2      	subs	r2, r0, r3
 80063c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80063cc:	429e      	cmp	r6, r3
 80063ce:	bf28      	it	cs
 80063d0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80063d4:	4630      	mov	r0, r6
 80063d6:	490f      	ldr	r1, [pc, #60]	; (8006414 <_scanf_float+0x414>)
 80063d8:	f000 f8e2 	bl	80065a0 <siprintf>
 80063dc:	e7ce      	b.n	800637c <_scanf_float+0x37c>
 80063de:	f01c 0f04 	tst.w	ip, #4
 80063e2:	d1db      	bne.n	800639c <_scanf_float+0x39c>
 80063e4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80063e8:	f8cc 2000 	str.w	r2, [ip]
 80063ec:	f8d3 8000 	ldr.w	r8, [r3]
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	f7fa fb80 	bl	8000af8 <__aeabi_dcmpun>
 80063f8:	b128      	cbz	r0, 8006406 <_scanf_float+0x406>
 80063fa:	4807      	ldr	r0, [pc, #28]	; (8006418 <_scanf_float+0x418>)
 80063fc:	f000 f9ee 	bl	80067dc <nanf>
 8006400:	f8c8 0000 	str.w	r0, [r8]
 8006404:	e7cf      	b.n	80063a6 <_scanf_float+0x3a6>
 8006406:	4630      	mov	r0, r6
 8006408:	4639      	mov	r1, r7
 800640a:	f7fa fbd3 	bl	8000bb4 <__aeabi_d2f>
 800640e:	e7f7      	b.n	8006400 <_scanf_float+0x400>
 8006410:	2500      	movs	r5, #0
 8006412:	e638      	b.n	8006086 <_scanf_float+0x86>
 8006414:	0800a7dc 	.word	0x0800a7dc
 8006418:	0800ab88 	.word	0x0800ab88

0800641c <std>:
 800641c:	2300      	movs	r3, #0
 800641e:	b510      	push	{r4, lr}
 8006420:	4604      	mov	r4, r0
 8006422:	e9c0 3300 	strd	r3, r3, [r0]
 8006426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800642a:	6083      	str	r3, [r0, #8]
 800642c:	8181      	strh	r1, [r0, #12]
 800642e:	6643      	str	r3, [r0, #100]	; 0x64
 8006430:	81c2      	strh	r2, [r0, #14]
 8006432:	6183      	str	r3, [r0, #24]
 8006434:	4619      	mov	r1, r3
 8006436:	2208      	movs	r2, #8
 8006438:	305c      	adds	r0, #92	; 0x5c
 800643a:	f000 f940 	bl	80066be <memset>
 800643e:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <std+0x58>)
 8006440:	6224      	str	r4, [r4, #32]
 8006442:	6263      	str	r3, [r4, #36]	; 0x24
 8006444:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <std+0x5c>)
 8006446:	62a3      	str	r3, [r4, #40]	; 0x28
 8006448:	4b0c      	ldr	r3, [pc, #48]	; (800647c <std+0x60>)
 800644a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800644c:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <std+0x64>)
 800644e:	6323      	str	r3, [r4, #48]	; 0x30
 8006450:	4b0c      	ldr	r3, [pc, #48]	; (8006484 <std+0x68>)
 8006452:	429c      	cmp	r4, r3
 8006454:	d006      	beq.n	8006464 <std+0x48>
 8006456:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800645a:	4294      	cmp	r4, r2
 800645c:	d002      	beq.n	8006464 <std+0x48>
 800645e:	33d0      	adds	r3, #208	; 0xd0
 8006460:	429c      	cmp	r4, r3
 8006462:	d105      	bne.n	8006470 <std+0x54>
 8006464:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800646c:	f000 b9a4 	b.w	80067b8 <__retarget_lock_init_recursive>
 8006470:	bd10      	pop	{r4, pc}
 8006472:	bf00      	nop
 8006474:	08006635 	.word	0x08006635
 8006478:	0800665b 	.word	0x0800665b
 800647c:	08006693 	.word	0x08006693
 8006480:	080066b7 	.word	0x080066b7
 8006484:	20000698 	.word	0x20000698

08006488 <stdio_exit_handler>:
 8006488:	4a02      	ldr	r2, [pc, #8]	; (8006494 <stdio_exit_handler+0xc>)
 800648a:	4903      	ldr	r1, [pc, #12]	; (8006498 <stdio_exit_handler+0x10>)
 800648c:	4803      	ldr	r0, [pc, #12]	; (800649c <stdio_exit_handler+0x14>)
 800648e:	f000 b869 	b.w	8006564 <_fwalk_sglue>
 8006492:	bf00      	nop
 8006494:	2000000c 	.word	0x2000000c
 8006498:	0800971d 	.word	0x0800971d
 800649c:	20000018 	.word	0x20000018

080064a0 <cleanup_stdio>:
 80064a0:	6841      	ldr	r1, [r0, #4]
 80064a2:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <cleanup_stdio+0x34>)
 80064a4:	b510      	push	{r4, lr}
 80064a6:	4299      	cmp	r1, r3
 80064a8:	4604      	mov	r4, r0
 80064aa:	d001      	beq.n	80064b0 <cleanup_stdio+0x10>
 80064ac:	f003 f936 	bl	800971c <_fflush_r>
 80064b0:	68a1      	ldr	r1, [r4, #8]
 80064b2:	4b09      	ldr	r3, [pc, #36]	; (80064d8 <cleanup_stdio+0x38>)
 80064b4:	4299      	cmp	r1, r3
 80064b6:	d002      	beq.n	80064be <cleanup_stdio+0x1e>
 80064b8:	4620      	mov	r0, r4
 80064ba:	f003 f92f 	bl	800971c <_fflush_r>
 80064be:	68e1      	ldr	r1, [r4, #12]
 80064c0:	4b06      	ldr	r3, [pc, #24]	; (80064dc <cleanup_stdio+0x3c>)
 80064c2:	4299      	cmp	r1, r3
 80064c4:	d004      	beq.n	80064d0 <cleanup_stdio+0x30>
 80064c6:	4620      	mov	r0, r4
 80064c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064cc:	f003 b926 	b.w	800971c <_fflush_r>
 80064d0:	bd10      	pop	{r4, pc}
 80064d2:	bf00      	nop
 80064d4:	20000698 	.word	0x20000698
 80064d8:	20000700 	.word	0x20000700
 80064dc:	20000768 	.word	0x20000768

080064e0 <global_stdio_init.part.0>:
 80064e0:	b510      	push	{r4, lr}
 80064e2:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <global_stdio_init.part.0+0x30>)
 80064e4:	4c0b      	ldr	r4, [pc, #44]	; (8006514 <global_stdio_init.part.0+0x34>)
 80064e6:	4a0c      	ldr	r2, [pc, #48]	; (8006518 <global_stdio_init.part.0+0x38>)
 80064e8:	4620      	mov	r0, r4
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	2104      	movs	r1, #4
 80064ee:	2200      	movs	r2, #0
 80064f0:	f7ff ff94 	bl	800641c <std>
 80064f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80064f8:	2201      	movs	r2, #1
 80064fa:	2109      	movs	r1, #9
 80064fc:	f7ff ff8e 	bl	800641c <std>
 8006500:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006504:	2202      	movs	r2, #2
 8006506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800650a:	2112      	movs	r1, #18
 800650c:	f7ff bf86 	b.w	800641c <std>
 8006510:	200007d0 	.word	0x200007d0
 8006514:	20000698 	.word	0x20000698
 8006518:	08006489 	.word	0x08006489

0800651c <__sfp_lock_acquire>:
 800651c:	4801      	ldr	r0, [pc, #4]	; (8006524 <__sfp_lock_acquire+0x8>)
 800651e:	f000 b94c 	b.w	80067ba <__retarget_lock_acquire_recursive>
 8006522:	bf00      	nop
 8006524:	200007d9 	.word	0x200007d9

08006528 <__sfp_lock_release>:
 8006528:	4801      	ldr	r0, [pc, #4]	; (8006530 <__sfp_lock_release+0x8>)
 800652a:	f000 b947 	b.w	80067bc <__retarget_lock_release_recursive>
 800652e:	bf00      	nop
 8006530:	200007d9 	.word	0x200007d9

08006534 <__sinit>:
 8006534:	b510      	push	{r4, lr}
 8006536:	4604      	mov	r4, r0
 8006538:	f7ff fff0 	bl	800651c <__sfp_lock_acquire>
 800653c:	6a23      	ldr	r3, [r4, #32]
 800653e:	b11b      	cbz	r3, 8006548 <__sinit+0x14>
 8006540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006544:	f7ff bff0 	b.w	8006528 <__sfp_lock_release>
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <__sinit+0x28>)
 800654a:	6223      	str	r3, [r4, #32]
 800654c:	4b04      	ldr	r3, [pc, #16]	; (8006560 <__sinit+0x2c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f5      	bne.n	8006540 <__sinit+0xc>
 8006554:	f7ff ffc4 	bl	80064e0 <global_stdio_init.part.0>
 8006558:	e7f2      	b.n	8006540 <__sinit+0xc>
 800655a:	bf00      	nop
 800655c:	080064a1 	.word	0x080064a1
 8006560:	200007d0 	.word	0x200007d0

08006564 <_fwalk_sglue>:
 8006564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006568:	4607      	mov	r7, r0
 800656a:	4688      	mov	r8, r1
 800656c:	4614      	mov	r4, r2
 800656e:	2600      	movs	r6, #0
 8006570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006574:	f1b9 0901 	subs.w	r9, r9, #1
 8006578:	d505      	bpl.n	8006586 <_fwalk_sglue+0x22>
 800657a:	6824      	ldr	r4, [r4, #0]
 800657c:	2c00      	cmp	r4, #0
 800657e:	d1f7      	bne.n	8006570 <_fwalk_sglue+0xc>
 8006580:	4630      	mov	r0, r6
 8006582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006586:	89ab      	ldrh	r3, [r5, #12]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d907      	bls.n	800659c <_fwalk_sglue+0x38>
 800658c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006590:	3301      	adds	r3, #1
 8006592:	d003      	beq.n	800659c <_fwalk_sglue+0x38>
 8006594:	4629      	mov	r1, r5
 8006596:	4638      	mov	r0, r7
 8006598:	47c0      	blx	r8
 800659a:	4306      	orrs	r6, r0
 800659c:	3568      	adds	r5, #104	; 0x68
 800659e:	e7e9      	b.n	8006574 <_fwalk_sglue+0x10>

080065a0 <siprintf>:
 80065a0:	b40e      	push	{r1, r2, r3}
 80065a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065a6:	b500      	push	{lr}
 80065a8:	b09c      	sub	sp, #112	; 0x70
 80065aa:	ab1d      	add	r3, sp, #116	; 0x74
 80065ac:	9002      	str	r0, [sp, #8]
 80065ae:	9006      	str	r0, [sp, #24]
 80065b0:	9107      	str	r1, [sp, #28]
 80065b2:	9104      	str	r1, [sp, #16]
 80065b4:	4808      	ldr	r0, [pc, #32]	; (80065d8 <siprintf+0x38>)
 80065b6:	4909      	ldr	r1, [pc, #36]	; (80065dc <siprintf+0x3c>)
 80065b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80065bc:	9105      	str	r1, [sp, #20]
 80065be:	6800      	ldr	r0, [r0, #0]
 80065c0:	a902      	add	r1, sp, #8
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	f002 fc0c 	bl	8008de0 <_svfiprintf_r>
 80065c8:	2200      	movs	r2, #0
 80065ca:	9b02      	ldr	r3, [sp, #8]
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	b01c      	add	sp, #112	; 0x70
 80065d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80065d4:	b003      	add	sp, #12
 80065d6:	4770      	bx	lr
 80065d8:	20000064 	.word	0x20000064
 80065dc:	ffff0208 	.word	0xffff0208

080065e0 <siscanf>:
 80065e0:	b40e      	push	{r1, r2, r3}
 80065e2:	f44f 7201 	mov.w	r2, #516	; 0x204
 80065e6:	b530      	push	{r4, r5, lr}
 80065e8:	b09c      	sub	sp, #112	; 0x70
 80065ea:	ac1f      	add	r4, sp, #124	; 0x7c
 80065ec:	f854 5b04 	ldr.w	r5, [r4], #4
 80065f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80065f4:	9002      	str	r0, [sp, #8]
 80065f6:	9006      	str	r0, [sp, #24]
 80065f8:	f7f9 fe20 	bl	800023c <strlen>
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <siscanf+0x4c>)
 80065fe:	9003      	str	r0, [sp, #12]
 8006600:	930b      	str	r3, [sp, #44]	; 0x2c
 8006602:	2300      	movs	r3, #0
 8006604:	930f      	str	r3, [sp, #60]	; 0x3c
 8006606:	9314      	str	r3, [sp, #80]	; 0x50
 8006608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800660c:	9007      	str	r0, [sp, #28]
 800660e:	4808      	ldr	r0, [pc, #32]	; (8006630 <siscanf+0x50>)
 8006610:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006614:	462a      	mov	r2, r5
 8006616:	4623      	mov	r3, r4
 8006618:	a902      	add	r1, sp, #8
 800661a:	6800      	ldr	r0, [r0, #0]
 800661c:	9401      	str	r4, [sp, #4]
 800661e:	f002 fd37 	bl	8009090 <__ssvfiscanf_r>
 8006622:	b01c      	add	sp, #112	; 0x70
 8006624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006628:	b003      	add	sp, #12
 800662a:	4770      	bx	lr
 800662c:	08006657 	.word	0x08006657
 8006630:	20000064 	.word	0x20000064

08006634 <__sread>:
 8006634:	b510      	push	{r4, lr}
 8006636:	460c      	mov	r4, r1
 8006638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663c:	f000 f86e 	bl	800671c <_read_r>
 8006640:	2800      	cmp	r0, #0
 8006642:	bfab      	itete	ge
 8006644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006646:	89a3      	ldrhlt	r3, [r4, #12]
 8006648:	181b      	addge	r3, r3, r0
 800664a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800664e:	bfac      	ite	ge
 8006650:	6563      	strge	r3, [r4, #84]	; 0x54
 8006652:	81a3      	strhlt	r3, [r4, #12]
 8006654:	bd10      	pop	{r4, pc}

08006656 <__seofread>:
 8006656:	2000      	movs	r0, #0
 8006658:	4770      	bx	lr

0800665a <__swrite>:
 800665a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800665e:	461f      	mov	r7, r3
 8006660:	898b      	ldrh	r3, [r1, #12]
 8006662:	4605      	mov	r5, r0
 8006664:	05db      	lsls	r3, r3, #23
 8006666:	460c      	mov	r4, r1
 8006668:	4616      	mov	r6, r2
 800666a:	d505      	bpl.n	8006678 <__swrite+0x1e>
 800666c:	2302      	movs	r3, #2
 800666e:	2200      	movs	r2, #0
 8006670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006674:	f000 f840 	bl	80066f8 <_lseek_r>
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	4632      	mov	r2, r6
 800667c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	4628      	mov	r0, r5
 8006684:	463b      	mov	r3, r7
 8006686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800668a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800668e:	f000 b857 	b.w	8006740 <_write_r>

08006692 <__sseek>:
 8006692:	b510      	push	{r4, lr}
 8006694:	460c      	mov	r4, r1
 8006696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800669a:	f000 f82d 	bl	80066f8 <_lseek_r>
 800669e:	1c43      	adds	r3, r0, #1
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	bf15      	itete	ne
 80066a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80066a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066ae:	81a3      	strheq	r3, [r4, #12]
 80066b0:	bf18      	it	ne
 80066b2:	81a3      	strhne	r3, [r4, #12]
 80066b4:	bd10      	pop	{r4, pc}

080066b6 <__sclose>:
 80066b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ba:	f000 b80d 	b.w	80066d8 <_close_r>

080066be <memset>:
 80066be:	4603      	mov	r3, r0
 80066c0:	4402      	add	r2, r0
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d100      	bne.n	80066c8 <memset+0xa>
 80066c6:	4770      	bx	lr
 80066c8:	f803 1b01 	strb.w	r1, [r3], #1
 80066cc:	e7f9      	b.n	80066c2 <memset+0x4>
	...

080066d0 <_localeconv_r>:
 80066d0:	4800      	ldr	r0, [pc, #0]	; (80066d4 <_localeconv_r+0x4>)
 80066d2:	4770      	bx	lr
 80066d4:	20000158 	.word	0x20000158

080066d8 <_close_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	2300      	movs	r3, #0
 80066dc:	4d05      	ldr	r5, [pc, #20]	; (80066f4 <_close_r+0x1c>)
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	602b      	str	r3, [r5, #0]
 80066e4:	f7fb fbc8 	bl	8001e78 <_close>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_close_r+0x1a>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_close_r+0x1a>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	200007d4 	.word	0x200007d4

080066f8 <_lseek_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4604      	mov	r4, r0
 80066fc:	4608      	mov	r0, r1
 80066fe:	4611      	mov	r1, r2
 8006700:	2200      	movs	r2, #0
 8006702:	4d05      	ldr	r5, [pc, #20]	; (8006718 <_lseek_r+0x20>)
 8006704:	602a      	str	r2, [r5, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	f7fb fbda 	bl	8001ec0 <_lseek>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_lseek_r+0x1e>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_lseek_r+0x1e>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	200007d4 	.word	0x200007d4

0800671c <_read_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	4611      	mov	r1, r2
 8006724:	2200      	movs	r2, #0
 8006726:	4d05      	ldr	r5, [pc, #20]	; (800673c <_read_r+0x20>)
 8006728:	602a      	str	r2, [r5, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	f7fb fb6b 	bl	8001e06 <_read>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d102      	bne.n	800673a <_read_r+0x1e>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	b103      	cbz	r3, 800673a <_read_r+0x1e>
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	200007d4 	.word	0x200007d4

08006740 <_write_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4604      	mov	r4, r0
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	2200      	movs	r2, #0
 800674a:	4d05      	ldr	r5, [pc, #20]	; (8006760 <_write_r+0x20>)
 800674c:	602a      	str	r2, [r5, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	f7fb fb76 	bl	8001e40 <_write>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_write_r+0x1e>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b103      	cbz	r3, 800675e <_write_r+0x1e>
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	200007d4 	.word	0x200007d4

08006764 <__errno>:
 8006764:	4b01      	ldr	r3, [pc, #4]	; (800676c <__errno+0x8>)
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000064 	.word	0x20000064

08006770 <__libc_init_array>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	2600      	movs	r6, #0
 8006774:	4d0c      	ldr	r5, [pc, #48]	; (80067a8 <__libc_init_array+0x38>)
 8006776:	4c0d      	ldr	r4, [pc, #52]	; (80067ac <__libc_init_array+0x3c>)
 8006778:	1b64      	subs	r4, r4, r5
 800677a:	10a4      	asrs	r4, r4, #2
 800677c:	42a6      	cmp	r6, r4
 800677e:	d109      	bne.n	8006794 <__libc_init_array+0x24>
 8006780:	f003 ffc4 	bl	800a70c <_init>
 8006784:	2600      	movs	r6, #0
 8006786:	4d0a      	ldr	r5, [pc, #40]	; (80067b0 <__libc_init_array+0x40>)
 8006788:	4c0a      	ldr	r4, [pc, #40]	; (80067b4 <__libc_init_array+0x44>)
 800678a:	1b64      	subs	r4, r4, r5
 800678c:	10a4      	asrs	r4, r4, #2
 800678e:	42a6      	cmp	r6, r4
 8006790:	d105      	bne.n	800679e <__libc_init_array+0x2e>
 8006792:	bd70      	pop	{r4, r5, r6, pc}
 8006794:	f855 3b04 	ldr.w	r3, [r5], #4
 8006798:	4798      	blx	r3
 800679a:	3601      	adds	r6, #1
 800679c:	e7ee      	b.n	800677c <__libc_init_array+0xc>
 800679e:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a2:	4798      	blx	r3
 80067a4:	3601      	adds	r6, #1
 80067a6:	e7f2      	b.n	800678e <__libc_init_array+0x1e>
 80067a8:	0800abec 	.word	0x0800abec
 80067ac:	0800abec 	.word	0x0800abec
 80067b0:	0800abec 	.word	0x0800abec
 80067b4:	0800abf0 	.word	0x0800abf0

080067b8 <__retarget_lock_init_recursive>:
 80067b8:	4770      	bx	lr

080067ba <__retarget_lock_acquire_recursive>:
 80067ba:	4770      	bx	lr

080067bc <__retarget_lock_release_recursive>:
 80067bc:	4770      	bx	lr

080067be <memchr>:
 80067be:	4603      	mov	r3, r0
 80067c0:	b510      	push	{r4, lr}
 80067c2:	b2c9      	uxtb	r1, r1
 80067c4:	4402      	add	r2, r0
 80067c6:	4293      	cmp	r3, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	d101      	bne.n	80067d0 <memchr+0x12>
 80067cc:	2000      	movs	r0, #0
 80067ce:	e003      	b.n	80067d8 <memchr+0x1a>
 80067d0:	7804      	ldrb	r4, [r0, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	428c      	cmp	r4, r1
 80067d6:	d1f6      	bne.n	80067c6 <memchr+0x8>
 80067d8:	bd10      	pop	{r4, pc}
	...

080067dc <nanf>:
 80067dc:	4800      	ldr	r0, [pc, #0]	; (80067e0 <nanf+0x4>)
 80067de:	4770      	bx	lr
 80067e0:	7fc00000 	.word	0x7fc00000

080067e4 <quorem>:
 80067e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	6903      	ldr	r3, [r0, #16]
 80067ea:	690c      	ldr	r4, [r1, #16]
 80067ec:	4607      	mov	r7, r0
 80067ee:	42a3      	cmp	r3, r4
 80067f0:	db7f      	blt.n	80068f2 <quorem+0x10e>
 80067f2:	3c01      	subs	r4, #1
 80067f4:	f100 0514 	add.w	r5, r0, #20
 80067f8:	f101 0814 	add.w	r8, r1, #20
 80067fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800680a:	3301      	adds	r3, #1
 800680c:	429a      	cmp	r2, r3
 800680e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006812:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006816:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800681a:	d331      	bcc.n	8006880 <quorem+0x9c>
 800681c:	f04f 0e00 	mov.w	lr, #0
 8006820:	4640      	mov	r0, r8
 8006822:	46ac      	mov	ip, r5
 8006824:	46f2      	mov	sl, lr
 8006826:	f850 2b04 	ldr.w	r2, [r0], #4
 800682a:	b293      	uxth	r3, r2
 800682c:	fb06 e303 	mla	r3, r6, r3, lr
 8006830:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006834:	0c1a      	lsrs	r2, r3, #16
 8006836:	b29b      	uxth	r3, r3
 8006838:	fb06 220e 	mla	r2, r6, lr, r2
 800683c:	ebaa 0303 	sub.w	r3, sl, r3
 8006840:	f8dc a000 	ldr.w	sl, [ip]
 8006844:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006848:	fa1f fa8a 	uxth.w	sl, sl
 800684c:	4453      	add	r3, sl
 800684e:	f8dc a000 	ldr.w	sl, [ip]
 8006852:	b292      	uxth	r2, r2
 8006854:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006858:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800685c:	b29b      	uxth	r3, r3
 800685e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006862:	4581      	cmp	r9, r0
 8006864:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006868:	f84c 3b04 	str.w	r3, [ip], #4
 800686c:	d2db      	bcs.n	8006826 <quorem+0x42>
 800686e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006872:	b92b      	cbnz	r3, 8006880 <quorem+0x9c>
 8006874:	9b01      	ldr	r3, [sp, #4]
 8006876:	3b04      	subs	r3, #4
 8006878:	429d      	cmp	r5, r3
 800687a:	461a      	mov	r2, r3
 800687c:	d32d      	bcc.n	80068da <quorem+0xf6>
 800687e:	613c      	str	r4, [r7, #16]
 8006880:	4638      	mov	r0, r7
 8006882:	f001 f9dd 	bl	8007c40 <__mcmp>
 8006886:	2800      	cmp	r0, #0
 8006888:	db23      	blt.n	80068d2 <quorem+0xee>
 800688a:	4629      	mov	r1, r5
 800688c:	2000      	movs	r0, #0
 800688e:	3601      	adds	r6, #1
 8006890:	f858 2b04 	ldr.w	r2, [r8], #4
 8006894:	f8d1 c000 	ldr.w	ip, [r1]
 8006898:	b293      	uxth	r3, r2
 800689a:	1ac3      	subs	r3, r0, r3
 800689c:	0c12      	lsrs	r2, r2, #16
 800689e:	fa1f f08c 	uxth.w	r0, ip
 80068a2:	4403      	add	r3, r0
 80068a4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80068a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068b2:	45c1      	cmp	r9, r8
 80068b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068b8:	f841 3b04 	str.w	r3, [r1], #4
 80068bc:	d2e8      	bcs.n	8006890 <quorem+0xac>
 80068be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068c6:	b922      	cbnz	r2, 80068d2 <quorem+0xee>
 80068c8:	3b04      	subs	r3, #4
 80068ca:	429d      	cmp	r5, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	d30a      	bcc.n	80068e6 <quorem+0x102>
 80068d0:	613c      	str	r4, [r7, #16]
 80068d2:	4630      	mov	r0, r6
 80068d4:	b003      	add	sp, #12
 80068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	3b04      	subs	r3, #4
 80068de:	2a00      	cmp	r2, #0
 80068e0:	d1cd      	bne.n	800687e <quorem+0x9a>
 80068e2:	3c01      	subs	r4, #1
 80068e4:	e7c8      	b.n	8006878 <quorem+0x94>
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	3b04      	subs	r3, #4
 80068ea:	2a00      	cmp	r2, #0
 80068ec:	d1f0      	bne.n	80068d0 <quorem+0xec>
 80068ee:	3c01      	subs	r4, #1
 80068f0:	e7eb      	b.n	80068ca <quorem+0xe6>
 80068f2:	2000      	movs	r0, #0
 80068f4:	e7ee      	b.n	80068d4 <quorem+0xf0>
	...

080068f8 <_dtoa_r>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	4616      	mov	r6, r2
 80068fe:	461f      	mov	r7, r3
 8006900:	69c4      	ldr	r4, [r0, #28]
 8006902:	b099      	sub	sp, #100	; 0x64
 8006904:	4605      	mov	r5, r0
 8006906:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800690a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800690e:	b974      	cbnz	r4, 800692e <_dtoa_r+0x36>
 8006910:	2010      	movs	r0, #16
 8006912:	f000 fe1d 	bl	8007550 <malloc>
 8006916:	4602      	mov	r2, r0
 8006918:	61e8      	str	r0, [r5, #28]
 800691a:	b920      	cbnz	r0, 8006926 <_dtoa_r+0x2e>
 800691c:	21ef      	movs	r1, #239	; 0xef
 800691e:	4bac      	ldr	r3, [pc, #688]	; (8006bd0 <_dtoa_r+0x2d8>)
 8006920:	48ac      	ldr	r0, [pc, #688]	; (8006bd4 <_dtoa_r+0x2dc>)
 8006922:	f002 ffe5 	bl	80098f0 <__assert_func>
 8006926:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800692a:	6004      	str	r4, [r0, #0]
 800692c:	60c4      	str	r4, [r0, #12]
 800692e:	69eb      	ldr	r3, [r5, #28]
 8006930:	6819      	ldr	r1, [r3, #0]
 8006932:	b151      	cbz	r1, 800694a <_dtoa_r+0x52>
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	2301      	movs	r3, #1
 8006938:	4093      	lsls	r3, r2
 800693a:	604a      	str	r2, [r1, #4]
 800693c:	608b      	str	r3, [r1, #8]
 800693e:	4628      	mov	r0, r5
 8006940:	f000 fefa 	bl	8007738 <_Bfree>
 8006944:	2200      	movs	r2, #0
 8006946:	69eb      	ldr	r3, [r5, #28]
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	1e3b      	subs	r3, r7, #0
 800694c:	bfaf      	iteee	ge
 800694e:	2300      	movge	r3, #0
 8006950:	2201      	movlt	r2, #1
 8006952:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006956:	9305      	strlt	r3, [sp, #20]
 8006958:	bfa8      	it	ge
 800695a:	f8c8 3000 	strge.w	r3, [r8]
 800695e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006962:	4b9d      	ldr	r3, [pc, #628]	; (8006bd8 <_dtoa_r+0x2e0>)
 8006964:	bfb8      	it	lt
 8006966:	f8c8 2000 	strlt.w	r2, [r8]
 800696a:	ea33 0309 	bics.w	r3, r3, r9
 800696e:	d119      	bne.n	80069a4 <_dtoa_r+0xac>
 8006970:	f242 730f 	movw	r3, #9999	; 0x270f
 8006974:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800697c:	4333      	orrs	r3, r6
 800697e:	f000 8589 	beq.w	8007494 <_dtoa_r+0xb9c>
 8006982:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006984:	b953      	cbnz	r3, 800699c <_dtoa_r+0xa4>
 8006986:	4b95      	ldr	r3, [pc, #596]	; (8006bdc <_dtoa_r+0x2e4>)
 8006988:	e023      	b.n	80069d2 <_dtoa_r+0xda>
 800698a:	4b95      	ldr	r3, [pc, #596]	; (8006be0 <_dtoa_r+0x2e8>)
 800698c:	9303      	str	r3, [sp, #12]
 800698e:	3308      	adds	r3, #8
 8006990:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	9803      	ldr	r0, [sp, #12]
 8006996:	b019      	add	sp, #100	; 0x64
 8006998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699c:	4b8f      	ldr	r3, [pc, #572]	; (8006bdc <_dtoa_r+0x2e4>)
 800699e:	9303      	str	r3, [sp, #12]
 80069a0:	3303      	adds	r3, #3
 80069a2:	e7f5      	b.n	8006990 <_dtoa_r+0x98>
 80069a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80069a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80069ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069b0:	2200      	movs	r2, #0
 80069b2:	2300      	movs	r3, #0
 80069b4:	f7fa f86e 	bl	8000a94 <__aeabi_dcmpeq>
 80069b8:	4680      	mov	r8, r0
 80069ba:	b160      	cbz	r0, 80069d6 <_dtoa_r+0xde>
 80069bc:	2301      	movs	r3, #1
 80069be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8562 	beq.w	800748e <_dtoa_r+0xb96>
 80069ca:	4b86      	ldr	r3, [pc, #536]	; (8006be4 <_dtoa_r+0x2ec>)
 80069cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	9303      	str	r3, [sp, #12]
 80069d4:	e7de      	b.n	8006994 <_dtoa_r+0x9c>
 80069d6:	ab16      	add	r3, sp, #88	; 0x58
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	ab17      	add	r3, sp, #92	; 0x5c
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	4628      	mov	r0, r5
 80069e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80069e4:	f001 fa3c 	bl	8007e60 <__d2b>
 80069e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80069ec:	4682      	mov	sl, r0
 80069ee:	2c00      	cmp	r4, #0
 80069f0:	d07e      	beq.n	8006af0 <_dtoa_r+0x1f8>
 80069f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069f8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80069fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a00:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006a04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006a08:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	2200      	movs	r2, #0
 8006a10:	4b75      	ldr	r3, [pc, #468]	; (8006be8 <_dtoa_r+0x2f0>)
 8006a12:	f7f9 fc1f 	bl	8000254 <__aeabi_dsub>
 8006a16:	a368      	add	r3, pc, #416	; (adr r3, 8006bb8 <_dtoa_r+0x2c0>)
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f7f9 fdd2 	bl	80005c4 <__aeabi_dmul>
 8006a20:	a367      	add	r3, pc, #412	; (adr r3, 8006bc0 <_dtoa_r+0x2c8>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f7f9 fc17 	bl	8000258 <__adddf3>
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	460f      	mov	r7, r1
 8006a30:	f7f9 fd5e 	bl	80004f0 <__aeabi_i2d>
 8006a34:	a364      	add	r3, pc, #400	; (adr r3, 8006bc8 <_dtoa_r+0x2d0>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f7f9 fdc3 	bl	80005c4 <__aeabi_dmul>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	4630      	mov	r0, r6
 8006a44:	4639      	mov	r1, r7
 8006a46:	f7f9 fc07 	bl	8000258 <__adddf3>
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	460f      	mov	r7, r1
 8006a4e:	f7fa f869 	bl	8000b24 <__aeabi_d2iz>
 8006a52:	2200      	movs	r2, #0
 8006a54:	4683      	mov	fp, r0
 8006a56:	2300      	movs	r3, #0
 8006a58:	4630      	mov	r0, r6
 8006a5a:	4639      	mov	r1, r7
 8006a5c:	f7fa f824 	bl	8000aa8 <__aeabi_dcmplt>
 8006a60:	b148      	cbz	r0, 8006a76 <_dtoa_r+0x17e>
 8006a62:	4658      	mov	r0, fp
 8006a64:	f7f9 fd44 	bl	80004f0 <__aeabi_i2d>
 8006a68:	4632      	mov	r2, r6
 8006a6a:	463b      	mov	r3, r7
 8006a6c:	f7fa f812 	bl	8000a94 <__aeabi_dcmpeq>
 8006a70:	b908      	cbnz	r0, 8006a76 <_dtoa_r+0x17e>
 8006a72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a76:	f1bb 0f16 	cmp.w	fp, #22
 8006a7a:	d857      	bhi.n	8006b2c <_dtoa_r+0x234>
 8006a7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a80:	4b5a      	ldr	r3, [pc, #360]	; (8006bec <_dtoa_r+0x2f4>)
 8006a82:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	f7fa f80d 	bl	8000aa8 <__aeabi_dcmplt>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d04e      	beq.n	8006b30 <_dtoa_r+0x238>
 8006a92:	2300      	movs	r3, #0
 8006a94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a9c:	1b1b      	subs	r3, r3, r4
 8006a9e:	1e5a      	subs	r2, r3, #1
 8006aa0:	bf46      	itte	mi
 8006aa2:	f1c3 0901 	rsbmi	r9, r3, #1
 8006aa6:	2300      	movmi	r3, #0
 8006aa8:	f04f 0900 	movpl.w	r9, #0
 8006aac:	9209      	str	r2, [sp, #36]	; 0x24
 8006aae:	bf48      	it	mi
 8006ab0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006ab2:	f1bb 0f00 	cmp.w	fp, #0
 8006ab6:	db3d      	blt.n	8006b34 <_dtoa_r+0x23c>
 8006ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006abe:	445b      	add	r3, fp
 8006ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ac8:	2b09      	cmp	r3, #9
 8006aca:	d867      	bhi.n	8006b9c <_dtoa_r+0x2a4>
 8006acc:	2b05      	cmp	r3, #5
 8006ace:	bfc4      	itt	gt
 8006ad0:	3b04      	subgt	r3, #4
 8006ad2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ad6:	bfc8      	it	gt
 8006ad8:	2400      	movgt	r4, #0
 8006ada:	f1a3 0302 	sub.w	r3, r3, #2
 8006ade:	bfd8      	it	le
 8006ae0:	2401      	movle	r4, #1
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	f200 8086 	bhi.w	8006bf4 <_dtoa_r+0x2fc>
 8006ae8:	e8df f003 	tbb	[pc, r3]
 8006aec:	5637392c 	.word	0x5637392c
 8006af0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006af4:	441c      	add	r4, r3
 8006af6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	bfc1      	itttt	gt
 8006afe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b02:	fa09 f903 	lslgt.w	r9, r9, r3
 8006b06:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006b0a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006b0e:	bfd6      	itet	le
 8006b10:	f1c3 0320 	rsble	r3, r3, #32
 8006b14:	ea49 0003 	orrgt.w	r0, r9, r3
 8006b18:	fa06 f003 	lslle.w	r0, r6, r3
 8006b1c:	f7f9 fcd8 	bl	80004d0 <__aeabi_ui2d>
 8006b20:	2201      	movs	r2, #1
 8006b22:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006b26:	3c01      	subs	r4, #1
 8006b28:	9213      	str	r2, [sp, #76]	; 0x4c
 8006b2a:	e76f      	b.n	8006a0c <_dtoa_r+0x114>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e7b3      	b.n	8006a98 <_dtoa_r+0x1a0>
 8006b30:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b32:	e7b2      	b.n	8006a9a <_dtoa_r+0x1a2>
 8006b34:	f1cb 0300 	rsb	r3, fp, #0
 8006b38:	930a      	str	r3, [sp, #40]	; 0x28
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	eba9 090b 	sub.w	r9, r9, fp
 8006b40:	930e      	str	r3, [sp, #56]	; 0x38
 8006b42:	e7c0      	b.n	8006ac6 <_dtoa_r+0x1ce>
 8006b44:	2300      	movs	r3, #0
 8006b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	dc55      	bgt.n	8006bfa <_dtoa_r+0x302>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	461a      	mov	r2, r3
 8006b52:	9306      	str	r3, [sp, #24]
 8006b54:	9308      	str	r3, [sp, #32]
 8006b56:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b58:	e00b      	b.n	8006b72 <_dtoa_r+0x27a>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e7f3      	b.n	8006b46 <_dtoa_r+0x24e>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b64:	445b      	add	r3, fp
 8006b66:	9306      	str	r3, [sp, #24]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	9308      	str	r3, [sp, #32]
 8006b6e:	bfb8      	it	lt
 8006b70:	2301      	movlt	r3, #1
 8006b72:	2100      	movs	r1, #0
 8006b74:	2204      	movs	r2, #4
 8006b76:	69e8      	ldr	r0, [r5, #28]
 8006b78:	f102 0614 	add.w	r6, r2, #20
 8006b7c:	429e      	cmp	r6, r3
 8006b7e:	d940      	bls.n	8006c02 <_dtoa_r+0x30a>
 8006b80:	6041      	str	r1, [r0, #4]
 8006b82:	4628      	mov	r0, r5
 8006b84:	f000 fd98 	bl	80076b8 <_Balloc>
 8006b88:	9003      	str	r0, [sp, #12]
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d13c      	bne.n	8006c08 <_dtoa_r+0x310>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	f240 11af 	movw	r1, #431	; 0x1af
 8006b94:	4b16      	ldr	r3, [pc, #88]	; (8006bf0 <_dtoa_r+0x2f8>)
 8006b96:	e6c3      	b.n	8006920 <_dtoa_r+0x28>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e7e1      	b.n	8006b60 <_dtoa_r+0x268>
 8006b9c:	2401      	movs	r4, #1
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006ba2:	9322      	str	r3, [sp, #136]	; 0x88
 8006ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba8:	2200      	movs	r2, #0
 8006baa:	9306      	str	r3, [sp, #24]
 8006bac:	9308      	str	r3, [sp, #32]
 8006bae:	2312      	movs	r3, #18
 8006bb0:	e7d1      	b.n	8006b56 <_dtoa_r+0x25e>
 8006bb2:	bf00      	nop
 8006bb4:	f3af 8000 	nop.w
 8006bb8:	636f4361 	.word	0x636f4361
 8006bbc:	3fd287a7 	.word	0x3fd287a7
 8006bc0:	8b60c8b3 	.word	0x8b60c8b3
 8006bc4:	3fc68a28 	.word	0x3fc68a28
 8006bc8:	509f79fb 	.word	0x509f79fb
 8006bcc:	3fd34413 	.word	0x3fd34413
 8006bd0:	0800a7ee 	.word	0x0800a7ee
 8006bd4:	0800a805 	.word	0x0800a805
 8006bd8:	7ff00000 	.word	0x7ff00000
 8006bdc:	0800a7ea 	.word	0x0800a7ea
 8006be0:	0800a7e1 	.word	0x0800a7e1
 8006be4:	0800ab41 	.word	0x0800ab41
 8006be8:	3ff80000 	.word	0x3ff80000
 8006bec:	0800a8f0 	.word	0x0800a8f0
 8006bf0:	0800a85d 	.word	0x0800a85d
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bf8:	e7d4      	b.n	8006ba4 <_dtoa_r+0x2ac>
 8006bfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bfc:	9306      	str	r3, [sp, #24]
 8006bfe:	9308      	str	r3, [sp, #32]
 8006c00:	e7b7      	b.n	8006b72 <_dtoa_r+0x27a>
 8006c02:	3101      	adds	r1, #1
 8006c04:	0052      	lsls	r2, r2, #1
 8006c06:	e7b7      	b.n	8006b78 <_dtoa_r+0x280>
 8006c08:	69eb      	ldr	r3, [r5, #28]
 8006c0a:	9a03      	ldr	r2, [sp, #12]
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	9b08      	ldr	r3, [sp, #32]
 8006c10:	2b0e      	cmp	r3, #14
 8006c12:	f200 80a8 	bhi.w	8006d66 <_dtoa_r+0x46e>
 8006c16:	2c00      	cmp	r4, #0
 8006c18:	f000 80a5 	beq.w	8006d66 <_dtoa_r+0x46e>
 8006c1c:	f1bb 0f00 	cmp.w	fp, #0
 8006c20:	dd34      	ble.n	8006c8c <_dtoa_r+0x394>
 8006c22:	4b9a      	ldr	r3, [pc, #616]	; (8006e8c <_dtoa_r+0x594>)
 8006c24:	f00b 020f 	and.w	r2, fp, #15
 8006c28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006c30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c34:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c38:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006c3c:	d016      	beq.n	8006c6c <_dtoa_r+0x374>
 8006c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c42:	4b93      	ldr	r3, [pc, #588]	; (8006e90 <_dtoa_r+0x598>)
 8006c44:	2703      	movs	r7, #3
 8006c46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c4a:	f7f9 fde5 	bl	8000818 <__aeabi_ddiv>
 8006c4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c52:	f004 040f 	and.w	r4, r4, #15
 8006c56:	4e8e      	ldr	r6, [pc, #568]	; (8006e90 <_dtoa_r+0x598>)
 8006c58:	b954      	cbnz	r4, 8006c70 <_dtoa_r+0x378>
 8006c5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c62:	f7f9 fdd9 	bl	8000818 <__aeabi_ddiv>
 8006c66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c6a:	e029      	b.n	8006cc0 <_dtoa_r+0x3c8>
 8006c6c:	2702      	movs	r7, #2
 8006c6e:	e7f2      	b.n	8006c56 <_dtoa_r+0x35e>
 8006c70:	07e1      	lsls	r1, r4, #31
 8006c72:	d508      	bpl.n	8006c86 <_dtoa_r+0x38e>
 8006c74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c7c:	f7f9 fca2 	bl	80005c4 <__aeabi_dmul>
 8006c80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c84:	3701      	adds	r7, #1
 8006c86:	1064      	asrs	r4, r4, #1
 8006c88:	3608      	adds	r6, #8
 8006c8a:	e7e5      	b.n	8006c58 <_dtoa_r+0x360>
 8006c8c:	f000 80a5 	beq.w	8006dda <_dtoa_r+0x4e2>
 8006c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c94:	f1cb 0400 	rsb	r4, fp, #0
 8006c98:	4b7c      	ldr	r3, [pc, #496]	; (8006e8c <_dtoa_r+0x594>)
 8006c9a:	f004 020f 	and.w	r2, r4, #15
 8006c9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	f7f9 fc8d 	bl	80005c4 <__aeabi_dmul>
 8006caa:	2702      	movs	r7, #2
 8006cac:	2300      	movs	r3, #0
 8006cae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cb2:	4e77      	ldr	r6, [pc, #476]	; (8006e90 <_dtoa_r+0x598>)
 8006cb4:	1124      	asrs	r4, r4, #4
 8006cb6:	2c00      	cmp	r4, #0
 8006cb8:	f040 8084 	bne.w	8006dc4 <_dtoa_r+0x4cc>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1d2      	bne.n	8006c66 <_dtoa_r+0x36e>
 8006cc0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006cc4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006cc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 8087 	beq.w	8006dde <_dtoa_r+0x4e6>
 8006cd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4b6f      	ldr	r3, [pc, #444]	; (8006e94 <_dtoa_r+0x59c>)
 8006cd8:	f7f9 fee6 	bl	8000aa8 <__aeabi_dcmplt>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d07e      	beq.n	8006dde <_dtoa_r+0x4e6>
 8006ce0:	9b08      	ldr	r3, [sp, #32]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d07b      	beq.n	8006dde <_dtoa_r+0x4e6>
 8006ce6:	9b06      	ldr	r3, [sp, #24]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dd38      	ble.n	8006d5e <_dtoa_r+0x466>
 8006cec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4b69      	ldr	r3, [pc, #420]	; (8006e98 <_dtoa_r+0x5a0>)
 8006cf4:	f7f9 fc66 	bl	80005c4 <__aeabi_dmul>
 8006cf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cfc:	9c06      	ldr	r4, [sp, #24]
 8006cfe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006d02:	3701      	adds	r7, #1
 8006d04:	4638      	mov	r0, r7
 8006d06:	f7f9 fbf3 	bl	80004f0 <__aeabi_i2d>
 8006d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d0e:	f7f9 fc59 	bl	80005c4 <__aeabi_dmul>
 8006d12:	2200      	movs	r2, #0
 8006d14:	4b61      	ldr	r3, [pc, #388]	; (8006e9c <_dtoa_r+0x5a4>)
 8006d16:	f7f9 fa9f 	bl	8000258 <__adddf3>
 8006d1a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006d1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d22:	9611      	str	r6, [sp, #68]	; 0x44
 8006d24:	2c00      	cmp	r4, #0
 8006d26:	d15d      	bne.n	8006de4 <_dtoa_r+0x4ec>
 8006d28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	4b5c      	ldr	r3, [pc, #368]	; (8006ea0 <_dtoa_r+0x5a8>)
 8006d30:	f7f9 fa90 	bl	8000254 <__aeabi_dsub>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d3c:	4633      	mov	r3, r6
 8006d3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d40:	f7f9 fed0 	bl	8000ae4 <__aeabi_dcmpgt>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f040 8295 	bne.w	8007274 <_dtoa_r+0x97c>
 8006d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006d54:	f7f9 fea8 	bl	8000aa8 <__aeabi_dcmplt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f040 8289 	bne.w	8007270 <_dtoa_r+0x978>
 8006d5e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006d62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f2c0 8151 	blt.w	8007010 <_dtoa_r+0x718>
 8006d6e:	f1bb 0f0e 	cmp.w	fp, #14
 8006d72:	f300 814d 	bgt.w	8007010 <_dtoa_r+0x718>
 8006d76:	4b45      	ldr	r3, [pc, #276]	; (8006e8c <_dtoa_r+0x594>)
 8006d78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d80:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006d84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f280 80da 	bge.w	8006f40 <_dtoa_r+0x648>
 8006d8c:	9b08      	ldr	r3, [sp, #32]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f300 80d6 	bgt.w	8006f40 <_dtoa_r+0x648>
 8006d94:	f040 826b 	bne.w	800726e <_dtoa_r+0x976>
 8006d98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	4b40      	ldr	r3, [pc, #256]	; (8006ea0 <_dtoa_r+0x5a8>)
 8006da0:	f7f9 fc10 	bl	80005c4 <__aeabi_dmul>
 8006da4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006da8:	f7f9 fe92 	bl	8000ad0 <__aeabi_dcmpge>
 8006dac:	9c08      	ldr	r4, [sp, #32]
 8006dae:	4626      	mov	r6, r4
 8006db0:	2800      	cmp	r0, #0
 8006db2:	f040 8241 	bne.w	8007238 <_dtoa_r+0x940>
 8006db6:	2331      	movs	r3, #49	; 0x31
 8006db8:	9f03      	ldr	r7, [sp, #12]
 8006dba:	f10b 0b01 	add.w	fp, fp, #1
 8006dbe:	f807 3b01 	strb.w	r3, [r7], #1
 8006dc2:	e23d      	b.n	8007240 <_dtoa_r+0x948>
 8006dc4:	07e2      	lsls	r2, r4, #31
 8006dc6:	d505      	bpl.n	8006dd4 <_dtoa_r+0x4dc>
 8006dc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006dcc:	f7f9 fbfa 	bl	80005c4 <__aeabi_dmul>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	3701      	adds	r7, #1
 8006dd4:	1064      	asrs	r4, r4, #1
 8006dd6:	3608      	adds	r6, #8
 8006dd8:	e76d      	b.n	8006cb6 <_dtoa_r+0x3be>
 8006dda:	2702      	movs	r7, #2
 8006ddc:	e770      	b.n	8006cc0 <_dtoa_r+0x3c8>
 8006dde:	46d8      	mov	r8, fp
 8006de0:	9c08      	ldr	r4, [sp, #32]
 8006de2:	e78f      	b.n	8006d04 <_dtoa_r+0x40c>
 8006de4:	9903      	ldr	r1, [sp, #12]
 8006de6:	4b29      	ldr	r3, [pc, #164]	; (8006e8c <_dtoa_r+0x594>)
 8006de8:	4421      	add	r1, r4
 8006dea:	9112      	str	r1, [sp, #72]	; 0x48
 8006dec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006df2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006df6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dfa:	2900      	cmp	r1, #0
 8006dfc:	d054      	beq.n	8006ea8 <_dtoa_r+0x5b0>
 8006dfe:	2000      	movs	r0, #0
 8006e00:	4928      	ldr	r1, [pc, #160]	; (8006ea4 <_dtoa_r+0x5ac>)
 8006e02:	f7f9 fd09 	bl	8000818 <__aeabi_ddiv>
 8006e06:	463b      	mov	r3, r7
 8006e08:	4632      	mov	r2, r6
 8006e0a:	f7f9 fa23 	bl	8000254 <__aeabi_dsub>
 8006e0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e12:	9f03      	ldr	r7, [sp, #12]
 8006e14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e18:	f7f9 fe84 	bl	8000b24 <__aeabi_d2iz>
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	f7f9 fb67 	bl	80004f0 <__aeabi_i2d>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e2a:	f7f9 fa13 	bl	8000254 <__aeabi_dsub>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	3430      	adds	r4, #48	; 0x30
 8006e34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e3c:	f807 4b01 	strb.w	r4, [r7], #1
 8006e40:	f7f9 fe32 	bl	8000aa8 <__aeabi_dcmplt>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d173      	bne.n	8006f30 <_dtoa_r+0x638>
 8006e48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	4911      	ldr	r1, [pc, #68]	; (8006e94 <_dtoa_r+0x59c>)
 8006e50:	f7f9 fa00 	bl	8000254 <__aeabi_dsub>
 8006e54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e58:	f7f9 fe26 	bl	8000aa8 <__aeabi_dcmplt>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	f040 80b6 	bne.w	8006fce <_dtoa_r+0x6d6>
 8006e62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e64:	429f      	cmp	r7, r3
 8006e66:	f43f af7a 	beq.w	8006d5e <_dtoa_r+0x466>
 8006e6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e6e:	2200      	movs	r2, #0
 8006e70:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <_dtoa_r+0x5a0>)
 8006e72:	f7f9 fba7 	bl	80005c4 <__aeabi_dmul>
 8006e76:	2200      	movs	r2, #0
 8006e78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <_dtoa_r+0x5a0>)
 8006e82:	f7f9 fb9f 	bl	80005c4 <__aeabi_dmul>
 8006e86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e8a:	e7c3      	b.n	8006e14 <_dtoa_r+0x51c>
 8006e8c:	0800a8f0 	.word	0x0800a8f0
 8006e90:	0800a8c8 	.word	0x0800a8c8
 8006e94:	3ff00000 	.word	0x3ff00000
 8006e98:	40240000 	.word	0x40240000
 8006e9c:	401c0000 	.word	0x401c0000
 8006ea0:	40140000 	.word	0x40140000
 8006ea4:	3fe00000 	.word	0x3fe00000
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	4639      	mov	r1, r7
 8006eac:	f7f9 fb8a 	bl	80005c4 <__aeabi_dmul>
 8006eb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006eb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006eb6:	9c03      	ldr	r4, [sp, #12]
 8006eb8:	9314      	str	r3, [sp, #80]	; 0x50
 8006eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ebe:	f7f9 fe31 	bl	8000b24 <__aeabi_d2iz>
 8006ec2:	9015      	str	r0, [sp, #84]	; 0x54
 8006ec4:	f7f9 fb14 	bl	80004f0 <__aeabi_i2d>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ed0:	f7f9 f9c0 	bl	8000254 <__aeabi_dsub>
 8006ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	3330      	adds	r3, #48	; 0x30
 8006eda:	f804 3b01 	strb.w	r3, [r4], #1
 8006ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ee0:	460f      	mov	r7, r1
 8006ee2:	429c      	cmp	r4, r3
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	d124      	bne.n	8006f34 <_dtoa_r+0x63c>
 8006eea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006eee:	4baf      	ldr	r3, [pc, #700]	; (80071ac <_dtoa_r+0x8b4>)
 8006ef0:	f7f9 f9b2 	bl	8000258 <__adddf3>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4630      	mov	r0, r6
 8006efa:	4639      	mov	r1, r7
 8006efc:	f7f9 fdf2 	bl	8000ae4 <__aeabi_dcmpgt>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d163      	bne.n	8006fcc <_dtoa_r+0x6d4>
 8006f04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f08:	2000      	movs	r0, #0
 8006f0a:	49a8      	ldr	r1, [pc, #672]	; (80071ac <_dtoa_r+0x8b4>)
 8006f0c:	f7f9 f9a2 	bl	8000254 <__aeabi_dsub>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4630      	mov	r0, r6
 8006f16:	4639      	mov	r1, r7
 8006f18:	f7f9 fdc6 	bl	8000aa8 <__aeabi_dcmplt>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	f43f af1e 	beq.w	8006d5e <_dtoa_r+0x466>
 8006f22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006f24:	1e7b      	subs	r3, r7, #1
 8006f26:	9314      	str	r3, [sp, #80]	; 0x50
 8006f28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d0f8      	beq.n	8006f22 <_dtoa_r+0x62a>
 8006f30:	46c3      	mov	fp, r8
 8006f32:	e03b      	b.n	8006fac <_dtoa_r+0x6b4>
 8006f34:	4b9e      	ldr	r3, [pc, #632]	; (80071b0 <_dtoa_r+0x8b8>)
 8006f36:	f7f9 fb45 	bl	80005c4 <__aeabi_dmul>
 8006f3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f3e:	e7bc      	b.n	8006eba <_dtoa_r+0x5c2>
 8006f40:	9f03      	ldr	r7, [sp, #12]
 8006f42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006f46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	f7f9 fc63 	bl	8000818 <__aeabi_ddiv>
 8006f52:	f7f9 fde7 	bl	8000b24 <__aeabi_d2iz>
 8006f56:	4604      	mov	r4, r0
 8006f58:	f7f9 faca 	bl	80004f0 <__aeabi_i2d>
 8006f5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f60:	f7f9 fb30 	bl	80005c4 <__aeabi_dmul>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	f7f9 f972 	bl	8000254 <__aeabi_dsub>
 8006f70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006f74:	f807 6b01 	strb.w	r6, [r7], #1
 8006f78:	9e03      	ldr	r6, [sp, #12]
 8006f7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006f7e:	1bbe      	subs	r6, r7, r6
 8006f80:	45b4      	cmp	ip, r6
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	d136      	bne.n	8006ff6 <_dtoa_r+0x6fe>
 8006f88:	f7f9 f966 	bl	8000258 <__adddf3>
 8006f8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f90:	4680      	mov	r8, r0
 8006f92:	4689      	mov	r9, r1
 8006f94:	f7f9 fda6 	bl	8000ae4 <__aeabi_dcmpgt>
 8006f98:	bb58      	cbnz	r0, 8006ff2 <_dtoa_r+0x6fa>
 8006f9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	f7f9 fd77 	bl	8000a94 <__aeabi_dcmpeq>
 8006fa6:	b108      	cbz	r0, 8006fac <_dtoa_r+0x6b4>
 8006fa8:	07e3      	lsls	r3, r4, #31
 8006faa:	d422      	bmi.n	8006ff2 <_dtoa_r+0x6fa>
 8006fac:	4651      	mov	r1, sl
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f000 fbc2 	bl	8007738 <_Bfree>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006fb8:	703b      	strb	r3, [r7, #0]
 8006fba:	f10b 0301 	add.w	r3, fp, #1
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f43f ace6 	beq.w	8006994 <_dtoa_r+0x9c>
 8006fc8:	601f      	str	r7, [r3, #0]
 8006fca:	e4e3      	b.n	8006994 <_dtoa_r+0x9c>
 8006fcc:	4627      	mov	r7, r4
 8006fce:	463b      	mov	r3, r7
 8006fd0:	461f      	mov	r7, r3
 8006fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fd6:	2a39      	cmp	r2, #57	; 0x39
 8006fd8:	d107      	bne.n	8006fea <_dtoa_r+0x6f2>
 8006fda:	9a03      	ldr	r2, [sp, #12]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d1f7      	bne.n	8006fd0 <_dtoa_r+0x6d8>
 8006fe0:	2230      	movs	r2, #48	; 0x30
 8006fe2:	9903      	ldr	r1, [sp, #12]
 8006fe4:	f108 0801 	add.w	r8, r8, #1
 8006fe8:	700a      	strb	r2, [r1, #0]
 8006fea:	781a      	ldrb	r2, [r3, #0]
 8006fec:	3201      	adds	r2, #1
 8006fee:	701a      	strb	r2, [r3, #0]
 8006ff0:	e79e      	b.n	8006f30 <_dtoa_r+0x638>
 8006ff2:	46d8      	mov	r8, fp
 8006ff4:	e7eb      	b.n	8006fce <_dtoa_r+0x6d6>
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	4b6d      	ldr	r3, [pc, #436]	; (80071b0 <_dtoa_r+0x8b8>)
 8006ffa:	f7f9 fae3 	bl	80005c4 <__aeabi_dmul>
 8006ffe:	2200      	movs	r2, #0
 8007000:	2300      	movs	r3, #0
 8007002:	4680      	mov	r8, r0
 8007004:	4689      	mov	r9, r1
 8007006:	f7f9 fd45 	bl	8000a94 <__aeabi_dcmpeq>
 800700a:	2800      	cmp	r0, #0
 800700c:	d09b      	beq.n	8006f46 <_dtoa_r+0x64e>
 800700e:	e7cd      	b.n	8006fac <_dtoa_r+0x6b4>
 8007010:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007012:	2a00      	cmp	r2, #0
 8007014:	f000 80c4 	beq.w	80071a0 <_dtoa_r+0x8a8>
 8007018:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800701a:	2a01      	cmp	r2, #1
 800701c:	f300 80a8 	bgt.w	8007170 <_dtoa_r+0x878>
 8007020:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007022:	2a00      	cmp	r2, #0
 8007024:	f000 80a0 	beq.w	8007168 <_dtoa_r+0x870>
 8007028:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800702c:	464f      	mov	r7, r9
 800702e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007032:	2101      	movs	r1, #1
 8007034:	441a      	add	r2, r3
 8007036:	4628      	mov	r0, r5
 8007038:	4499      	add	r9, r3
 800703a:	9209      	str	r2, [sp, #36]	; 0x24
 800703c:	f000 fc7c 	bl	8007938 <__i2b>
 8007040:	4606      	mov	r6, r0
 8007042:	b15f      	cbz	r7, 800705c <_dtoa_r+0x764>
 8007044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007046:	2b00      	cmp	r3, #0
 8007048:	dd08      	ble.n	800705c <_dtoa_r+0x764>
 800704a:	42bb      	cmp	r3, r7
 800704c:	bfa8      	it	ge
 800704e:	463b      	movge	r3, r7
 8007050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007052:	eba9 0903 	sub.w	r9, r9, r3
 8007056:	1aff      	subs	r7, r7, r3
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	9309      	str	r3, [sp, #36]	; 0x24
 800705c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800705e:	b1f3      	cbz	r3, 800709e <_dtoa_r+0x7a6>
 8007060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 80a0 	beq.w	80071a8 <_dtoa_r+0x8b0>
 8007068:	2c00      	cmp	r4, #0
 800706a:	dd10      	ble.n	800708e <_dtoa_r+0x796>
 800706c:	4631      	mov	r1, r6
 800706e:	4622      	mov	r2, r4
 8007070:	4628      	mov	r0, r5
 8007072:	f000 fd1f 	bl	8007ab4 <__pow5mult>
 8007076:	4652      	mov	r2, sl
 8007078:	4601      	mov	r1, r0
 800707a:	4606      	mov	r6, r0
 800707c:	4628      	mov	r0, r5
 800707e:	f000 fc71 	bl	8007964 <__multiply>
 8007082:	4680      	mov	r8, r0
 8007084:	4651      	mov	r1, sl
 8007086:	4628      	mov	r0, r5
 8007088:	f000 fb56 	bl	8007738 <_Bfree>
 800708c:	46c2      	mov	sl, r8
 800708e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007090:	1b1a      	subs	r2, r3, r4
 8007092:	d004      	beq.n	800709e <_dtoa_r+0x7a6>
 8007094:	4651      	mov	r1, sl
 8007096:	4628      	mov	r0, r5
 8007098:	f000 fd0c 	bl	8007ab4 <__pow5mult>
 800709c:	4682      	mov	sl, r0
 800709e:	2101      	movs	r1, #1
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 fc49 	bl	8007938 <__i2b>
 80070a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070a8:	4604      	mov	r4, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f340 8082 	ble.w	80071b4 <_dtoa_r+0x8bc>
 80070b0:	461a      	mov	r2, r3
 80070b2:	4601      	mov	r1, r0
 80070b4:	4628      	mov	r0, r5
 80070b6:	f000 fcfd 	bl	8007ab4 <__pow5mult>
 80070ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070bc:	4604      	mov	r4, r0
 80070be:	2b01      	cmp	r3, #1
 80070c0:	dd7b      	ble.n	80071ba <_dtoa_r+0x8c2>
 80070c2:	f04f 0800 	mov.w	r8, #0
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070cc:	6918      	ldr	r0, [r3, #16]
 80070ce:	f000 fbe5 	bl	800789c <__hi0bits>
 80070d2:	f1c0 0020 	rsb	r0, r0, #32
 80070d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d8:	4418      	add	r0, r3
 80070da:	f010 001f 	ands.w	r0, r0, #31
 80070de:	f000 8092 	beq.w	8007206 <_dtoa_r+0x90e>
 80070e2:	f1c0 0320 	rsb	r3, r0, #32
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	f340 8085 	ble.w	80071f6 <_dtoa_r+0x8fe>
 80070ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ee:	f1c0 001c 	rsb	r0, r0, #28
 80070f2:	4403      	add	r3, r0
 80070f4:	4481      	add	r9, r0
 80070f6:	4407      	add	r7, r0
 80070f8:	9309      	str	r3, [sp, #36]	; 0x24
 80070fa:	f1b9 0f00 	cmp.w	r9, #0
 80070fe:	dd05      	ble.n	800710c <_dtoa_r+0x814>
 8007100:	4651      	mov	r1, sl
 8007102:	464a      	mov	r2, r9
 8007104:	4628      	mov	r0, r5
 8007106:	f000 fd2f 	bl	8007b68 <__lshift>
 800710a:	4682      	mov	sl, r0
 800710c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710e:	2b00      	cmp	r3, #0
 8007110:	dd05      	ble.n	800711e <_dtoa_r+0x826>
 8007112:	4621      	mov	r1, r4
 8007114:	461a      	mov	r2, r3
 8007116:	4628      	mov	r0, r5
 8007118:	f000 fd26 	bl	8007b68 <__lshift>
 800711c:	4604      	mov	r4, r0
 800711e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d072      	beq.n	800720a <_dtoa_r+0x912>
 8007124:	4621      	mov	r1, r4
 8007126:	4650      	mov	r0, sl
 8007128:	f000 fd8a 	bl	8007c40 <__mcmp>
 800712c:	2800      	cmp	r0, #0
 800712e:	da6c      	bge.n	800720a <_dtoa_r+0x912>
 8007130:	2300      	movs	r3, #0
 8007132:	4651      	mov	r1, sl
 8007134:	220a      	movs	r2, #10
 8007136:	4628      	mov	r0, r5
 8007138:	f000 fb20 	bl	800777c <__multadd>
 800713c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800713e:	4682      	mov	sl, r0
 8007140:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 81ac 	beq.w	80074a2 <_dtoa_r+0xbaa>
 800714a:	2300      	movs	r3, #0
 800714c:	4631      	mov	r1, r6
 800714e:	220a      	movs	r2, #10
 8007150:	4628      	mov	r0, r5
 8007152:	f000 fb13 	bl	800777c <__multadd>
 8007156:	9b06      	ldr	r3, [sp, #24]
 8007158:	4606      	mov	r6, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	f300 8093 	bgt.w	8007286 <_dtoa_r+0x98e>
 8007160:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007162:	2b02      	cmp	r3, #2
 8007164:	dc59      	bgt.n	800721a <_dtoa_r+0x922>
 8007166:	e08e      	b.n	8007286 <_dtoa_r+0x98e>
 8007168:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800716a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800716e:	e75d      	b.n	800702c <_dtoa_r+0x734>
 8007170:	9b08      	ldr	r3, [sp, #32]
 8007172:	1e5c      	subs	r4, r3, #1
 8007174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007176:	42a3      	cmp	r3, r4
 8007178:	bfbf      	itttt	lt
 800717a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800717c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800717e:	1ae3      	sublt	r3, r4, r3
 8007180:	18d2      	addlt	r2, r2, r3
 8007182:	bfa8      	it	ge
 8007184:	1b1c      	subge	r4, r3, r4
 8007186:	9b08      	ldr	r3, [sp, #32]
 8007188:	bfbe      	ittt	lt
 800718a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800718c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800718e:	2400      	movlt	r4, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	bfb5      	itete	lt
 8007194:	eba9 0703 	sublt.w	r7, r9, r3
 8007198:	464f      	movge	r7, r9
 800719a:	2300      	movlt	r3, #0
 800719c:	9b08      	ldrge	r3, [sp, #32]
 800719e:	e747      	b.n	8007030 <_dtoa_r+0x738>
 80071a0:	464f      	mov	r7, r9
 80071a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80071a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80071a6:	e74c      	b.n	8007042 <_dtoa_r+0x74a>
 80071a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071aa:	e773      	b.n	8007094 <_dtoa_r+0x79c>
 80071ac:	3fe00000 	.word	0x3fe00000
 80071b0:	40240000 	.word	0x40240000
 80071b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	dc18      	bgt.n	80071ec <_dtoa_r+0x8f4>
 80071ba:	9b04      	ldr	r3, [sp, #16]
 80071bc:	b9b3      	cbnz	r3, 80071ec <_dtoa_r+0x8f4>
 80071be:	9b05      	ldr	r3, [sp, #20]
 80071c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071c4:	b993      	cbnz	r3, 80071ec <_dtoa_r+0x8f4>
 80071c6:	9b05      	ldr	r3, [sp, #20]
 80071c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071cc:	0d1b      	lsrs	r3, r3, #20
 80071ce:	051b      	lsls	r3, r3, #20
 80071d0:	b17b      	cbz	r3, 80071f2 <_dtoa_r+0x8fa>
 80071d2:	f04f 0801 	mov.w	r8, #1
 80071d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d8:	f109 0901 	add.w	r9, r9, #1
 80071dc:	3301      	adds	r3, #1
 80071de:	9309      	str	r3, [sp, #36]	; 0x24
 80071e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f47f af6f 	bne.w	80070c6 <_dtoa_r+0x7ce>
 80071e8:	2001      	movs	r0, #1
 80071ea:	e774      	b.n	80070d6 <_dtoa_r+0x7de>
 80071ec:	f04f 0800 	mov.w	r8, #0
 80071f0:	e7f6      	b.n	80071e0 <_dtoa_r+0x8e8>
 80071f2:	4698      	mov	r8, r3
 80071f4:	e7f4      	b.n	80071e0 <_dtoa_r+0x8e8>
 80071f6:	d080      	beq.n	80070fa <_dtoa_r+0x802>
 80071f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071fa:	331c      	adds	r3, #28
 80071fc:	441a      	add	r2, r3
 80071fe:	4499      	add	r9, r3
 8007200:	441f      	add	r7, r3
 8007202:	9209      	str	r2, [sp, #36]	; 0x24
 8007204:	e779      	b.n	80070fa <_dtoa_r+0x802>
 8007206:	4603      	mov	r3, r0
 8007208:	e7f6      	b.n	80071f8 <_dtoa_r+0x900>
 800720a:	9b08      	ldr	r3, [sp, #32]
 800720c:	2b00      	cmp	r3, #0
 800720e:	dc34      	bgt.n	800727a <_dtoa_r+0x982>
 8007210:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007212:	2b02      	cmp	r3, #2
 8007214:	dd31      	ble.n	800727a <_dtoa_r+0x982>
 8007216:	9b08      	ldr	r3, [sp, #32]
 8007218:	9306      	str	r3, [sp, #24]
 800721a:	9b06      	ldr	r3, [sp, #24]
 800721c:	b963      	cbnz	r3, 8007238 <_dtoa_r+0x940>
 800721e:	4621      	mov	r1, r4
 8007220:	2205      	movs	r2, #5
 8007222:	4628      	mov	r0, r5
 8007224:	f000 faaa 	bl	800777c <__multadd>
 8007228:	4601      	mov	r1, r0
 800722a:	4604      	mov	r4, r0
 800722c:	4650      	mov	r0, sl
 800722e:	f000 fd07 	bl	8007c40 <__mcmp>
 8007232:	2800      	cmp	r0, #0
 8007234:	f73f adbf 	bgt.w	8006db6 <_dtoa_r+0x4be>
 8007238:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800723a:	9f03      	ldr	r7, [sp, #12]
 800723c:	ea6f 0b03 	mvn.w	fp, r3
 8007240:	f04f 0800 	mov.w	r8, #0
 8007244:	4621      	mov	r1, r4
 8007246:	4628      	mov	r0, r5
 8007248:	f000 fa76 	bl	8007738 <_Bfree>
 800724c:	2e00      	cmp	r6, #0
 800724e:	f43f aead 	beq.w	8006fac <_dtoa_r+0x6b4>
 8007252:	f1b8 0f00 	cmp.w	r8, #0
 8007256:	d005      	beq.n	8007264 <_dtoa_r+0x96c>
 8007258:	45b0      	cmp	r8, r6
 800725a:	d003      	beq.n	8007264 <_dtoa_r+0x96c>
 800725c:	4641      	mov	r1, r8
 800725e:	4628      	mov	r0, r5
 8007260:	f000 fa6a 	bl	8007738 <_Bfree>
 8007264:	4631      	mov	r1, r6
 8007266:	4628      	mov	r0, r5
 8007268:	f000 fa66 	bl	8007738 <_Bfree>
 800726c:	e69e      	b.n	8006fac <_dtoa_r+0x6b4>
 800726e:	2400      	movs	r4, #0
 8007270:	4626      	mov	r6, r4
 8007272:	e7e1      	b.n	8007238 <_dtoa_r+0x940>
 8007274:	46c3      	mov	fp, r8
 8007276:	4626      	mov	r6, r4
 8007278:	e59d      	b.n	8006db6 <_dtoa_r+0x4be>
 800727a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 80c8 	beq.w	8007412 <_dtoa_r+0xb1a>
 8007282:	9b08      	ldr	r3, [sp, #32]
 8007284:	9306      	str	r3, [sp, #24]
 8007286:	2f00      	cmp	r7, #0
 8007288:	dd05      	ble.n	8007296 <_dtoa_r+0x99e>
 800728a:	4631      	mov	r1, r6
 800728c:	463a      	mov	r2, r7
 800728e:	4628      	mov	r0, r5
 8007290:	f000 fc6a 	bl	8007b68 <__lshift>
 8007294:	4606      	mov	r6, r0
 8007296:	f1b8 0f00 	cmp.w	r8, #0
 800729a:	d05b      	beq.n	8007354 <_dtoa_r+0xa5c>
 800729c:	4628      	mov	r0, r5
 800729e:	6871      	ldr	r1, [r6, #4]
 80072a0:	f000 fa0a 	bl	80076b8 <_Balloc>
 80072a4:	4607      	mov	r7, r0
 80072a6:	b928      	cbnz	r0, 80072b4 <_dtoa_r+0x9bc>
 80072a8:	4602      	mov	r2, r0
 80072aa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80072ae:	4b81      	ldr	r3, [pc, #516]	; (80074b4 <_dtoa_r+0xbbc>)
 80072b0:	f7ff bb36 	b.w	8006920 <_dtoa_r+0x28>
 80072b4:	6932      	ldr	r2, [r6, #16]
 80072b6:	f106 010c 	add.w	r1, r6, #12
 80072ba:	3202      	adds	r2, #2
 80072bc:	0092      	lsls	r2, r2, #2
 80072be:	300c      	adds	r0, #12
 80072c0:	f002 fb02 	bl	80098c8 <memcpy>
 80072c4:	2201      	movs	r2, #1
 80072c6:	4639      	mov	r1, r7
 80072c8:	4628      	mov	r0, r5
 80072ca:	f000 fc4d 	bl	8007b68 <__lshift>
 80072ce:	46b0      	mov	r8, r6
 80072d0:	4606      	mov	r6, r0
 80072d2:	9b03      	ldr	r3, [sp, #12]
 80072d4:	9a03      	ldr	r2, [sp, #12]
 80072d6:	3301      	adds	r3, #1
 80072d8:	9308      	str	r3, [sp, #32]
 80072da:	9b06      	ldr	r3, [sp, #24]
 80072dc:	4413      	add	r3, r2
 80072de:	930b      	str	r3, [sp, #44]	; 0x2c
 80072e0:	9b04      	ldr	r3, [sp, #16]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	930a      	str	r3, [sp, #40]	; 0x28
 80072e8:	9b08      	ldr	r3, [sp, #32]
 80072ea:	4621      	mov	r1, r4
 80072ec:	3b01      	subs	r3, #1
 80072ee:	4650      	mov	r0, sl
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	f7ff fa77 	bl	80067e4 <quorem>
 80072f6:	4641      	mov	r1, r8
 80072f8:	9006      	str	r0, [sp, #24]
 80072fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80072fe:	4650      	mov	r0, sl
 8007300:	f000 fc9e 	bl	8007c40 <__mcmp>
 8007304:	4632      	mov	r2, r6
 8007306:	9009      	str	r0, [sp, #36]	; 0x24
 8007308:	4621      	mov	r1, r4
 800730a:	4628      	mov	r0, r5
 800730c:	f000 fcb4 	bl	8007c78 <__mdiff>
 8007310:	68c2      	ldr	r2, [r0, #12]
 8007312:	4607      	mov	r7, r0
 8007314:	bb02      	cbnz	r2, 8007358 <_dtoa_r+0xa60>
 8007316:	4601      	mov	r1, r0
 8007318:	4650      	mov	r0, sl
 800731a:	f000 fc91 	bl	8007c40 <__mcmp>
 800731e:	4602      	mov	r2, r0
 8007320:	4639      	mov	r1, r7
 8007322:	4628      	mov	r0, r5
 8007324:	920c      	str	r2, [sp, #48]	; 0x30
 8007326:	f000 fa07 	bl	8007738 <_Bfree>
 800732a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800732c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800732e:	9f08      	ldr	r7, [sp, #32]
 8007330:	ea43 0102 	orr.w	r1, r3, r2
 8007334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007336:	4319      	orrs	r1, r3
 8007338:	d110      	bne.n	800735c <_dtoa_r+0xa64>
 800733a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800733e:	d029      	beq.n	8007394 <_dtoa_r+0xa9c>
 8007340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007342:	2b00      	cmp	r3, #0
 8007344:	dd02      	ble.n	800734c <_dtoa_r+0xa54>
 8007346:	9b06      	ldr	r3, [sp, #24]
 8007348:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800734c:	9b04      	ldr	r3, [sp, #16]
 800734e:	f883 9000 	strb.w	r9, [r3]
 8007352:	e777      	b.n	8007244 <_dtoa_r+0x94c>
 8007354:	4630      	mov	r0, r6
 8007356:	e7ba      	b.n	80072ce <_dtoa_r+0x9d6>
 8007358:	2201      	movs	r2, #1
 800735a:	e7e1      	b.n	8007320 <_dtoa_r+0xa28>
 800735c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	db04      	blt.n	800736c <_dtoa_r+0xa74>
 8007362:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007364:	430b      	orrs	r3, r1
 8007366:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007368:	430b      	orrs	r3, r1
 800736a:	d120      	bne.n	80073ae <_dtoa_r+0xab6>
 800736c:	2a00      	cmp	r2, #0
 800736e:	dded      	ble.n	800734c <_dtoa_r+0xa54>
 8007370:	4651      	mov	r1, sl
 8007372:	2201      	movs	r2, #1
 8007374:	4628      	mov	r0, r5
 8007376:	f000 fbf7 	bl	8007b68 <__lshift>
 800737a:	4621      	mov	r1, r4
 800737c:	4682      	mov	sl, r0
 800737e:	f000 fc5f 	bl	8007c40 <__mcmp>
 8007382:	2800      	cmp	r0, #0
 8007384:	dc03      	bgt.n	800738e <_dtoa_r+0xa96>
 8007386:	d1e1      	bne.n	800734c <_dtoa_r+0xa54>
 8007388:	f019 0f01 	tst.w	r9, #1
 800738c:	d0de      	beq.n	800734c <_dtoa_r+0xa54>
 800738e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007392:	d1d8      	bne.n	8007346 <_dtoa_r+0xa4e>
 8007394:	2339      	movs	r3, #57	; 0x39
 8007396:	9a04      	ldr	r2, [sp, #16]
 8007398:	7013      	strb	r3, [r2, #0]
 800739a:	463b      	mov	r3, r7
 800739c:	461f      	mov	r7, r3
 800739e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	2a39      	cmp	r2, #57	; 0x39
 80073a6:	d06b      	beq.n	8007480 <_dtoa_r+0xb88>
 80073a8:	3201      	adds	r2, #1
 80073aa:	701a      	strb	r2, [r3, #0]
 80073ac:	e74a      	b.n	8007244 <_dtoa_r+0x94c>
 80073ae:	2a00      	cmp	r2, #0
 80073b0:	dd07      	ble.n	80073c2 <_dtoa_r+0xaca>
 80073b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073b6:	d0ed      	beq.n	8007394 <_dtoa_r+0xa9c>
 80073b8:	9a04      	ldr	r2, [sp, #16]
 80073ba:	f109 0301 	add.w	r3, r9, #1
 80073be:	7013      	strb	r3, [r2, #0]
 80073c0:	e740      	b.n	8007244 <_dtoa_r+0x94c>
 80073c2:	9b08      	ldr	r3, [sp, #32]
 80073c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073c6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d042      	beq.n	8007454 <_dtoa_r+0xb5c>
 80073ce:	4651      	mov	r1, sl
 80073d0:	2300      	movs	r3, #0
 80073d2:	220a      	movs	r2, #10
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 f9d1 	bl	800777c <__multadd>
 80073da:	45b0      	cmp	r8, r6
 80073dc:	4682      	mov	sl, r0
 80073de:	f04f 0300 	mov.w	r3, #0
 80073e2:	f04f 020a 	mov.w	r2, #10
 80073e6:	4641      	mov	r1, r8
 80073e8:	4628      	mov	r0, r5
 80073ea:	d107      	bne.n	80073fc <_dtoa_r+0xb04>
 80073ec:	f000 f9c6 	bl	800777c <__multadd>
 80073f0:	4680      	mov	r8, r0
 80073f2:	4606      	mov	r6, r0
 80073f4:	9b08      	ldr	r3, [sp, #32]
 80073f6:	3301      	adds	r3, #1
 80073f8:	9308      	str	r3, [sp, #32]
 80073fa:	e775      	b.n	80072e8 <_dtoa_r+0x9f0>
 80073fc:	f000 f9be 	bl	800777c <__multadd>
 8007400:	4631      	mov	r1, r6
 8007402:	4680      	mov	r8, r0
 8007404:	2300      	movs	r3, #0
 8007406:	220a      	movs	r2, #10
 8007408:	4628      	mov	r0, r5
 800740a:	f000 f9b7 	bl	800777c <__multadd>
 800740e:	4606      	mov	r6, r0
 8007410:	e7f0      	b.n	80073f4 <_dtoa_r+0xafc>
 8007412:	9b08      	ldr	r3, [sp, #32]
 8007414:	9306      	str	r3, [sp, #24]
 8007416:	9f03      	ldr	r7, [sp, #12]
 8007418:	4621      	mov	r1, r4
 800741a:	4650      	mov	r0, sl
 800741c:	f7ff f9e2 	bl	80067e4 <quorem>
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007426:	f807 9b01 	strb.w	r9, [r7], #1
 800742a:	1afa      	subs	r2, r7, r3
 800742c:	9b06      	ldr	r3, [sp, #24]
 800742e:	4293      	cmp	r3, r2
 8007430:	dd07      	ble.n	8007442 <_dtoa_r+0xb4a>
 8007432:	4651      	mov	r1, sl
 8007434:	2300      	movs	r3, #0
 8007436:	220a      	movs	r2, #10
 8007438:	4628      	mov	r0, r5
 800743a:	f000 f99f 	bl	800777c <__multadd>
 800743e:	4682      	mov	sl, r0
 8007440:	e7ea      	b.n	8007418 <_dtoa_r+0xb20>
 8007442:	9b06      	ldr	r3, [sp, #24]
 8007444:	f04f 0800 	mov.w	r8, #0
 8007448:	2b00      	cmp	r3, #0
 800744a:	bfcc      	ite	gt
 800744c:	461f      	movgt	r7, r3
 800744e:	2701      	movle	r7, #1
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	441f      	add	r7, r3
 8007454:	4651      	mov	r1, sl
 8007456:	2201      	movs	r2, #1
 8007458:	4628      	mov	r0, r5
 800745a:	f000 fb85 	bl	8007b68 <__lshift>
 800745e:	4621      	mov	r1, r4
 8007460:	4682      	mov	sl, r0
 8007462:	f000 fbed 	bl	8007c40 <__mcmp>
 8007466:	2800      	cmp	r0, #0
 8007468:	dc97      	bgt.n	800739a <_dtoa_r+0xaa2>
 800746a:	d102      	bne.n	8007472 <_dtoa_r+0xb7a>
 800746c:	f019 0f01 	tst.w	r9, #1
 8007470:	d193      	bne.n	800739a <_dtoa_r+0xaa2>
 8007472:	463b      	mov	r3, r7
 8007474:	461f      	mov	r7, r3
 8007476:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800747a:	2a30      	cmp	r2, #48	; 0x30
 800747c:	d0fa      	beq.n	8007474 <_dtoa_r+0xb7c>
 800747e:	e6e1      	b.n	8007244 <_dtoa_r+0x94c>
 8007480:	9a03      	ldr	r2, [sp, #12]
 8007482:	429a      	cmp	r2, r3
 8007484:	d18a      	bne.n	800739c <_dtoa_r+0xaa4>
 8007486:	2331      	movs	r3, #49	; 0x31
 8007488:	f10b 0b01 	add.w	fp, fp, #1
 800748c:	e797      	b.n	80073be <_dtoa_r+0xac6>
 800748e:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <_dtoa_r+0xbc0>)
 8007490:	f7ff ba9f 	b.w	80069d2 <_dtoa_r+0xda>
 8007494:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007496:	2b00      	cmp	r3, #0
 8007498:	f47f aa77 	bne.w	800698a <_dtoa_r+0x92>
 800749c:	4b07      	ldr	r3, [pc, #28]	; (80074bc <_dtoa_r+0xbc4>)
 800749e:	f7ff ba98 	b.w	80069d2 <_dtoa_r+0xda>
 80074a2:	9b06      	ldr	r3, [sp, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	dcb6      	bgt.n	8007416 <_dtoa_r+0xb1e>
 80074a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	f73f aeb5 	bgt.w	800721a <_dtoa_r+0x922>
 80074b0:	e7b1      	b.n	8007416 <_dtoa_r+0xb1e>
 80074b2:	bf00      	nop
 80074b4:	0800a85d 	.word	0x0800a85d
 80074b8:	0800ab40 	.word	0x0800ab40
 80074bc:	0800a7e1 	.word	0x0800a7e1

080074c0 <_free_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4605      	mov	r5, r0
 80074c4:	2900      	cmp	r1, #0
 80074c6:	d040      	beq.n	800754a <_free_r+0x8a>
 80074c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074cc:	1f0c      	subs	r4, r1, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bfb8      	it	lt
 80074d2:	18e4      	addlt	r4, r4, r3
 80074d4:	f000 f8e4 	bl	80076a0 <__malloc_lock>
 80074d8:	4a1c      	ldr	r2, [pc, #112]	; (800754c <_free_r+0x8c>)
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	b933      	cbnz	r3, 80074ec <_free_r+0x2c>
 80074de:	6063      	str	r3, [r4, #4]
 80074e0:	6014      	str	r4, [r2, #0]
 80074e2:	4628      	mov	r0, r5
 80074e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074e8:	f000 b8e0 	b.w	80076ac <__malloc_unlock>
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	d908      	bls.n	8007502 <_free_r+0x42>
 80074f0:	6820      	ldr	r0, [r4, #0]
 80074f2:	1821      	adds	r1, r4, r0
 80074f4:	428b      	cmp	r3, r1
 80074f6:	bf01      	itttt	eq
 80074f8:	6819      	ldreq	r1, [r3, #0]
 80074fa:	685b      	ldreq	r3, [r3, #4]
 80074fc:	1809      	addeq	r1, r1, r0
 80074fe:	6021      	streq	r1, [r4, #0]
 8007500:	e7ed      	b.n	80074de <_free_r+0x1e>
 8007502:	461a      	mov	r2, r3
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	b10b      	cbz	r3, 800750c <_free_r+0x4c>
 8007508:	42a3      	cmp	r3, r4
 800750a:	d9fa      	bls.n	8007502 <_free_r+0x42>
 800750c:	6811      	ldr	r1, [r2, #0]
 800750e:	1850      	adds	r0, r2, r1
 8007510:	42a0      	cmp	r0, r4
 8007512:	d10b      	bne.n	800752c <_free_r+0x6c>
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	4401      	add	r1, r0
 8007518:	1850      	adds	r0, r2, r1
 800751a:	4283      	cmp	r3, r0
 800751c:	6011      	str	r1, [r2, #0]
 800751e:	d1e0      	bne.n	80074e2 <_free_r+0x22>
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	4408      	add	r0, r1
 8007526:	6010      	str	r0, [r2, #0]
 8007528:	6053      	str	r3, [r2, #4]
 800752a:	e7da      	b.n	80074e2 <_free_r+0x22>
 800752c:	d902      	bls.n	8007534 <_free_r+0x74>
 800752e:	230c      	movs	r3, #12
 8007530:	602b      	str	r3, [r5, #0]
 8007532:	e7d6      	b.n	80074e2 <_free_r+0x22>
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	1821      	adds	r1, r4, r0
 8007538:	428b      	cmp	r3, r1
 800753a:	bf01      	itttt	eq
 800753c:	6819      	ldreq	r1, [r3, #0]
 800753e:	685b      	ldreq	r3, [r3, #4]
 8007540:	1809      	addeq	r1, r1, r0
 8007542:	6021      	streq	r1, [r4, #0]
 8007544:	6063      	str	r3, [r4, #4]
 8007546:	6054      	str	r4, [r2, #4]
 8007548:	e7cb      	b.n	80074e2 <_free_r+0x22>
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	200007dc 	.word	0x200007dc

08007550 <malloc>:
 8007550:	4b02      	ldr	r3, [pc, #8]	; (800755c <malloc+0xc>)
 8007552:	4601      	mov	r1, r0
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	f000 b823 	b.w	80075a0 <_malloc_r>
 800755a:	bf00      	nop
 800755c:	20000064 	.word	0x20000064

08007560 <sbrk_aligned>:
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	4e0e      	ldr	r6, [pc, #56]	; (800759c <sbrk_aligned+0x3c>)
 8007564:	460c      	mov	r4, r1
 8007566:	6831      	ldr	r1, [r6, #0]
 8007568:	4605      	mov	r5, r0
 800756a:	b911      	cbnz	r1, 8007572 <sbrk_aligned+0x12>
 800756c:	f002 f99c 	bl	80098a8 <_sbrk_r>
 8007570:	6030      	str	r0, [r6, #0]
 8007572:	4621      	mov	r1, r4
 8007574:	4628      	mov	r0, r5
 8007576:	f002 f997 	bl	80098a8 <_sbrk_r>
 800757a:	1c43      	adds	r3, r0, #1
 800757c:	d00a      	beq.n	8007594 <sbrk_aligned+0x34>
 800757e:	1cc4      	adds	r4, r0, #3
 8007580:	f024 0403 	bic.w	r4, r4, #3
 8007584:	42a0      	cmp	r0, r4
 8007586:	d007      	beq.n	8007598 <sbrk_aligned+0x38>
 8007588:	1a21      	subs	r1, r4, r0
 800758a:	4628      	mov	r0, r5
 800758c:	f002 f98c 	bl	80098a8 <_sbrk_r>
 8007590:	3001      	adds	r0, #1
 8007592:	d101      	bne.n	8007598 <sbrk_aligned+0x38>
 8007594:	f04f 34ff 	mov.w	r4, #4294967295
 8007598:	4620      	mov	r0, r4
 800759a:	bd70      	pop	{r4, r5, r6, pc}
 800759c:	200007e0 	.word	0x200007e0

080075a0 <_malloc_r>:
 80075a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a4:	1ccd      	adds	r5, r1, #3
 80075a6:	f025 0503 	bic.w	r5, r5, #3
 80075aa:	3508      	adds	r5, #8
 80075ac:	2d0c      	cmp	r5, #12
 80075ae:	bf38      	it	cc
 80075b0:	250c      	movcc	r5, #12
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	4607      	mov	r7, r0
 80075b6:	db01      	blt.n	80075bc <_malloc_r+0x1c>
 80075b8:	42a9      	cmp	r1, r5
 80075ba:	d905      	bls.n	80075c8 <_malloc_r+0x28>
 80075bc:	230c      	movs	r3, #12
 80075be:	2600      	movs	r6, #0
 80075c0:	603b      	str	r3, [r7, #0]
 80075c2:	4630      	mov	r0, r6
 80075c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800769c <_malloc_r+0xfc>
 80075cc:	f000 f868 	bl	80076a0 <__malloc_lock>
 80075d0:	f8d8 3000 	ldr.w	r3, [r8]
 80075d4:	461c      	mov	r4, r3
 80075d6:	bb5c      	cbnz	r4, 8007630 <_malloc_r+0x90>
 80075d8:	4629      	mov	r1, r5
 80075da:	4638      	mov	r0, r7
 80075dc:	f7ff ffc0 	bl	8007560 <sbrk_aligned>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	4604      	mov	r4, r0
 80075e4:	d155      	bne.n	8007692 <_malloc_r+0xf2>
 80075e6:	f8d8 4000 	ldr.w	r4, [r8]
 80075ea:	4626      	mov	r6, r4
 80075ec:	2e00      	cmp	r6, #0
 80075ee:	d145      	bne.n	800767c <_malloc_r+0xdc>
 80075f0:	2c00      	cmp	r4, #0
 80075f2:	d048      	beq.n	8007686 <_malloc_r+0xe6>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	4631      	mov	r1, r6
 80075f8:	4638      	mov	r0, r7
 80075fa:	eb04 0903 	add.w	r9, r4, r3
 80075fe:	f002 f953 	bl	80098a8 <_sbrk_r>
 8007602:	4581      	cmp	r9, r0
 8007604:	d13f      	bne.n	8007686 <_malloc_r+0xe6>
 8007606:	6821      	ldr	r1, [r4, #0]
 8007608:	4638      	mov	r0, r7
 800760a:	1a6d      	subs	r5, r5, r1
 800760c:	4629      	mov	r1, r5
 800760e:	f7ff ffa7 	bl	8007560 <sbrk_aligned>
 8007612:	3001      	adds	r0, #1
 8007614:	d037      	beq.n	8007686 <_malloc_r+0xe6>
 8007616:	6823      	ldr	r3, [r4, #0]
 8007618:	442b      	add	r3, r5
 800761a:	6023      	str	r3, [r4, #0]
 800761c:	f8d8 3000 	ldr.w	r3, [r8]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d038      	beq.n	8007696 <_malloc_r+0xf6>
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	42a2      	cmp	r2, r4
 8007628:	d12b      	bne.n	8007682 <_malloc_r+0xe2>
 800762a:	2200      	movs	r2, #0
 800762c:	605a      	str	r2, [r3, #4]
 800762e:	e00f      	b.n	8007650 <_malloc_r+0xb0>
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	1b52      	subs	r2, r2, r5
 8007634:	d41f      	bmi.n	8007676 <_malloc_r+0xd6>
 8007636:	2a0b      	cmp	r2, #11
 8007638:	d917      	bls.n	800766a <_malloc_r+0xca>
 800763a:	1961      	adds	r1, r4, r5
 800763c:	42a3      	cmp	r3, r4
 800763e:	6025      	str	r5, [r4, #0]
 8007640:	bf18      	it	ne
 8007642:	6059      	strne	r1, [r3, #4]
 8007644:	6863      	ldr	r3, [r4, #4]
 8007646:	bf08      	it	eq
 8007648:	f8c8 1000 	streq.w	r1, [r8]
 800764c:	5162      	str	r2, [r4, r5]
 800764e:	604b      	str	r3, [r1, #4]
 8007650:	4638      	mov	r0, r7
 8007652:	f104 060b 	add.w	r6, r4, #11
 8007656:	f000 f829 	bl	80076ac <__malloc_unlock>
 800765a:	f026 0607 	bic.w	r6, r6, #7
 800765e:	1d23      	adds	r3, r4, #4
 8007660:	1af2      	subs	r2, r6, r3
 8007662:	d0ae      	beq.n	80075c2 <_malloc_r+0x22>
 8007664:	1b9b      	subs	r3, r3, r6
 8007666:	50a3      	str	r3, [r4, r2]
 8007668:	e7ab      	b.n	80075c2 <_malloc_r+0x22>
 800766a:	42a3      	cmp	r3, r4
 800766c:	6862      	ldr	r2, [r4, #4]
 800766e:	d1dd      	bne.n	800762c <_malloc_r+0x8c>
 8007670:	f8c8 2000 	str.w	r2, [r8]
 8007674:	e7ec      	b.n	8007650 <_malloc_r+0xb0>
 8007676:	4623      	mov	r3, r4
 8007678:	6864      	ldr	r4, [r4, #4]
 800767a:	e7ac      	b.n	80075d6 <_malloc_r+0x36>
 800767c:	4634      	mov	r4, r6
 800767e:	6876      	ldr	r6, [r6, #4]
 8007680:	e7b4      	b.n	80075ec <_malloc_r+0x4c>
 8007682:	4613      	mov	r3, r2
 8007684:	e7cc      	b.n	8007620 <_malloc_r+0x80>
 8007686:	230c      	movs	r3, #12
 8007688:	4638      	mov	r0, r7
 800768a:	603b      	str	r3, [r7, #0]
 800768c:	f000 f80e 	bl	80076ac <__malloc_unlock>
 8007690:	e797      	b.n	80075c2 <_malloc_r+0x22>
 8007692:	6025      	str	r5, [r4, #0]
 8007694:	e7dc      	b.n	8007650 <_malloc_r+0xb0>
 8007696:	605b      	str	r3, [r3, #4]
 8007698:	deff      	udf	#255	; 0xff
 800769a:	bf00      	nop
 800769c:	200007dc 	.word	0x200007dc

080076a0 <__malloc_lock>:
 80076a0:	4801      	ldr	r0, [pc, #4]	; (80076a8 <__malloc_lock+0x8>)
 80076a2:	f7ff b88a 	b.w	80067ba <__retarget_lock_acquire_recursive>
 80076a6:	bf00      	nop
 80076a8:	200007d8 	.word	0x200007d8

080076ac <__malloc_unlock>:
 80076ac:	4801      	ldr	r0, [pc, #4]	; (80076b4 <__malloc_unlock+0x8>)
 80076ae:	f7ff b885 	b.w	80067bc <__retarget_lock_release_recursive>
 80076b2:	bf00      	nop
 80076b4:	200007d8 	.word	0x200007d8

080076b8 <_Balloc>:
 80076b8:	b570      	push	{r4, r5, r6, lr}
 80076ba:	69c6      	ldr	r6, [r0, #28]
 80076bc:	4604      	mov	r4, r0
 80076be:	460d      	mov	r5, r1
 80076c0:	b976      	cbnz	r6, 80076e0 <_Balloc+0x28>
 80076c2:	2010      	movs	r0, #16
 80076c4:	f7ff ff44 	bl	8007550 <malloc>
 80076c8:	4602      	mov	r2, r0
 80076ca:	61e0      	str	r0, [r4, #28]
 80076cc:	b920      	cbnz	r0, 80076d8 <_Balloc+0x20>
 80076ce:	216b      	movs	r1, #107	; 0x6b
 80076d0:	4b17      	ldr	r3, [pc, #92]	; (8007730 <_Balloc+0x78>)
 80076d2:	4818      	ldr	r0, [pc, #96]	; (8007734 <_Balloc+0x7c>)
 80076d4:	f002 f90c 	bl	80098f0 <__assert_func>
 80076d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076dc:	6006      	str	r6, [r0, #0]
 80076de:	60c6      	str	r6, [r0, #12]
 80076e0:	69e6      	ldr	r6, [r4, #28]
 80076e2:	68f3      	ldr	r3, [r6, #12]
 80076e4:	b183      	cbz	r3, 8007708 <_Balloc+0x50>
 80076e6:	69e3      	ldr	r3, [r4, #28]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076ee:	b9b8      	cbnz	r0, 8007720 <_Balloc+0x68>
 80076f0:	2101      	movs	r1, #1
 80076f2:	fa01 f605 	lsl.w	r6, r1, r5
 80076f6:	1d72      	adds	r2, r6, #5
 80076f8:	4620      	mov	r0, r4
 80076fa:	0092      	lsls	r2, r2, #2
 80076fc:	f002 f916 	bl	800992c <_calloc_r>
 8007700:	b160      	cbz	r0, 800771c <_Balloc+0x64>
 8007702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007706:	e00e      	b.n	8007726 <_Balloc+0x6e>
 8007708:	2221      	movs	r2, #33	; 0x21
 800770a:	2104      	movs	r1, #4
 800770c:	4620      	mov	r0, r4
 800770e:	f002 f90d 	bl	800992c <_calloc_r>
 8007712:	69e3      	ldr	r3, [r4, #28]
 8007714:	60f0      	str	r0, [r6, #12]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e4      	bne.n	80076e6 <_Balloc+0x2e>
 800771c:	2000      	movs	r0, #0
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	6802      	ldr	r2, [r0, #0]
 8007722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007726:	2300      	movs	r3, #0
 8007728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800772c:	e7f7      	b.n	800771e <_Balloc+0x66>
 800772e:	bf00      	nop
 8007730:	0800a7ee 	.word	0x0800a7ee
 8007734:	0800a86e 	.word	0x0800a86e

08007738 <_Bfree>:
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	69c6      	ldr	r6, [r0, #28]
 800773c:	4605      	mov	r5, r0
 800773e:	460c      	mov	r4, r1
 8007740:	b976      	cbnz	r6, 8007760 <_Bfree+0x28>
 8007742:	2010      	movs	r0, #16
 8007744:	f7ff ff04 	bl	8007550 <malloc>
 8007748:	4602      	mov	r2, r0
 800774a:	61e8      	str	r0, [r5, #28]
 800774c:	b920      	cbnz	r0, 8007758 <_Bfree+0x20>
 800774e:	218f      	movs	r1, #143	; 0x8f
 8007750:	4b08      	ldr	r3, [pc, #32]	; (8007774 <_Bfree+0x3c>)
 8007752:	4809      	ldr	r0, [pc, #36]	; (8007778 <_Bfree+0x40>)
 8007754:	f002 f8cc 	bl	80098f0 <__assert_func>
 8007758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800775c:	6006      	str	r6, [r0, #0]
 800775e:	60c6      	str	r6, [r0, #12]
 8007760:	b13c      	cbz	r4, 8007772 <_Bfree+0x3a>
 8007762:	69eb      	ldr	r3, [r5, #28]
 8007764:	6862      	ldr	r2, [r4, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800776c:	6021      	str	r1, [r4, #0]
 800776e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007772:	bd70      	pop	{r4, r5, r6, pc}
 8007774:	0800a7ee 	.word	0x0800a7ee
 8007778:	0800a86e 	.word	0x0800a86e

0800777c <__multadd>:
 800777c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007780:	4607      	mov	r7, r0
 8007782:	460c      	mov	r4, r1
 8007784:	461e      	mov	r6, r3
 8007786:	2000      	movs	r0, #0
 8007788:	690d      	ldr	r5, [r1, #16]
 800778a:	f101 0c14 	add.w	ip, r1, #20
 800778e:	f8dc 3000 	ldr.w	r3, [ip]
 8007792:	3001      	adds	r0, #1
 8007794:	b299      	uxth	r1, r3
 8007796:	fb02 6101 	mla	r1, r2, r1, r6
 800779a:	0c1e      	lsrs	r6, r3, #16
 800779c:	0c0b      	lsrs	r3, r1, #16
 800779e:	fb02 3306 	mla	r3, r2, r6, r3
 80077a2:	b289      	uxth	r1, r1
 80077a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077a8:	4285      	cmp	r5, r0
 80077aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077ae:	f84c 1b04 	str.w	r1, [ip], #4
 80077b2:	dcec      	bgt.n	800778e <__multadd+0x12>
 80077b4:	b30e      	cbz	r6, 80077fa <__multadd+0x7e>
 80077b6:	68a3      	ldr	r3, [r4, #8]
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	dc19      	bgt.n	80077f0 <__multadd+0x74>
 80077bc:	6861      	ldr	r1, [r4, #4]
 80077be:	4638      	mov	r0, r7
 80077c0:	3101      	adds	r1, #1
 80077c2:	f7ff ff79 	bl	80076b8 <_Balloc>
 80077c6:	4680      	mov	r8, r0
 80077c8:	b928      	cbnz	r0, 80077d6 <__multadd+0x5a>
 80077ca:	4602      	mov	r2, r0
 80077cc:	21ba      	movs	r1, #186	; 0xba
 80077ce:	4b0c      	ldr	r3, [pc, #48]	; (8007800 <__multadd+0x84>)
 80077d0:	480c      	ldr	r0, [pc, #48]	; (8007804 <__multadd+0x88>)
 80077d2:	f002 f88d 	bl	80098f0 <__assert_func>
 80077d6:	6922      	ldr	r2, [r4, #16]
 80077d8:	f104 010c 	add.w	r1, r4, #12
 80077dc:	3202      	adds	r2, #2
 80077de:	0092      	lsls	r2, r2, #2
 80077e0:	300c      	adds	r0, #12
 80077e2:	f002 f871 	bl	80098c8 <memcpy>
 80077e6:	4621      	mov	r1, r4
 80077e8:	4638      	mov	r0, r7
 80077ea:	f7ff ffa5 	bl	8007738 <_Bfree>
 80077ee:	4644      	mov	r4, r8
 80077f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077f4:	3501      	adds	r5, #1
 80077f6:	615e      	str	r6, [r3, #20]
 80077f8:	6125      	str	r5, [r4, #16]
 80077fa:	4620      	mov	r0, r4
 80077fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007800:	0800a85d 	.word	0x0800a85d
 8007804:	0800a86e 	.word	0x0800a86e

08007808 <__s2b>:
 8007808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800780c:	4615      	mov	r5, r2
 800780e:	2209      	movs	r2, #9
 8007810:	461f      	mov	r7, r3
 8007812:	3308      	adds	r3, #8
 8007814:	460c      	mov	r4, r1
 8007816:	fb93 f3f2 	sdiv	r3, r3, r2
 800781a:	4606      	mov	r6, r0
 800781c:	2201      	movs	r2, #1
 800781e:	2100      	movs	r1, #0
 8007820:	429a      	cmp	r2, r3
 8007822:	db09      	blt.n	8007838 <__s2b+0x30>
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff ff47 	bl	80076b8 <_Balloc>
 800782a:	b940      	cbnz	r0, 800783e <__s2b+0x36>
 800782c:	4602      	mov	r2, r0
 800782e:	21d3      	movs	r1, #211	; 0xd3
 8007830:	4b18      	ldr	r3, [pc, #96]	; (8007894 <__s2b+0x8c>)
 8007832:	4819      	ldr	r0, [pc, #100]	; (8007898 <__s2b+0x90>)
 8007834:	f002 f85c 	bl	80098f0 <__assert_func>
 8007838:	0052      	lsls	r2, r2, #1
 800783a:	3101      	adds	r1, #1
 800783c:	e7f0      	b.n	8007820 <__s2b+0x18>
 800783e:	9b08      	ldr	r3, [sp, #32]
 8007840:	2d09      	cmp	r5, #9
 8007842:	6143      	str	r3, [r0, #20]
 8007844:	f04f 0301 	mov.w	r3, #1
 8007848:	6103      	str	r3, [r0, #16]
 800784a:	dd16      	ble.n	800787a <__s2b+0x72>
 800784c:	f104 0909 	add.w	r9, r4, #9
 8007850:	46c8      	mov	r8, r9
 8007852:	442c      	add	r4, r5
 8007854:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007858:	4601      	mov	r1, r0
 800785a:	220a      	movs	r2, #10
 800785c:	4630      	mov	r0, r6
 800785e:	3b30      	subs	r3, #48	; 0x30
 8007860:	f7ff ff8c 	bl	800777c <__multadd>
 8007864:	45a0      	cmp	r8, r4
 8007866:	d1f5      	bne.n	8007854 <__s2b+0x4c>
 8007868:	f1a5 0408 	sub.w	r4, r5, #8
 800786c:	444c      	add	r4, r9
 800786e:	1b2d      	subs	r5, r5, r4
 8007870:	1963      	adds	r3, r4, r5
 8007872:	42bb      	cmp	r3, r7
 8007874:	db04      	blt.n	8007880 <__s2b+0x78>
 8007876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800787a:	2509      	movs	r5, #9
 800787c:	340a      	adds	r4, #10
 800787e:	e7f6      	b.n	800786e <__s2b+0x66>
 8007880:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007884:	4601      	mov	r1, r0
 8007886:	220a      	movs	r2, #10
 8007888:	4630      	mov	r0, r6
 800788a:	3b30      	subs	r3, #48	; 0x30
 800788c:	f7ff ff76 	bl	800777c <__multadd>
 8007890:	e7ee      	b.n	8007870 <__s2b+0x68>
 8007892:	bf00      	nop
 8007894:	0800a85d 	.word	0x0800a85d
 8007898:	0800a86e 	.word	0x0800a86e

0800789c <__hi0bits>:
 800789c:	0c02      	lsrs	r2, r0, #16
 800789e:	0412      	lsls	r2, r2, #16
 80078a0:	4603      	mov	r3, r0
 80078a2:	b9ca      	cbnz	r2, 80078d8 <__hi0bits+0x3c>
 80078a4:	0403      	lsls	r3, r0, #16
 80078a6:	2010      	movs	r0, #16
 80078a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80078ac:	bf04      	itt	eq
 80078ae:	021b      	lsleq	r3, r3, #8
 80078b0:	3008      	addeq	r0, #8
 80078b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80078b6:	bf04      	itt	eq
 80078b8:	011b      	lsleq	r3, r3, #4
 80078ba:	3004      	addeq	r0, #4
 80078bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80078c0:	bf04      	itt	eq
 80078c2:	009b      	lsleq	r3, r3, #2
 80078c4:	3002      	addeq	r0, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	db05      	blt.n	80078d6 <__hi0bits+0x3a>
 80078ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80078ce:	f100 0001 	add.w	r0, r0, #1
 80078d2:	bf08      	it	eq
 80078d4:	2020      	moveq	r0, #32
 80078d6:	4770      	bx	lr
 80078d8:	2000      	movs	r0, #0
 80078da:	e7e5      	b.n	80078a8 <__hi0bits+0xc>

080078dc <__lo0bits>:
 80078dc:	6803      	ldr	r3, [r0, #0]
 80078de:	4602      	mov	r2, r0
 80078e0:	f013 0007 	ands.w	r0, r3, #7
 80078e4:	d00b      	beq.n	80078fe <__lo0bits+0x22>
 80078e6:	07d9      	lsls	r1, r3, #31
 80078e8:	d421      	bmi.n	800792e <__lo0bits+0x52>
 80078ea:	0798      	lsls	r0, r3, #30
 80078ec:	bf49      	itett	mi
 80078ee:	085b      	lsrmi	r3, r3, #1
 80078f0:	089b      	lsrpl	r3, r3, #2
 80078f2:	2001      	movmi	r0, #1
 80078f4:	6013      	strmi	r3, [r2, #0]
 80078f6:	bf5c      	itt	pl
 80078f8:	2002      	movpl	r0, #2
 80078fa:	6013      	strpl	r3, [r2, #0]
 80078fc:	4770      	bx	lr
 80078fe:	b299      	uxth	r1, r3
 8007900:	b909      	cbnz	r1, 8007906 <__lo0bits+0x2a>
 8007902:	2010      	movs	r0, #16
 8007904:	0c1b      	lsrs	r3, r3, #16
 8007906:	b2d9      	uxtb	r1, r3
 8007908:	b909      	cbnz	r1, 800790e <__lo0bits+0x32>
 800790a:	3008      	adds	r0, #8
 800790c:	0a1b      	lsrs	r3, r3, #8
 800790e:	0719      	lsls	r1, r3, #28
 8007910:	bf04      	itt	eq
 8007912:	091b      	lsreq	r3, r3, #4
 8007914:	3004      	addeq	r0, #4
 8007916:	0799      	lsls	r1, r3, #30
 8007918:	bf04      	itt	eq
 800791a:	089b      	lsreq	r3, r3, #2
 800791c:	3002      	addeq	r0, #2
 800791e:	07d9      	lsls	r1, r3, #31
 8007920:	d403      	bmi.n	800792a <__lo0bits+0x4e>
 8007922:	085b      	lsrs	r3, r3, #1
 8007924:	f100 0001 	add.w	r0, r0, #1
 8007928:	d003      	beq.n	8007932 <__lo0bits+0x56>
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	4770      	bx	lr
 800792e:	2000      	movs	r0, #0
 8007930:	4770      	bx	lr
 8007932:	2020      	movs	r0, #32
 8007934:	4770      	bx	lr
	...

08007938 <__i2b>:
 8007938:	b510      	push	{r4, lr}
 800793a:	460c      	mov	r4, r1
 800793c:	2101      	movs	r1, #1
 800793e:	f7ff febb 	bl	80076b8 <_Balloc>
 8007942:	4602      	mov	r2, r0
 8007944:	b928      	cbnz	r0, 8007952 <__i2b+0x1a>
 8007946:	f240 1145 	movw	r1, #325	; 0x145
 800794a:	4b04      	ldr	r3, [pc, #16]	; (800795c <__i2b+0x24>)
 800794c:	4804      	ldr	r0, [pc, #16]	; (8007960 <__i2b+0x28>)
 800794e:	f001 ffcf 	bl	80098f0 <__assert_func>
 8007952:	2301      	movs	r3, #1
 8007954:	6144      	str	r4, [r0, #20]
 8007956:	6103      	str	r3, [r0, #16]
 8007958:	bd10      	pop	{r4, pc}
 800795a:	bf00      	nop
 800795c:	0800a85d 	.word	0x0800a85d
 8007960:	0800a86e 	.word	0x0800a86e

08007964 <__multiply>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	4691      	mov	r9, r2
 800796a:	690a      	ldr	r2, [r1, #16]
 800796c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007970:	460c      	mov	r4, r1
 8007972:	429a      	cmp	r2, r3
 8007974:	bfbe      	ittt	lt
 8007976:	460b      	movlt	r3, r1
 8007978:	464c      	movlt	r4, r9
 800797a:	4699      	movlt	r9, r3
 800797c:	6927      	ldr	r7, [r4, #16]
 800797e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007982:	68a3      	ldr	r3, [r4, #8]
 8007984:	6861      	ldr	r1, [r4, #4]
 8007986:	eb07 060a 	add.w	r6, r7, sl
 800798a:	42b3      	cmp	r3, r6
 800798c:	b085      	sub	sp, #20
 800798e:	bfb8      	it	lt
 8007990:	3101      	addlt	r1, #1
 8007992:	f7ff fe91 	bl	80076b8 <_Balloc>
 8007996:	b930      	cbnz	r0, 80079a6 <__multiply+0x42>
 8007998:	4602      	mov	r2, r0
 800799a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800799e:	4b43      	ldr	r3, [pc, #268]	; (8007aac <__multiply+0x148>)
 80079a0:	4843      	ldr	r0, [pc, #268]	; (8007ab0 <__multiply+0x14c>)
 80079a2:	f001 ffa5 	bl	80098f0 <__assert_func>
 80079a6:	f100 0514 	add.w	r5, r0, #20
 80079aa:	462b      	mov	r3, r5
 80079ac:	2200      	movs	r2, #0
 80079ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079b2:	4543      	cmp	r3, r8
 80079b4:	d321      	bcc.n	80079fa <__multiply+0x96>
 80079b6:	f104 0314 	add.w	r3, r4, #20
 80079ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079be:	f109 0314 	add.w	r3, r9, #20
 80079c2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079c6:	9202      	str	r2, [sp, #8]
 80079c8:	1b3a      	subs	r2, r7, r4
 80079ca:	3a15      	subs	r2, #21
 80079cc:	f022 0203 	bic.w	r2, r2, #3
 80079d0:	3204      	adds	r2, #4
 80079d2:	f104 0115 	add.w	r1, r4, #21
 80079d6:	428f      	cmp	r7, r1
 80079d8:	bf38      	it	cc
 80079da:	2204      	movcc	r2, #4
 80079dc:	9201      	str	r2, [sp, #4]
 80079de:	9a02      	ldr	r2, [sp, #8]
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d80c      	bhi.n	8007a00 <__multiply+0x9c>
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	dd03      	ble.n	80079f2 <__multiply+0x8e>
 80079ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d05a      	beq.n	8007aa8 <__multiply+0x144>
 80079f2:	6106      	str	r6, [r0, #16]
 80079f4:	b005      	add	sp, #20
 80079f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fa:	f843 2b04 	str.w	r2, [r3], #4
 80079fe:	e7d8      	b.n	80079b2 <__multiply+0x4e>
 8007a00:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a04:	f1ba 0f00 	cmp.w	sl, #0
 8007a08:	d023      	beq.n	8007a52 <__multiply+0xee>
 8007a0a:	46a9      	mov	r9, r5
 8007a0c:	f04f 0c00 	mov.w	ip, #0
 8007a10:	f104 0e14 	add.w	lr, r4, #20
 8007a14:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a18:	f8d9 1000 	ldr.w	r1, [r9]
 8007a1c:	fa1f fb82 	uxth.w	fp, r2
 8007a20:	b289      	uxth	r1, r1
 8007a22:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a26:	4461      	add	r1, ip
 8007a28:	f8d9 c000 	ldr.w	ip, [r9]
 8007a2c:	0c12      	lsrs	r2, r2, #16
 8007a2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a32:	fb0a c202 	mla	r2, sl, r2, ip
 8007a36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a3a:	b289      	uxth	r1, r1
 8007a3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a40:	4577      	cmp	r7, lr
 8007a42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a46:	f849 1b04 	str.w	r1, [r9], #4
 8007a4a:	d8e3      	bhi.n	8007a14 <__multiply+0xb0>
 8007a4c:	9a01      	ldr	r2, [sp, #4]
 8007a4e:	f845 c002 	str.w	ip, [r5, r2]
 8007a52:	9a03      	ldr	r2, [sp, #12]
 8007a54:	3304      	adds	r3, #4
 8007a56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a5a:	f1b9 0f00 	cmp.w	r9, #0
 8007a5e:	d021      	beq.n	8007aa4 <__multiply+0x140>
 8007a60:	46ae      	mov	lr, r5
 8007a62:	f04f 0a00 	mov.w	sl, #0
 8007a66:	6829      	ldr	r1, [r5, #0]
 8007a68:	f104 0c14 	add.w	ip, r4, #20
 8007a6c:	f8bc b000 	ldrh.w	fp, [ip]
 8007a70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a74:	b289      	uxth	r1, r1
 8007a76:	fb09 220b 	mla	r2, r9, fp, r2
 8007a7a:	4452      	add	r2, sl
 8007a7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a80:	f84e 1b04 	str.w	r1, [lr], #4
 8007a84:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a8c:	f8be 1000 	ldrh.w	r1, [lr]
 8007a90:	4567      	cmp	r7, ip
 8007a92:	fb09 110a 	mla	r1, r9, sl, r1
 8007a96:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007a9a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a9e:	d8e5      	bhi.n	8007a6c <__multiply+0x108>
 8007aa0:	9a01      	ldr	r2, [sp, #4]
 8007aa2:	50a9      	str	r1, [r5, r2]
 8007aa4:	3504      	adds	r5, #4
 8007aa6:	e79a      	b.n	80079de <__multiply+0x7a>
 8007aa8:	3e01      	subs	r6, #1
 8007aaa:	e79c      	b.n	80079e6 <__multiply+0x82>
 8007aac:	0800a85d 	.word	0x0800a85d
 8007ab0:	0800a86e 	.word	0x0800a86e

08007ab4 <__pow5mult>:
 8007ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab8:	4615      	mov	r5, r2
 8007aba:	f012 0203 	ands.w	r2, r2, #3
 8007abe:	4606      	mov	r6, r0
 8007ac0:	460f      	mov	r7, r1
 8007ac2:	d007      	beq.n	8007ad4 <__pow5mult+0x20>
 8007ac4:	4c25      	ldr	r4, [pc, #148]	; (8007b5c <__pow5mult+0xa8>)
 8007ac6:	3a01      	subs	r2, #1
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ace:	f7ff fe55 	bl	800777c <__multadd>
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	10ad      	asrs	r5, r5, #2
 8007ad6:	d03d      	beq.n	8007b54 <__pow5mult+0xa0>
 8007ad8:	69f4      	ldr	r4, [r6, #28]
 8007ada:	b97c      	cbnz	r4, 8007afc <__pow5mult+0x48>
 8007adc:	2010      	movs	r0, #16
 8007ade:	f7ff fd37 	bl	8007550 <malloc>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	61f0      	str	r0, [r6, #28]
 8007ae6:	b928      	cbnz	r0, 8007af4 <__pow5mult+0x40>
 8007ae8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007aec:	4b1c      	ldr	r3, [pc, #112]	; (8007b60 <__pow5mult+0xac>)
 8007aee:	481d      	ldr	r0, [pc, #116]	; (8007b64 <__pow5mult+0xb0>)
 8007af0:	f001 fefe 	bl	80098f0 <__assert_func>
 8007af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007af8:	6004      	str	r4, [r0, #0]
 8007afa:	60c4      	str	r4, [r0, #12]
 8007afc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b04:	b94c      	cbnz	r4, 8007b1a <__pow5mult+0x66>
 8007b06:	f240 2171 	movw	r1, #625	; 0x271
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7ff ff14 	bl	8007938 <__i2b>
 8007b10:	2300      	movs	r3, #0
 8007b12:	4604      	mov	r4, r0
 8007b14:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b18:	6003      	str	r3, [r0, #0]
 8007b1a:	f04f 0900 	mov.w	r9, #0
 8007b1e:	07eb      	lsls	r3, r5, #31
 8007b20:	d50a      	bpl.n	8007b38 <__pow5mult+0x84>
 8007b22:	4639      	mov	r1, r7
 8007b24:	4622      	mov	r2, r4
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff ff1c 	bl	8007964 <__multiply>
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff fe01 	bl	8007738 <_Bfree>
 8007b36:	4647      	mov	r7, r8
 8007b38:	106d      	asrs	r5, r5, #1
 8007b3a:	d00b      	beq.n	8007b54 <__pow5mult+0xa0>
 8007b3c:	6820      	ldr	r0, [r4, #0]
 8007b3e:	b938      	cbnz	r0, 8007b50 <__pow5mult+0x9c>
 8007b40:	4622      	mov	r2, r4
 8007b42:	4621      	mov	r1, r4
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff ff0d 	bl	8007964 <__multiply>
 8007b4a:	6020      	str	r0, [r4, #0]
 8007b4c:	f8c0 9000 	str.w	r9, [r0]
 8007b50:	4604      	mov	r4, r0
 8007b52:	e7e4      	b.n	8007b1e <__pow5mult+0x6a>
 8007b54:	4638      	mov	r0, r7
 8007b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5a:	bf00      	nop
 8007b5c:	0800a9b8 	.word	0x0800a9b8
 8007b60:	0800a7ee 	.word	0x0800a7ee
 8007b64:	0800a86e 	.word	0x0800a86e

08007b68 <__lshift>:
 8007b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	4607      	mov	r7, r0
 8007b70:	4691      	mov	r9, r2
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	6849      	ldr	r1, [r1, #4]
 8007b76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b80:	f108 0601 	add.w	r6, r8, #1
 8007b84:	42b3      	cmp	r3, r6
 8007b86:	db0b      	blt.n	8007ba0 <__lshift+0x38>
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7ff fd95 	bl	80076b8 <_Balloc>
 8007b8e:	4605      	mov	r5, r0
 8007b90:	b948      	cbnz	r0, 8007ba6 <__lshift+0x3e>
 8007b92:	4602      	mov	r2, r0
 8007b94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007b98:	4b27      	ldr	r3, [pc, #156]	; (8007c38 <__lshift+0xd0>)
 8007b9a:	4828      	ldr	r0, [pc, #160]	; (8007c3c <__lshift+0xd4>)
 8007b9c:	f001 fea8 	bl	80098f0 <__assert_func>
 8007ba0:	3101      	adds	r1, #1
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	e7ee      	b.n	8007b84 <__lshift+0x1c>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f100 0114 	add.w	r1, r0, #20
 8007bac:	f100 0210 	add.w	r2, r0, #16
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	4553      	cmp	r3, sl
 8007bb4:	db33      	blt.n	8007c1e <__lshift+0xb6>
 8007bb6:	6920      	ldr	r0, [r4, #16]
 8007bb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bbc:	f104 0314 	add.w	r3, r4, #20
 8007bc0:	f019 091f 	ands.w	r9, r9, #31
 8007bc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bcc:	d02b      	beq.n	8007c26 <__lshift+0xbe>
 8007bce:	468a      	mov	sl, r1
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f1c9 0e20 	rsb	lr, r9, #32
 8007bd6:	6818      	ldr	r0, [r3, #0]
 8007bd8:	fa00 f009 	lsl.w	r0, r0, r9
 8007bdc:	4310      	orrs	r0, r2
 8007bde:	f84a 0b04 	str.w	r0, [sl], #4
 8007be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be6:	459c      	cmp	ip, r3
 8007be8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007bec:	d8f3      	bhi.n	8007bd6 <__lshift+0x6e>
 8007bee:	ebac 0304 	sub.w	r3, ip, r4
 8007bf2:	3b15      	subs	r3, #21
 8007bf4:	f023 0303 	bic.w	r3, r3, #3
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	f104 0015 	add.w	r0, r4, #21
 8007bfe:	4584      	cmp	ip, r0
 8007c00:	bf38      	it	cc
 8007c02:	2304      	movcc	r3, #4
 8007c04:	50ca      	str	r2, [r1, r3]
 8007c06:	b10a      	cbz	r2, 8007c0c <__lshift+0xa4>
 8007c08:	f108 0602 	add.w	r6, r8, #2
 8007c0c:	3e01      	subs	r6, #1
 8007c0e:	4638      	mov	r0, r7
 8007c10:	4621      	mov	r1, r4
 8007c12:	612e      	str	r6, [r5, #16]
 8007c14:	f7ff fd90 	bl	8007738 <_Bfree>
 8007c18:	4628      	mov	r0, r5
 8007c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c22:	3301      	adds	r3, #1
 8007c24:	e7c5      	b.n	8007bb2 <__lshift+0x4a>
 8007c26:	3904      	subs	r1, #4
 8007c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c2c:	459c      	cmp	ip, r3
 8007c2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c32:	d8f9      	bhi.n	8007c28 <__lshift+0xc0>
 8007c34:	e7ea      	b.n	8007c0c <__lshift+0xa4>
 8007c36:	bf00      	nop
 8007c38:	0800a85d 	.word	0x0800a85d
 8007c3c:	0800a86e 	.word	0x0800a86e

08007c40 <__mcmp>:
 8007c40:	4603      	mov	r3, r0
 8007c42:	690a      	ldr	r2, [r1, #16]
 8007c44:	6900      	ldr	r0, [r0, #16]
 8007c46:	b530      	push	{r4, r5, lr}
 8007c48:	1a80      	subs	r0, r0, r2
 8007c4a:	d10d      	bne.n	8007c68 <__mcmp+0x28>
 8007c4c:	3314      	adds	r3, #20
 8007c4e:	3114      	adds	r1, #20
 8007c50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c60:	4295      	cmp	r5, r2
 8007c62:	d002      	beq.n	8007c6a <__mcmp+0x2a>
 8007c64:	d304      	bcc.n	8007c70 <__mcmp+0x30>
 8007c66:	2001      	movs	r0, #1
 8007c68:	bd30      	pop	{r4, r5, pc}
 8007c6a:	42a3      	cmp	r3, r4
 8007c6c:	d3f4      	bcc.n	8007c58 <__mcmp+0x18>
 8007c6e:	e7fb      	b.n	8007c68 <__mcmp+0x28>
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295
 8007c74:	e7f8      	b.n	8007c68 <__mcmp+0x28>
	...

08007c78 <__mdiff>:
 8007c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	460d      	mov	r5, r1
 8007c7e:	4607      	mov	r7, r0
 8007c80:	4611      	mov	r1, r2
 8007c82:	4628      	mov	r0, r5
 8007c84:	4614      	mov	r4, r2
 8007c86:	f7ff ffdb 	bl	8007c40 <__mcmp>
 8007c8a:	1e06      	subs	r6, r0, #0
 8007c8c:	d111      	bne.n	8007cb2 <__mdiff+0x3a>
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4638      	mov	r0, r7
 8007c92:	f7ff fd11 	bl	80076b8 <_Balloc>
 8007c96:	4602      	mov	r2, r0
 8007c98:	b928      	cbnz	r0, 8007ca6 <__mdiff+0x2e>
 8007c9a:	f240 2137 	movw	r1, #567	; 0x237
 8007c9e:	4b3a      	ldr	r3, [pc, #232]	; (8007d88 <__mdiff+0x110>)
 8007ca0:	483a      	ldr	r0, [pc, #232]	; (8007d8c <__mdiff+0x114>)
 8007ca2:	f001 fe25 	bl	80098f0 <__assert_func>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007cac:	4610      	mov	r0, r2
 8007cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb2:	bfa4      	itt	ge
 8007cb4:	4623      	movge	r3, r4
 8007cb6:	462c      	movge	r4, r5
 8007cb8:	4638      	mov	r0, r7
 8007cba:	6861      	ldr	r1, [r4, #4]
 8007cbc:	bfa6      	itte	ge
 8007cbe:	461d      	movge	r5, r3
 8007cc0:	2600      	movge	r6, #0
 8007cc2:	2601      	movlt	r6, #1
 8007cc4:	f7ff fcf8 	bl	80076b8 <_Balloc>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	b918      	cbnz	r0, 8007cd4 <__mdiff+0x5c>
 8007ccc:	f240 2145 	movw	r1, #581	; 0x245
 8007cd0:	4b2d      	ldr	r3, [pc, #180]	; (8007d88 <__mdiff+0x110>)
 8007cd2:	e7e5      	b.n	8007ca0 <__mdiff+0x28>
 8007cd4:	f102 0814 	add.w	r8, r2, #20
 8007cd8:	46c2      	mov	sl, r8
 8007cda:	f04f 0c00 	mov.w	ip, #0
 8007cde:	6927      	ldr	r7, [r4, #16]
 8007ce0:	60c6      	str	r6, [r0, #12]
 8007ce2:	692e      	ldr	r6, [r5, #16]
 8007ce4:	f104 0014 	add.w	r0, r4, #20
 8007ce8:	f105 0914 	add.w	r9, r5, #20
 8007cec:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007cf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007cf4:	3410      	adds	r4, #16
 8007cf6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007cfa:	f859 3b04 	ldr.w	r3, [r9], #4
 8007cfe:	fa1f f18b 	uxth.w	r1, fp
 8007d02:	4461      	add	r1, ip
 8007d04:	fa1f fc83 	uxth.w	ip, r3
 8007d08:	0c1b      	lsrs	r3, r3, #16
 8007d0a:	eba1 010c 	sub.w	r1, r1, ip
 8007d0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d12:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d16:	b289      	uxth	r1, r1
 8007d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007d1c:	454e      	cmp	r6, r9
 8007d1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d22:	f84a 1b04 	str.w	r1, [sl], #4
 8007d26:	d8e6      	bhi.n	8007cf6 <__mdiff+0x7e>
 8007d28:	1b73      	subs	r3, r6, r5
 8007d2a:	3b15      	subs	r3, #21
 8007d2c:	f023 0303 	bic.w	r3, r3, #3
 8007d30:	3515      	adds	r5, #21
 8007d32:	3304      	adds	r3, #4
 8007d34:	42ae      	cmp	r6, r5
 8007d36:	bf38      	it	cc
 8007d38:	2304      	movcc	r3, #4
 8007d3a:	4418      	add	r0, r3
 8007d3c:	4443      	add	r3, r8
 8007d3e:	461e      	mov	r6, r3
 8007d40:	4605      	mov	r5, r0
 8007d42:	4575      	cmp	r5, lr
 8007d44:	d30e      	bcc.n	8007d64 <__mdiff+0xec>
 8007d46:	f10e 0103 	add.w	r1, lr, #3
 8007d4a:	1a09      	subs	r1, r1, r0
 8007d4c:	f021 0103 	bic.w	r1, r1, #3
 8007d50:	3803      	subs	r0, #3
 8007d52:	4586      	cmp	lr, r0
 8007d54:	bf38      	it	cc
 8007d56:	2100      	movcc	r1, #0
 8007d58:	440b      	add	r3, r1
 8007d5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d5e:	b189      	cbz	r1, 8007d84 <__mdiff+0x10c>
 8007d60:	6117      	str	r7, [r2, #16]
 8007d62:	e7a3      	b.n	8007cac <__mdiff+0x34>
 8007d64:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d68:	fa1f f188 	uxth.w	r1, r8
 8007d6c:	4461      	add	r1, ip
 8007d6e:	140c      	asrs	r4, r1, #16
 8007d70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d74:	b289      	uxth	r1, r1
 8007d76:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d7a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007d7e:	f846 1b04 	str.w	r1, [r6], #4
 8007d82:	e7de      	b.n	8007d42 <__mdiff+0xca>
 8007d84:	3f01      	subs	r7, #1
 8007d86:	e7e8      	b.n	8007d5a <__mdiff+0xe2>
 8007d88:	0800a85d 	.word	0x0800a85d
 8007d8c:	0800a86e 	.word	0x0800a86e

08007d90 <__ulp>:
 8007d90:	4b0e      	ldr	r3, [pc, #56]	; (8007dcc <__ulp+0x3c>)
 8007d92:	400b      	ands	r3, r1
 8007d94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	dc08      	bgt.n	8007dae <__ulp+0x1e>
 8007d9c:	425b      	negs	r3, r3
 8007d9e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007da2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007da6:	da04      	bge.n	8007db2 <__ulp+0x22>
 8007da8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007dac:	4113      	asrs	r3, r2
 8007dae:	2200      	movs	r2, #0
 8007db0:	e008      	b.n	8007dc4 <__ulp+0x34>
 8007db2:	f1a2 0314 	sub.w	r3, r2, #20
 8007db6:	2b1e      	cmp	r3, #30
 8007db8:	bfd6      	itet	le
 8007dba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007dbe:	2201      	movgt	r2, #1
 8007dc0:	40da      	lsrle	r2, r3
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	7ff00000 	.word	0x7ff00000

08007dd0 <__b2d>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	6905      	ldr	r5, [r0, #16]
 8007dd4:	f100 0714 	add.w	r7, r0, #20
 8007dd8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007ddc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007de0:	1f2e      	subs	r6, r5, #4
 8007de2:	4620      	mov	r0, r4
 8007de4:	f7ff fd5a 	bl	800789c <__hi0bits>
 8007de8:	f1c0 0220 	rsb	r2, r0, #32
 8007dec:	280a      	cmp	r0, #10
 8007dee:	4603      	mov	r3, r0
 8007df0:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007e5c <__b2d+0x8c>
 8007df4:	600a      	str	r2, [r1, #0]
 8007df6:	dc12      	bgt.n	8007e1e <__b2d+0x4e>
 8007df8:	f1c0 0e0b 	rsb	lr, r0, #11
 8007dfc:	fa24 f20e 	lsr.w	r2, r4, lr
 8007e00:	42b7      	cmp	r7, r6
 8007e02:	ea42 010c 	orr.w	r1, r2, ip
 8007e06:	bf2c      	ite	cs
 8007e08:	2200      	movcs	r2, #0
 8007e0a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007e0e:	3315      	adds	r3, #21
 8007e10:	fa04 f303 	lsl.w	r3, r4, r3
 8007e14:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e1e:	42b7      	cmp	r7, r6
 8007e20:	bf2e      	itee	cs
 8007e22:	2200      	movcs	r2, #0
 8007e24:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007e28:	f1a5 0608 	subcc.w	r6, r5, #8
 8007e2c:	3b0b      	subs	r3, #11
 8007e2e:	d012      	beq.n	8007e56 <__b2d+0x86>
 8007e30:	f1c3 0520 	rsb	r5, r3, #32
 8007e34:	fa22 f105 	lsr.w	r1, r2, r5
 8007e38:	409c      	lsls	r4, r3
 8007e3a:	430c      	orrs	r4, r1
 8007e3c:	42be      	cmp	r6, r7
 8007e3e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007e42:	bf94      	ite	ls
 8007e44:	2400      	movls	r4, #0
 8007e46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007e4a:	409a      	lsls	r2, r3
 8007e4c:	40ec      	lsrs	r4, r5
 8007e4e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007e52:	4322      	orrs	r2, r4
 8007e54:	e7e1      	b.n	8007e1a <__b2d+0x4a>
 8007e56:	ea44 010c 	orr.w	r1, r4, ip
 8007e5a:	e7de      	b.n	8007e1a <__b2d+0x4a>
 8007e5c:	3ff00000 	.word	0x3ff00000

08007e60 <__d2b>:
 8007e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e62:	2101      	movs	r1, #1
 8007e64:	4617      	mov	r7, r2
 8007e66:	461c      	mov	r4, r3
 8007e68:	9e08      	ldr	r6, [sp, #32]
 8007e6a:	f7ff fc25 	bl	80076b8 <_Balloc>
 8007e6e:	4605      	mov	r5, r0
 8007e70:	b930      	cbnz	r0, 8007e80 <__d2b+0x20>
 8007e72:	4602      	mov	r2, r0
 8007e74:	f240 310f 	movw	r1, #783	; 0x30f
 8007e78:	4b22      	ldr	r3, [pc, #136]	; (8007f04 <__d2b+0xa4>)
 8007e7a:	4823      	ldr	r0, [pc, #140]	; (8007f08 <__d2b+0xa8>)
 8007e7c:	f001 fd38 	bl	80098f0 <__assert_func>
 8007e80:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007e84:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007e88:	bb24      	cbnz	r4, 8007ed4 <__d2b+0x74>
 8007e8a:	2f00      	cmp	r7, #0
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	d026      	beq.n	8007ede <__d2b+0x7e>
 8007e90:	4668      	mov	r0, sp
 8007e92:	9700      	str	r7, [sp, #0]
 8007e94:	f7ff fd22 	bl	80078dc <__lo0bits>
 8007e98:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e9c:	b1e8      	cbz	r0, 8007eda <__d2b+0x7a>
 8007e9e:	f1c0 0320 	rsb	r3, r0, #32
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	430b      	orrs	r3, r1
 8007ea8:	40c2      	lsrs	r2, r0
 8007eaa:	616b      	str	r3, [r5, #20]
 8007eac:	9201      	str	r2, [sp, #4]
 8007eae:	9b01      	ldr	r3, [sp, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	bf14      	ite	ne
 8007eb4:	2102      	movne	r1, #2
 8007eb6:	2101      	moveq	r1, #1
 8007eb8:	61ab      	str	r3, [r5, #24]
 8007eba:	6129      	str	r1, [r5, #16]
 8007ebc:	b1bc      	cbz	r4, 8007eee <__d2b+0x8e>
 8007ebe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007ec2:	4404      	add	r4, r0
 8007ec4:	6034      	str	r4, [r6, #0]
 8007ec6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ecc:	6018      	str	r0, [r3, #0]
 8007ece:	4628      	mov	r0, r5
 8007ed0:	b003      	add	sp, #12
 8007ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ed8:	e7d7      	b.n	8007e8a <__d2b+0x2a>
 8007eda:	6169      	str	r1, [r5, #20]
 8007edc:	e7e7      	b.n	8007eae <__d2b+0x4e>
 8007ede:	a801      	add	r0, sp, #4
 8007ee0:	f7ff fcfc 	bl	80078dc <__lo0bits>
 8007ee4:	9b01      	ldr	r3, [sp, #4]
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	616b      	str	r3, [r5, #20]
 8007eea:	3020      	adds	r0, #32
 8007eec:	e7e5      	b.n	8007eba <__d2b+0x5a>
 8007eee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ef2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007ef6:	6030      	str	r0, [r6, #0]
 8007ef8:	6918      	ldr	r0, [r3, #16]
 8007efa:	f7ff fccf 	bl	800789c <__hi0bits>
 8007efe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007f02:	e7e2      	b.n	8007eca <__d2b+0x6a>
 8007f04:	0800a85d 	.word	0x0800a85d
 8007f08:	0800a86e 	.word	0x0800a86e

08007f0c <__ratio>:
 8007f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f10:	4688      	mov	r8, r1
 8007f12:	4669      	mov	r1, sp
 8007f14:	4681      	mov	r9, r0
 8007f16:	f7ff ff5b 	bl	8007dd0 <__b2d>
 8007f1a:	460f      	mov	r7, r1
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	460d      	mov	r5, r1
 8007f20:	4640      	mov	r0, r8
 8007f22:	a901      	add	r1, sp, #4
 8007f24:	f7ff ff54 	bl	8007dd0 <__b2d>
 8007f28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f2c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007f30:	468b      	mov	fp, r1
 8007f32:	eba3 0c02 	sub.w	ip, r3, r2
 8007f36:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bfd5      	itete	le
 8007f44:	460a      	movle	r2, r1
 8007f46:	462a      	movgt	r2, r5
 8007f48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f4c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f50:	bfd8      	it	le
 8007f52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007f56:	465b      	mov	r3, fp
 8007f58:	4602      	mov	r2, r0
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f7f8 fc5b 	bl	8000818 <__aeabi_ddiv>
 8007f62:	b003      	add	sp, #12
 8007f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f68 <__copybits>:
 8007f68:	3901      	subs	r1, #1
 8007f6a:	b570      	push	{r4, r5, r6, lr}
 8007f6c:	1149      	asrs	r1, r1, #5
 8007f6e:	6914      	ldr	r4, [r2, #16]
 8007f70:	3101      	adds	r1, #1
 8007f72:	f102 0314 	add.w	r3, r2, #20
 8007f76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f7e:	1f05      	subs	r5, r0, #4
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	d30c      	bcc.n	8007f9e <__copybits+0x36>
 8007f84:	1aa3      	subs	r3, r4, r2
 8007f86:	3b11      	subs	r3, #17
 8007f88:	f023 0303 	bic.w	r3, r3, #3
 8007f8c:	3211      	adds	r2, #17
 8007f8e:	42a2      	cmp	r2, r4
 8007f90:	bf88      	it	hi
 8007f92:	2300      	movhi	r3, #0
 8007f94:	4418      	add	r0, r3
 8007f96:	2300      	movs	r3, #0
 8007f98:	4288      	cmp	r0, r1
 8007f9a:	d305      	bcc.n	8007fa8 <__copybits+0x40>
 8007f9c:	bd70      	pop	{r4, r5, r6, pc}
 8007f9e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007fa2:	f845 6f04 	str.w	r6, [r5, #4]!
 8007fa6:	e7eb      	b.n	8007f80 <__copybits+0x18>
 8007fa8:	f840 3b04 	str.w	r3, [r0], #4
 8007fac:	e7f4      	b.n	8007f98 <__copybits+0x30>

08007fae <__any_on>:
 8007fae:	f100 0214 	add.w	r2, r0, #20
 8007fb2:	6900      	ldr	r0, [r0, #16]
 8007fb4:	114b      	asrs	r3, r1, #5
 8007fb6:	4298      	cmp	r0, r3
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	db11      	blt.n	8007fe0 <__any_on+0x32>
 8007fbc:	dd0a      	ble.n	8007fd4 <__any_on+0x26>
 8007fbe:	f011 011f 	ands.w	r1, r1, #31
 8007fc2:	d007      	beq.n	8007fd4 <__any_on+0x26>
 8007fc4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007fc8:	fa24 f001 	lsr.w	r0, r4, r1
 8007fcc:	fa00 f101 	lsl.w	r1, r0, r1
 8007fd0:	428c      	cmp	r4, r1
 8007fd2:	d10b      	bne.n	8007fec <__any_on+0x3e>
 8007fd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d803      	bhi.n	8007fe4 <__any_on+0x36>
 8007fdc:	2000      	movs	r0, #0
 8007fde:	bd10      	pop	{r4, pc}
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	e7f7      	b.n	8007fd4 <__any_on+0x26>
 8007fe4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fe8:	2900      	cmp	r1, #0
 8007fea:	d0f5      	beq.n	8007fd8 <__any_on+0x2a>
 8007fec:	2001      	movs	r0, #1
 8007fee:	e7f6      	b.n	8007fde <__any_on+0x30>

08007ff0 <sulp>:
 8007ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff4:	460f      	mov	r7, r1
 8007ff6:	4690      	mov	r8, r2
 8007ff8:	f7ff feca 	bl	8007d90 <__ulp>
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	460d      	mov	r5, r1
 8008000:	f1b8 0f00 	cmp.w	r8, #0
 8008004:	d011      	beq.n	800802a <sulp+0x3a>
 8008006:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800800a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800800e:	2b00      	cmp	r3, #0
 8008010:	dd0b      	ble.n	800802a <sulp+0x3a>
 8008012:	2400      	movs	r4, #0
 8008014:	051b      	lsls	r3, r3, #20
 8008016:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800801a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800801e:	4622      	mov	r2, r4
 8008020:	462b      	mov	r3, r5
 8008022:	f7f8 facf 	bl	80005c4 <__aeabi_dmul>
 8008026:	4604      	mov	r4, r0
 8008028:	460d      	mov	r5, r1
 800802a:	4620      	mov	r0, r4
 800802c:	4629      	mov	r1, r5
 800802e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008032:	0000      	movs	r0, r0
 8008034:	0000      	movs	r0, r0
	...

08008038 <_strtod_l>:
 8008038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803c:	b09f      	sub	sp, #124	; 0x7c
 800803e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008040:	2200      	movs	r2, #0
 8008042:	4604      	mov	r4, r0
 8008044:	921a      	str	r2, [sp, #104]	; 0x68
 8008046:	460d      	mov	r5, r1
 8008048:	f04f 0800 	mov.w	r8, #0
 800804c:	f04f 0900 	mov.w	r9, #0
 8008050:	460a      	mov	r2, r1
 8008052:	9219      	str	r2, [sp, #100]	; 0x64
 8008054:	7811      	ldrb	r1, [r2, #0]
 8008056:	292b      	cmp	r1, #43	; 0x2b
 8008058:	d04a      	beq.n	80080f0 <_strtod_l+0xb8>
 800805a:	d838      	bhi.n	80080ce <_strtod_l+0x96>
 800805c:	290d      	cmp	r1, #13
 800805e:	d832      	bhi.n	80080c6 <_strtod_l+0x8e>
 8008060:	2908      	cmp	r1, #8
 8008062:	d832      	bhi.n	80080ca <_strtod_l+0x92>
 8008064:	2900      	cmp	r1, #0
 8008066:	d03b      	beq.n	80080e0 <_strtod_l+0xa8>
 8008068:	2200      	movs	r2, #0
 800806a:	920e      	str	r2, [sp, #56]	; 0x38
 800806c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800806e:	7832      	ldrb	r2, [r6, #0]
 8008070:	2a30      	cmp	r2, #48	; 0x30
 8008072:	f040 80b2 	bne.w	80081da <_strtod_l+0x1a2>
 8008076:	7872      	ldrb	r2, [r6, #1]
 8008078:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800807c:	2a58      	cmp	r2, #88	; 0x58
 800807e:	d16e      	bne.n	800815e <_strtod_l+0x126>
 8008080:	9302      	str	r3, [sp, #8]
 8008082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008084:	4620      	mov	r0, r4
 8008086:	9301      	str	r3, [sp, #4]
 8008088:	ab1a      	add	r3, sp, #104	; 0x68
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	4a8c      	ldr	r2, [pc, #560]	; (80082c0 <_strtod_l+0x288>)
 800808e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008090:	a919      	add	r1, sp, #100	; 0x64
 8008092:	f001 fcc7 	bl	8009a24 <__gethex>
 8008096:	f010 070f 	ands.w	r7, r0, #15
 800809a:	4605      	mov	r5, r0
 800809c:	d005      	beq.n	80080aa <_strtod_l+0x72>
 800809e:	2f06      	cmp	r7, #6
 80080a0:	d128      	bne.n	80080f4 <_strtod_l+0xbc>
 80080a2:	2300      	movs	r3, #0
 80080a4:	3601      	adds	r6, #1
 80080a6:	9619      	str	r6, [sp, #100]	; 0x64
 80080a8:	930e      	str	r3, [sp, #56]	; 0x38
 80080aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f040 85a0 	bne.w	8008bf2 <_strtod_l+0xbba>
 80080b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080b4:	b1cb      	cbz	r3, 80080ea <_strtod_l+0xb2>
 80080b6:	4642      	mov	r2, r8
 80080b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80080bc:	4610      	mov	r0, r2
 80080be:	4619      	mov	r1, r3
 80080c0:	b01f      	add	sp, #124	; 0x7c
 80080c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c6:	2920      	cmp	r1, #32
 80080c8:	d1ce      	bne.n	8008068 <_strtod_l+0x30>
 80080ca:	3201      	adds	r2, #1
 80080cc:	e7c1      	b.n	8008052 <_strtod_l+0x1a>
 80080ce:	292d      	cmp	r1, #45	; 0x2d
 80080d0:	d1ca      	bne.n	8008068 <_strtod_l+0x30>
 80080d2:	2101      	movs	r1, #1
 80080d4:	910e      	str	r1, [sp, #56]	; 0x38
 80080d6:	1c51      	adds	r1, r2, #1
 80080d8:	9119      	str	r1, [sp, #100]	; 0x64
 80080da:	7852      	ldrb	r2, [r2, #1]
 80080dc:	2a00      	cmp	r2, #0
 80080de:	d1c5      	bne.n	800806c <_strtod_l+0x34>
 80080e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080e2:	9519      	str	r5, [sp, #100]	; 0x64
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f040 8582 	bne.w	8008bee <_strtod_l+0xbb6>
 80080ea:	4642      	mov	r2, r8
 80080ec:	464b      	mov	r3, r9
 80080ee:	e7e5      	b.n	80080bc <_strtod_l+0x84>
 80080f0:	2100      	movs	r1, #0
 80080f2:	e7ef      	b.n	80080d4 <_strtod_l+0x9c>
 80080f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80080f6:	b13a      	cbz	r2, 8008108 <_strtod_l+0xd0>
 80080f8:	2135      	movs	r1, #53	; 0x35
 80080fa:	a81c      	add	r0, sp, #112	; 0x70
 80080fc:	f7ff ff34 	bl	8007f68 <__copybits>
 8008100:	4620      	mov	r0, r4
 8008102:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008104:	f7ff fb18 	bl	8007738 <_Bfree>
 8008108:	3f01      	subs	r7, #1
 800810a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800810c:	2f04      	cmp	r7, #4
 800810e:	d806      	bhi.n	800811e <_strtod_l+0xe6>
 8008110:	e8df f007 	tbb	[pc, r7]
 8008114:	201d0314 	.word	0x201d0314
 8008118:	14          	.byte	0x14
 8008119:	00          	.byte	0x00
 800811a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800811e:	05e9      	lsls	r1, r5, #23
 8008120:	bf48      	it	mi
 8008122:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008126:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800812a:	0d1b      	lsrs	r3, r3, #20
 800812c:	051b      	lsls	r3, r3, #20
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1bb      	bne.n	80080aa <_strtod_l+0x72>
 8008132:	f7fe fb17 	bl	8006764 <__errno>
 8008136:	2322      	movs	r3, #34	; 0x22
 8008138:	6003      	str	r3, [r0, #0]
 800813a:	e7b6      	b.n	80080aa <_strtod_l+0x72>
 800813c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008140:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008144:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008148:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800814c:	e7e7      	b.n	800811e <_strtod_l+0xe6>
 800814e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80082c4 <_strtod_l+0x28c>
 8008152:	e7e4      	b.n	800811e <_strtod_l+0xe6>
 8008154:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008158:	f04f 38ff 	mov.w	r8, #4294967295
 800815c:	e7df      	b.n	800811e <_strtod_l+0xe6>
 800815e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	9219      	str	r2, [sp, #100]	; 0x64
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	2b30      	cmp	r3, #48	; 0x30
 8008168:	d0f9      	beq.n	800815e <_strtod_l+0x126>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d09d      	beq.n	80080aa <_strtod_l+0x72>
 800816e:	2301      	movs	r3, #1
 8008170:	f04f 0a00 	mov.w	sl, #0
 8008174:	220a      	movs	r2, #10
 8008176:	46d3      	mov	fp, sl
 8008178:	9305      	str	r3, [sp, #20]
 800817a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800817c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008180:	930b      	str	r3, [sp, #44]	; 0x2c
 8008182:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008184:	7806      	ldrb	r6, [r0, #0]
 8008186:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800818a:	b2d9      	uxtb	r1, r3
 800818c:	2909      	cmp	r1, #9
 800818e:	d926      	bls.n	80081de <_strtod_l+0x1a6>
 8008190:	2201      	movs	r2, #1
 8008192:	494d      	ldr	r1, [pc, #308]	; (80082c8 <_strtod_l+0x290>)
 8008194:	f001 fb75 	bl	8009882 <strncmp>
 8008198:	2800      	cmp	r0, #0
 800819a:	d030      	beq.n	80081fe <_strtod_l+0x1c6>
 800819c:	2000      	movs	r0, #0
 800819e:	4632      	mov	r2, r6
 80081a0:	4603      	mov	r3, r0
 80081a2:	465e      	mov	r6, fp
 80081a4:	9008      	str	r0, [sp, #32]
 80081a6:	2a65      	cmp	r2, #101	; 0x65
 80081a8:	d001      	beq.n	80081ae <_strtod_l+0x176>
 80081aa:	2a45      	cmp	r2, #69	; 0x45
 80081ac:	d113      	bne.n	80081d6 <_strtod_l+0x19e>
 80081ae:	b91e      	cbnz	r6, 80081b8 <_strtod_l+0x180>
 80081b0:	9a05      	ldr	r2, [sp, #20]
 80081b2:	4302      	orrs	r2, r0
 80081b4:	d094      	beq.n	80080e0 <_strtod_l+0xa8>
 80081b6:	2600      	movs	r6, #0
 80081b8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80081ba:	1c6a      	adds	r2, r5, #1
 80081bc:	9219      	str	r2, [sp, #100]	; 0x64
 80081be:	786a      	ldrb	r2, [r5, #1]
 80081c0:	2a2b      	cmp	r2, #43	; 0x2b
 80081c2:	d074      	beq.n	80082ae <_strtod_l+0x276>
 80081c4:	2a2d      	cmp	r2, #45	; 0x2d
 80081c6:	d078      	beq.n	80082ba <_strtod_l+0x282>
 80081c8:	f04f 0c00 	mov.w	ip, #0
 80081cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80081d0:	2909      	cmp	r1, #9
 80081d2:	d97f      	bls.n	80082d4 <_strtod_l+0x29c>
 80081d4:	9519      	str	r5, [sp, #100]	; 0x64
 80081d6:	2700      	movs	r7, #0
 80081d8:	e09e      	b.n	8008318 <_strtod_l+0x2e0>
 80081da:	2300      	movs	r3, #0
 80081dc:	e7c8      	b.n	8008170 <_strtod_l+0x138>
 80081de:	f1bb 0f08 	cmp.w	fp, #8
 80081e2:	bfd8      	it	le
 80081e4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80081e6:	f100 0001 	add.w	r0, r0, #1
 80081ea:	bfd6      	itet	le
 80081ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80081f0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80081f4:	930a      	strle	r3, [sp, #40]	; 0x28
 80081f6:	f10b 0b01 	add.w	fp, fp, #1
 80081fa:	9019      	str	r0, [sp, #100]	; 0x64
 80081fc:	e7c1      	b.n	8008182 <_strtod_l+0x14a>
 80081fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	9219      	str	r2, [sp, #100]	; 0x64
 8008204:	785a      	ldrb	r2, [r3, #1]
 8008206:	f1bb 0f00 	cmp.w	fp, #0
 800820a:	d037      	beq.n	800827c <_strtod_l+0x244>
 800820c:	465e      	mov	r6, fp
 800820e:	9008      	str	r0, [sp, #32]
 8008210:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008214:	2b09      	cmp	r3, #9
 8008216:	d912      	bls.n	800823e <_strtod_l+0x206>
 8008218:	2301      	movs	r3, #1
 800821a:	e7c4      	b.n	80081a6 <_strtod_l+0x16e>
 800821c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800821e:	3001      	adds	r0, #1
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	9219      	str	r2, [sp, #100]	; 0x64
 8008224:	785a      	ldrb	r2, [r3, #1]
 8008226:	2a30      	cmp	r2, #48	; 0x30
 8008228:	d0f8      	beq.n	800821c <_strtod_l+0x1e4>
 800822a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800822e:	2b08      	cmp	r3, #8
 8008230:	f200 84e4 	bhi.w	8008bfc <_strtod_l+0xbc4>
 8008234:	9008      	str	r0, [sp, #32]
 8008236:	2000      	movs	r0, #0
 8008238:	4606      	mov	r6, r0
 800823a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800823c:	930b      	str	r3, [sp, #44]	; 0x2c
 800823e:	3a30      	subs	r2, #48	; 0x30
 8008240:	f100 0301 	add.w	r3, r0, #1
 8008244:	d014      	beq.n	8008270 <_strtod_l+0x238>
 8008246:	9908      	ldr	r1, [sp, #32]
 8008248:	eb00 0c06 	add.w	ip, r0, r6
 800824c:	4419      	add	r1, r3
 800824e:	9108      	str	r1, [sp, #32]
 8008250:	4633      	mov	r3, r6
 8008252:	210a      	movs	r1, #10
 8008254:	4563      	cmp	r3, ip
 8008256:	d113      	bne.n	8008280 <_strtod_l+0x248>
 8008258:	1833      	adds	r3, r6, r0
 800825a:	2b08      	cmp	r3, #8
 800825c:	f106 0601 	add.w	r6, r6, #1
 8008260:	4406      	add	r6, r0
 8008262:	dc1a      	bgt.n	800829a <_strtod_l+0x262>
 8008264:	230a      	movs	r3, #10
 8008266:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008268:	fb03 2301 	mla	r3, r3, r1, r2
 800826c:	930a      	str	r3, [sp, #40]	; 0x28
 800826e:	2300      	movs	r3, #0
 8008270:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008272:	4618      	mov	r0, r3
 8008274:	1c51      	adds	r1, r2, #1
 8008276:	9119      	str	r1, [sp, #100]	; 0x64
 8008278:	7852      	ldrb	r2, [r2, #1]
 800827a:	e7c9      	b.n	8008210 <_strtod_l+0x1d8>
 800827c:	4658      	mov	r0, fp
 800827e:	e7d2      	b.n	8008226 <_strtod_l+0x1ee>
 8008280:	2b08      	cmp	r3, #8
 8008282:	f103 0301 	add.w	r3, r3, #1
 8008286:	dc03      	bgt.n	8008290 <_strtod_l+0x258>
 8008288:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800828a:	434f      	muls	r7, r1
 800828c:	970a      	str	r7, [sp, #40]	; 0x28
 800828e:	e7e1      	b.n	8008254 <_strtod_l+0x21c>
 8008290:	2b10      	cmp	r3, #16
 8008292:	bfd8      	it	le
 8008294:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008298:	e7dc      	b.n	8008254 <_strtod_l+0x21c>
 800829a:	2e10      	cmp	r6, #16
 800829c:	bfdc      	itt	le
 800829e:	230a      	movle	r3, #10
 80082a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80082a4:	e7e3      	b.n	800826e <_strtod_l+0x236>
 80082a6:	2300      	movs	r3, #0
 80082a8:	9308      	str	r3, [sp, #32]
 80082aa:	2301      	movs	r3, #1
 80082ac:	e780      	b.n	80081b0 <_strtod_l+0x178>
 80082ae:	f04f 0c00 	mov.w	ip, #0
 80082b2:	1caa      	adds	r2, r5, #2
 80082b4:	9219      	str	r2, [sp, #100]	; 0x64
 80082b6:	78aa      	ldrb	r2, [r5, #2]
 80082b8:	e788      	b.n	80081cc <_strtod_l+0x194>
 80082ba:	f04f 0c01 	mov.w	ip, #1
 80082be:	e7f8      	b.n	80082b2 <_strtod_l+0x27a>
 80082c0:	0800a9c8 	.word	0x0800a9c8
 80082c4:	7ff00000 	.word	0x7ff00000
 80082c8:	0800a9c4 	.word	0x0800a9c4
 80082cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80082ce:	1c51      	adds	r1, r2, #1
 80082d0:	9119      	str	r1, [sp, #100]	; 0x64
 80082d2:	7852      	ldrb	r2, [r2, #1]
 80082d4:	2a30      	cmp	r2, #48	; 0x30
 80082d6:	d0f9      	beq.n	80082cc <_strtod_l+0x294>
 80082d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80082dc:	2908      	cmp	r1, #8
 80082de:	f63f af7a 	bhi.w	80081d6 <_strtod_l+0x19e>
 80082e2:	3a30      	subs	r2, #48	; 0x30
 80082e4:	9209      	str	r2, [sp, #36]	; 0x24
 80082e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80082e8:	920c      	str	r2, [sp, #48]	; 0x30
 80082ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80082ec:	1c57      	adds	r7, r2, #1
 80082ee:	9719      	str	r7, [sp, #100]	; 0x64
 80082f0:	7852      	ldrb	r2, [r2, #1]
 80082f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80082f6:	f1be 0f09 	cmp.w	lr, #9
 80082fa:	d938      	bls.n	800836e <_strtod_l+0x336>
 80082fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082fe:	1a7f      	subs	r7, r7, r1
 8008300:	2f08      	cmp	r7, #8
 8008302:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008306:	dc03      	bgt.n	8008310 <_strtod_l+0x2d8>
 8008308:	9909      	ldr	r1, [sp, #36]	; 0x24
 800830a:	428f      	cmp	r7, r1
 800830c:	bfa8      	it	ge
 800830e:	460f      	movge	r7, r1
 8008310:	f1bc 0f00 	cmp.w	ip, #0
 8008314:	d000      	beq.n	8008318 <_strtod_l+0x2e0>
 8008316:	427f      	negs	r7, r7
 8008318:	2e00      	cmp	r6, #0
 800831a:	d14f      	bne.n	80083bc <_strtod_l+0x384>
 800831c:	9905      	ldr	r1, [sp, #20]
 800831e:	4301      	orrs	r1, r0
 8008320:	f47f aec3 	bne.w	80080aa <_strtod_l+0x72>
 8008324:	2b00      	cmp	r3, #0
 8008326:	f47f aedb 	bne.w	80080e0 <_strtod_l+0xa8>
 800832a:	2a69      	cmp	r2, #105	; 0x69
 800832c:	d029      	beq.n	8008382 <_strtod_l+0x34a>
 800832e:	dc26      	bgt.n	800837e <_strtod_l+0x346>
 8008330:	2a49      	cmp	r2, #73	; 0x49
 8008332:	d026      	beq.n	8008382 <_strtod_l+0x34a>
 8008334:	2a4e      	cmp	r2, #78	; 0x4e
 8008336:	f47f aed3 	bne.w	80080e0 <_strtod_l+0xa8>
 800833a:	499a      	ldr	r1, [pc, #616]	; (80085a4 <_strtod_l+0x56c>)
 800833c:	a819      	add	r0, sp, #100	; 0x64
 800833e:	f001 fdb3 	bl	8009ea8 <__match>
 8008342:	2800      	cmp	r0, #0
 8008344:	f43f aecc 	beq.w	80080e0 <_strtod_l+0xa8>
 8008348:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	2b28      	cmp	r3, #40	; 0x28
 800834e:	d12f      	bne.n	80083b0 <_strtod_l+0x378>
 8008350:	4995      	ldr	r1, [pc, #596]	; (80085a8 <_strtod_l+0x570>)
 8008352:	aa1c      	add	r2, sp, #112	; 0x70
 8008354:	a819      	add	r0, sp, #100	; 0x64
 8008356:	f001 fdbb 	bl	8009ed0 <__hexnan>
 800835a:	2805      	cmp	r0, #5
 800835c:	d128      	bne.n	80083b0 <_strtod_l+0x378>
 800835e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008360:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008364:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008368:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800836c:	e69d      	b.n	80080aa <_strtod_l+0x72>
 800836e:	210a      	movs	r1, #10
 8008370:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008372:	fb01 2107 	mla	r1, r1, r7, r2
 8008376:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800837a:	9209      	str	r2, [sp, #36]	; 0x24
 800837c:	e7b5      	b.n	80082ea <_strtod_l+0x2b2>
 800837e:	2a6e      	cmp	r2, #110	; 0x6e
 8008380:	e7d9      	b.n	8008336 <_strtod_l+0x2fe>
 8008382:	498a      	ldr	r1, [pc, #552]	; (80085ac <_strtod_l+0x574>)
 8008384:	a819      	add	r0, sp, #100	; 0x64
 8008386:	f001 fd8f 	bl	8009ea8 <__match>
 800838a:	2800      	cmp	r0, #0
 800838c:	f43f aea8 	beq.w	80080e0 <_strtod_l+0xa8>
 8008390:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008392:	4987      	ldr	r1, [pc, #540]	; (80085b0 <_strtod_l+0x578>)
 8008394:	3b01      	subs	r3, #1
 8008396:	a819      	add	r0, sp, #100	; 0x64
 8008398:	9319      	str	r3, [sp, #100]	; 0x64
 800839a:	f001 fd85 	bl	8009ea8 <__match>
 800839e:	b910      	cbnz	r0, 80083a6 <_strtod_l+0x36e>
 80083a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083a2:	3301      	adds	r3, #1
 80083a4:	9319      	str	r3, [sp, #100]	; 0x64
 80083a6:	f04f 0800 	mov.w	r8, #0
 80083aa:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80085b4 <_strtod_l+0x57c>
 80083ae:	e67c      	b.n	80080aa <_strtod_l+0x72>
 80083b0:	4881      	ldr	r0, [pc, #516]	; (80085b8 <_strtod_l+0x580>)
 80083b2:	f001 fa97 	bl	80098e4 <nan>
 80083b6:	4680      	mov	r8, r0
 80083b8:	4689      	mov	r9, r1
 80083ba:	e676      	b.n	80080aa <_strtod_l+0x72>
 80083bc:	9b08      	ldr	r3, [sp, #32]
 80083be:	f1bb 0f00 	cmp.w	fp, #0
 80083c2:	bf08      	it	eq
 80083c4:	46b3      	moveq	fp, r6
 80083c6:	1afb      	subs	r3, r7, r3
 80083c8:	2e10      	cmp	r6, #16
 80083ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80083cc:	4635      	mov	r5, r6
 80083ce:	9309      	str	r3, [sp, #36]	; 0x24
 80083d0:	bfa8      	it	ge
 80083d2:	2510      	movge	r5, #16
 80083d4:	f7f8 f87c 	bl	80004d0 <__aeabi_ui2d>
 80083d8:	2e09      	cmp	r6, #9
 80083da:	4680      	mov	r8, r0
 80083dc:	4689      	mov	r9, r1
 80083de:	dd13      	ble.n	8008408 <_strtod_l+0x3d0>
 80083e0:	4b76      	ldr	r3, [pc, #472]	; (80085bc <_strtod_l+0x584>)
 80083e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80083e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80083ea:	f7f8 f8eb 	bl	80005c4 <__aeabi_dmul>
 80083ee:	4680      	mov	r8, r0
 80083f0:	4650      	mov	r0, sl
 80083f2:	4689      	mov	r9, r1
 80083f4:	f7f8 f86c 	bl	80004d0 <__aeabi_ui2d>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4640      	mov	r0, r8
 80083fe:	4649      	mov	r1, r9
 8008400:	f7f7 ff2a 	bl	8000258 <__adddf3>
 8008404:	4680      	mov	r8, r0
 8008406:	4689      	mov	r9, r1
 8008408:	2e0f      	cmp	r6, #15
 800840a:	dc36      	bgt.n	800847a <_strtod_l+0x442>
 800840c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840e:	2b00      	cmp	r3, #0
 8008410:	f43f ae4b 	beq.w	80080aa <_strtod_l+0x72>
 8008414:	dd22      	ble.n	800845c <_strtod_l+0x424>
 8008416:	2b16      	cmp	r3, #22
 8008418:	dc09      	bgt.n	800842e <_strtod_l+0x3f6>
 800841a:	4968      	ldr	r1, [pc, #416]	; (80085bc <_strtod_l+0x584>)
 800841c:	4642      	mov	r2, r8
 800841e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008422:	464b      	mov	r3, r9
 8008424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008428:	f7f8 f8cc 	bl	80005c4 <__aeabi_dmul>
 800842c:	e7c3      	b.n	80083b6 <_strtod_l+0x37e>
 800842e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008430:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008434:	4293      	cmp	r3, r2
 8008436:	db20      	blt.n	800847a <_strtod_l+0x442>
 8008438:	4c60      	ldr	r4, [pc, #384]	; (80085bc <_strtod_l+0x584>)
 800843a:	f1c6 060f 	rsb	r6, r6, #15
 800843e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008442:	4642      	mov	r2, r8
 8008444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008448:	464b      	mov	r3, r9
 800844a:	f7f8 f8bb 	bl	80005c4 <__aeabi_dmul>
 800844e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008450:	1b9e      	subs	r6, r3, r6
 8008452:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008456:	e9d4 2300 	ldrd	r2, r3, [r4]
 800845a:	e7e5      	b.n	8008428 <_strtod_l+0x3f0>
 800845c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845e:	3316      	adds	r3, #22
 8008460:	db0b      	blt.n	800847a <_strtod_l+0x442>
 8008462:	9b08      	ldr	r3, [sp, #32]
 8008464:	4640      	mov	r0, r8
 8008466:	1bdf      	subs	r7, r3, r7
 8008468:	4b54      	ldr	r3, [pc, #336]	; (80085bc <_strtod_l+0x584>)
 800846a:	4649      	mov	r1, r9
 800846c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008474:	f7f8 f9d0 	bl	8000818 <__aeabi_ddiv>
 8008478:	e79d      	b.n	80083b6 <_strtod_l+0x37e>
 800847a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847c:	1b75      	subs	r5, r6, r5
 800847e:	441d      	add	r5, r3
 8008480:	2d00      	cmp	r5, #0
 8008482:	dd70      	ble.n	8008566 <_strtod_l+0x52e>
 8008484:	f015 030f 	ands.w	r3, r5, #15
 8008488:	d00a      	beq.n	80084a0 <_strtod_l+0x468>
 800848a:	494c      	ldr	r1, [pc, #304]	; (80085bc <_strtod_l+0x584>)
 800848c:	4642      	mov	r2, r8
 800848e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008496:	464b      	mov	r3, r9
 8008498:	f7f8 f894 	bl	80005c4 <__aeabi_dmul>
 800849c:	4680      	mov	r8, r0
 800849e:	4689      	mov	r9, r1
 80084a0:	f035 050f 	bics.w	r5, r5, #15
 80084a4:	d04d      	beq.n	8008542 <_strtod_l+0x50a>
 80084a6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80084aa:	dd22      	ble.n	80084f2 <_strtod_l+0x4ba>
 80084ac:	2600      	movs	r6, #0
 80084ae:	46b3      	mov	fp, r6
 80084b0:	960b      	str	r6, [sp, #44]	; 0x2c
 80084b2:	9608      	str	r6, [sp, #32]
 80084b4:	2322      	movs	r3, #34	; 0x22
 80084b6:	f04f 0800 	mov.w	r8, #0
 80084ba:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80085b4 <_strtod_l+0x57c>
 80084be:	6023      	str	r3, [r4, #0]
 80084c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f43f adf1 	beq.w	80080aa <_strtod_l+0x72>
 80084c8:	4620      	mov	r0, r4
 80084ca:	991a      	ldr	r1, [sp, #104]	; 0x68
 80084cc:	f7ff f934 	bl	8007738 <_Bfree>
 80084d0:	4620      	mov	r0, r4
 80084d2:	9908      	ldr	r1, [sp, #32]
 80084d4:	f7ff f930 	bl	8007738 <_Bfree>
 80084d8:	4659      	mov	r1, fp
 80084da:	4620      	mov	r0, r4
 80084dc:	f7ff f92c 	bl	8007738 <_Bfree>
 80084e0:	4620      	mov	r0, r4
 80084e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084e4:	f7ff f928 	bl	8007738 <_Bfree>
 80084e8:	4631      	mov	r1, r6
 80084ea:	4620      	mov	r0, r4
 80084ec:	f7ff f924 	bl	8007738 <_Bfree>
 80084f0:	e5db      	b.n	80080aa <_strtod_l+0x72>
 80084f2:	4b33      	ldr	r3, [pc, #204]	; (80085c0 <_strtod_l+0x588>)
 80084f4:	4640      	mov	r0, r8
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	2300      	movs	r3, #0
 80084fa:	4649      	mov	r1, r9
 80084fc:	469a      	mov	sl, r3
 80084fe:	112d      	asrs	r5, r5, #4
 8008500:	2d01      	cmp	r5, #1
 8008502:	dc21      	bgt.n	8008548 <_strtod_l+0x510>
 8008504:	b10b      	cbz	r3, 800850a <_strtod_l+0x4d2>
 8008506:	4680      	mov	r8, r0
 8008508:	4689      	mov	r9, r1
 800850a:	492d      	ldr	r1, [pc, #180]	; (80085c0 <_strtod_l+0x588>)
 800850c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008510:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008514:	4642      	mov	r2, r8
 8008516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800851a:	464b      	mov	r3, r9
 800851c:	f7f8 f852 	bl	80005c4 <__aeabi_dmul>
 8008520:	4b24      	ldr	r3, [pc, #144]	; (80085b4 <_strtod_l+0x57c>)
 8008522:	460a      	mov	r2, r1
 8008524:	400b      	ands	r3, r1
 8008526:	4927      	ldr	r1, [pc, #156]	; (80085c4 <_strtod_l+0x58c>)
 8008528:	4680      	mov	r8, r0
 800852a:	428b      	cmp	r3, r1
 800852c:	d8be      	bhi.n	80084ac <_strtod_l+0x474>
 800852e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008532:	428b      	cmp	r3, r1
 8008534:	bf86      	itte	hi
 8008536:	f04f 38ff 	movhi.w	r8, #4294967295
 800853a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80085c8 <_strtod_l+0x590>
 800853e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008542:	2300      	movs	r3, #0
 8008544:	9305      	str	r3, [sp, #20]
 8008546:	e07b      	b.n	8008640 <_strtod_l+0x608>
 8008548:	07ea      	lsls	r2, r5, #31
 800854a:	d505      	bpl.n	8008558 <_strtod_l+0x520>
 800854c:	9b05      	ldr	r3, [sp, #20]
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f7f8 f837 	bl	80005c4 <__aeabi_dmul>
 8008556:	2301      	movs	r3, #1
 8008558:	9a05      	ldr	r2, [sp, #20]
 800855a:	f10a 0a01 	add.w	sl, sl, #1
 800855e:	3208      	adds	r2, #8
 8008560:	106d      	asrs	r5, r5, #1
 8008562:	9205      	str	r2, [sp, #20]
 8008564:	e7cc      	b.n	8008500 <_strtod_l+0x4c8>
 8008566:	d0ec      	beq.n	8008542 <_strtod_l+0x50a>
 8008568:	426d      	negs	r5, r5
 800856a:	f015 020f 	ands.w	r2, r5, #15
 800856e:	d00a      	beq.n	8008586 <_strtod_l+0x54e>
 8008570:	4b12      	ldr	r3, [pc, #72]	; (80085bc <_strtod_l+0x584>)
 8008572:	4640      	mov	r0, r8
 8008574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008578:	4649      	mov	r1, r9
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f7f8 f94b 	bl	8000818 <__aeabi_ddiv>
 8008582:	4680      	mov	r8, r0
 8008584:	4689      	mov	r9, r1
 8008586:	112d      	asrs	r5, r5, #4
 8008588:	d0db      	beq.n	8008542 <_strtod_l+0x50a>
 800858a:	2d1f      	cmp	r5, #31
 800858c:	dd1e      	ble.n	80085cc <_strtod_l+0x594>
 800858e:	2600      	movs	r6, #0
 8008590:	46b3      	mov	fp, r6
 8008592:	960b      	str	r6, [sp, #44]	; 0x2c
 8008594:	9608      	str	r6, [sp, #32]
 8008596:	2322      	movs	r3, #34	; 0x22
 8008598:	f04f 0800 	mov.w	r8, #0
 800859c:	f04f 0900 	mov.w	r9, #0
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	e78d      	b.n	80084c0 <_strtod_l+0x488>
 80085a4:	0800a7b7 	.word	0x0800a7b7
 80085a8:	0800a9dc 	.word	0x0800a9dc
 80085ac:	0800a7af 	.word	0x0800a7af
 80085b0:	0800a7e4 	.word	0x0800a7e4
 80085b4:	7ff00000 	.word	0x7ff00000
 80085b8:	0800ab88 	.word	0x0800ab88
 80085bc:	0800a8f0 	.word	0x0800a8f0
 80085c0:	0800a8c8 	.word	0x0800a8c8
 80085c4:	7ca00000 	.word	0x7ca00000
 80085c8:	7fefffff 	.word	0x7fefffff
 80085cc:	f015 0310 	ands.w	r3, r5, #16
 80085d0:	bf18      	it	ne
 80085d2:	236a      	movne	r3, #106	; 0x6a
 80085d4:	4640      	mov	r0, r8
 80085d6:	9305      	str	r3, [sp, #20]
 80085d8:	4649      	mov	r1, r9
 80085da:	2300      	movs	r3, #0
 80085dc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80088a8 <_strtod_l+0x870>
 80085e0:	07ea      	lsls	r2, r5, #31
 80085e2:	d504      	bpl.n	80085ee <_strtod_l+0x5b6>
 80085e4:	e9da 2300 	ldrd	r2, r3, [sl]
 80085e8:	f7f7 ffec 	bl	80005c4 <__aeabi_dmul>
 80085ec:	2301      	movs	r3, #1
 80085ee:	106d      	asrs	r5, r5, #1
 80085f0:	f10a 0a08 	add.w	sl, sl, #8
 80085f4:	d1f4      	bne.n	80085e0 <_strtod_l+0x5a8>
 80085f6:	b10b      	cbz	r3, 80085fc <_strtod_l+0x5c4>
 80085f8:	4680      	mov	r8, r0
 80085fa:	4689      	mov	r9, r1
 80085fc:	9b05      	ldr	r3, [sp, #20]
 80085fe:	b1bb      	cbz	r3, 8008630 <_strtod_l+0x5f8>
 8008600:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008604:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008608:	2b00      	cmp	r3, #0
 800860a:	4649      	mov	r1, r9
 800860c:	dd10      	ble.n	8008630 <_strtod_l+0x5f8>
 800860e:	2b1f      	cmp	r3, #31
 8008610:	f340 8128 	ble.w	8008864 <_strtod_l+0x82c>
 8008614:	2b34      	cmp	r3, #52	; 0x34
 8008616:	bfd8      	it	le
 8008618:	f04f 33ff 	movle.w	r3, #4294967295
 800861c:	f04f 0800 	mov.w	r8, #0
 8008620:	bfcf      	iteee	gt
 8008622:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008626:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800862a:	4093      	lslle	r3, r2
 800862c:	ea03 0901 	andle.w	r9, r3, r1
 8008630:	2200      	movs	r2, #0
 8008632:	2300      	movs	r3, #0
 8008634:	4640      	mov	r0, r8
 8008636:	4649      	mov	r1, r9
 8008638:	f7f8 fa2c 	bl	8000a94 <__aeabi_dcmpeq>
 800863c:	2800      	cmp	r0, #0
 800863e:	d1a6      	bne.n	800858e <_strtod_l+0x556>
 8008640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008642:	465a      	mov	r2, fp
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	4620      	mov	r0, r4
 8008648:	4633      	mov	r3, r6
 800864a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800864c:	f7ff f8dc 	bl	8007808 <__s2b>
 8008650:	900b      	str	r0, [sp, #44]	; 0x2c
 8008652:	2800      	cmp	r0, #0
 8008654:	f43f af2a 	beq.w	80084ac <_strtod_l+0x474>
 8008658:	2600      	movs	r6, #0
 800865a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800865c:	9b08      	ldr	r3, [sp, #32]
 800865e:	2a00      	cmp	r2, #0
 8008660:	eba3 0307 	sub.w	r3, r3, r7
 8008664:	bfa8      	it	ge
 8008666:	2300      	movge	r3, #0
 8008668:	46b3      	mov	fp, r6
 800866a:	9312      	str	r3, [sp, #72]	; 0x48
 800866c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008670:	9316      	str	r3, [sp, #88]	; 0x58
 8008672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008674:	4620      	mov	r0, r4
 8008676:	6859      	ldr	r1, [r3, #4]
 8008678:	f7ff f81e 	bl	80076b8 <_Balloc>
 800867c:	9008      	str	r0, [sp, #32]
 800867e:	2800      	cmp	r0, #0
 8008680:	f43f af18 	beq.w	80084b4 <_strtod_l+0x47c>
 8008684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008686:	300c      	adds	r0, #12
 8008688:	691a      	ldr	r2, [r3, #16]
 800868a:	f103 010c 	add.w	r1, r3, #12
 800868e:	3202      	adds	r2, #2
 8008690:	0092      	lsls	r2, r2, #2
 8008692:	f001 f919 	bl	80098c8 <memcpy>
 8008696:	ab1c      	add	r3, sp, #112	; 0x70
 8008698:	9301      	str	r3, [sp, #4]
 800869a:	ab1b      	add	r3, sp, #108	; 0x6c
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	4642      	mov	r2, r8
 80086a0:	464b      	mov	r3, r9
 80086a2:	4620      	mov	r0, r4
 80086a4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80086a8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80086ac:	f7ff fbd8 	bl	8007e60 <__d2b>
 80086b0:	901a      	str	r0, [sp, #104]	; 0x68
 80086b2:	2800      	cmp	r0, #0
 80086b4:	f43f aefe 	beq.w	80084b4 <_strtod_l+0x47c>
 80086b8:	2101      	movs	r1, #1
 80086ba:	4620      	mov	r0, r4
 80086bc:	f7ff f93c 	bl	8007938 <__i2b>
 80086c0:	4683      	mov	fp, r0
 80086c2:	2800      	cmp	r0, #0
 80086c4:	f43f aef6 	beq.w	80084b4 <_strtod_l+0x47c>
 80086c8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80086ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80086cc:	2f00      	cmp	r7, #0
 80086ce:	bfab      	itete	ge
 80086d0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80086d2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80086d4:	eb07 0a03 	addge.w	sl, r7, r3
 80086d8:	1bdd      	sublt	r5, r3, r7
 80086da:	9b05      	ldr	r3, [sp, #20]
 80086dc:	bfa8      	it	ge
 80086de:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80086e0:	eba7 0703 	sub.w	r7, r7, r3
 80086e4:	4417      	add	r7, r2
 80086e6:	4b71      	ldr	r3, [pc, #452]	; (80088ac <_strtod_l+0x874>)
 80086e8:	f107 37ff 	add.w	r7, r7, #4294967295
 80086ec:	bfb8      	it	lt
 80086ee:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80086f2:	429f      	cmp	r7, r3
 80086f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80086f8:	f280 80c7 	bge.w	800888a <_strtod_l+0x852>
 80086fc:	1bdb      	subs	r3, r3, r7
 80086fe:	2b1f      	cmp	r3, #31
 8008700:	f04f 0101 	mov.w	r1, #1
 8008704:	eba2 0203 	sub.w	r2, r2, r3
 8008708:	f300 80b3 	bgt.w	8008872 <_strtod_l+0x83a>
 800870c:	fa01 f303 	lsl.w	r3, r1, r3
 8008710:	9313      	str	r3, [sp, #76]	; 0x4c
 8008712:	2300      	movs	r3, #0
 8008714:	9310      	str	r3, [sp, #64]	; 0x40
 8008716:	eb0a 0702 	add.w	r7, sl, r2
 800871a:	9b05      	ldr	r3, [sp, #20]
 800871c:	45ba      	cmp	sl, r7
 800871e:	4415      	add	r5, r2
 8008720:	441d      	add	r5, r3
 8008722:	4653      	mov	r3, sl
 8008724:	bfa8      	it	ge
 8008726:	463b      	movge	r3, r7
 8008728:	42ab      	cmp	r3, r5
 800872a:	bfa8      	it	ge
 800872c:	462b      	movge	r3, r5
 800872e:	2b00      	cmp	r3, #0
 8008730:	bfc2      	ittt	gt
 8008732:	1aff      	subgt	r7, r7, r3
 8008734:	1aed      	subgt	r5, r5, r3
 8008736:	ebaa 0a03 	subgt.w	sl, sl, r3
 800873a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800873c:	2b00      	cmp	r3, #0
 800873e:	dd17      	ble.n	8008770 <_strtod_l+0x738>
 8008740:	4659      	mov	r1, fp
 8008742:	461a      	mov	r2, r3
 8008744:	4620      	mov	r0, r4
 8008746:	f7ff f9b5 	bl	8007ab4 <__pow5mult>
 800874a:	4683      	mov	fp, r0
 800874c:	2800      	cmp	r0, #0
 800874e:	f43f aeb1 	beq.w	80084b4 <_strtod_l+0x47c>
 8008752:	4601      	mov	r1, r0
 8008754:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008756:	4620      	mov	r0, r4
 8008758:	f7ff f904 	bl	8007964 <__multiply>
 800875c:	900a      	str	r0, [sp, #40]	; 0x28
 800875e:	2800      	cmp	r0, #0
 8008760:	f43f aea8 	beq.w	80084b4 <_strtod_l+0x47c>
 8008764:	4620      	mov	r0, r4
 8008766:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008768:	f7fe ffe6 	bl	8007738 <_Bfree>
 800876c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800876e:	931a      	str	r3, [sp, #104]	; 0x68
 8008770:	2f00      	cmp	r7, #0
 8008772:	f300 808f 	bgt.w	8008894 <_strtod_l+0x85c>
 8008776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008778:	2b00      	cmp	r3, #0
 800877a:	dd08      	ble.n	800878e <_strtod_l+0x756>
 800877c:	4620      	mov	r0, r4
 800877e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008780:	9908      	ldr	r1, [sp, #32]
 8008782:	f7ff f997 	bl	8007ab4 <__pow5mult>
 8008786:	9008      	str	r0, [sp, #32]
 8008788:	2800      	cmp	r0, #0
 800878a:	f43f ae93 	beq.w	80084b4 <_strtod_l+0x47c>
 800878e:	2d00      	cmp	r5, #0
 8008790:	dd08      	ble.n	80087a4 <_strtod_l+0x76c>
 8008792:	462a      	mov	r2, r5
 8008794:	4620      	mov	r0, r4
 8008796:	9908      	ldr	r1, [sp, #32]
 8008798:	f7ff f9e6 	bl	8007b68 <__lshift>
 800879c:	9008      	str	r0, [sp, #32]
 800879e:	2800      	cmp	r0, #0
 80087a0:	f43f ae88 	beq.w	80084b4 <_strtod_l+0x47c>
 80087a4:	f1ba 0f00 	cmp.w	sl, #0
 80087a8:	dd08      	ble.n	80087bc <_strtod_l+0x784>
 80087aa:	4659      	mov	r1, fp
 80087ac:	4652      	mov	r2, sl
 80087ae:	4620      	mov	r0, r4
 80087b0:	f7ff f9da 	bl	8007b68 <__lshift>
 80087b4:	4683      	mov	fp, r0
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f43f ae7c 	beq.w	80084b4 <_strtod_l+0x47c>
 80087bc:	4620      	mov	r0, r4
 80087be:	9a08      	ldr	r2, [sp, #32]
 80087c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80087c2:	f7ff fa59 	bl	8007c78 <__mdiff>
 80087c6:	4606      	mov	r6, r0
 80087c8:	2800      	cmp	r0, #0
 80087ca:	f43f ae73 	beq.w	80084b4 <_strtod_l+0x47c>
 80087ce:	2500      	movs	r5, #0
 80087d0:	68c3      	ldr	r3, [r0, #12]
 80087d2:	4659      	mov	r1, fp
 80087d4:	60c5      	str	r5, [r0, #12]
 80087d6:	930a      	str	r3, [sp, #40]	; 0x28
 80087d8:	f7ff fa32 	bl	8007c40 <__mcmp>
 80087dc:	42a8      	cmp	r0, r5
 80087de:	da6b      	bge.n	80088b8 <_strtod_l+0x880>
 80087e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e2:	ea53 0308 	orrs.w	r3, r3, r8
 80087e6:	f040 808f 	bne.w	8008908 <_strtod_l+0x8d0>
 80087ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f040 808a 	bne.w	8008908 <_strtod_l+0x8d0>
 80087f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087f8:	0d1b      	lsrs	r3, r3, #20
 80087fa:	051b      	lsls	r3, r3, #20
 80087fc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008800:	f240 8082 	bls.w	8008908 <_strtod_l+0x8d0>
 8008804:	6973      	ldr	r3, [r6, #20]
 8008806:	b913      	cbnz	r3, 800880e <_strtod_l+0x7d6>
 8008808:	6933      	ldr	r3, [r6, #16]
 800880a:	2b01      	cmp	r3, #1
 800880c:	dd7c      	ble.n	8008908 <_strtod_l+0x8d0>
 800880e:	4631      	mov	r1, r6
 8008810:	2201      	movs	r2, #1
 8008812:	4620      	mov	r0, r4
 8008814:	f7ff f9a8 	bl	8007b68 <__lshift>
 8008818:	4659      	mov	r1, fp
 800881a:	4606      	mov	r6, r0
 800881c:	f7ff fa10 	bl	8007c40 <__mcmp>
 8008820:	2800      	cmp	r0, #0
 8008822:	dd71      	ble.n	8008908 <_strtod_l+0x8d0>
 8008824:	9905      	ldr	r1, [sp, #20]
 8008826:	464b      	mov	r3, r9
 8008828:	4a21      	ldr	r2, [pc, #132]	; (80088b0 <_strtod_l+0x878>)
 800882a:	2900      	cmp	r1, #0
 800882c:	f000 808d 	beq.w	800894a <_strtod_l+0x912>
 8008830:	ea02 0109 	and.w	r1, r2, r9
 8008834:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008838:	f300 8087 	bgt.w	800894a <_strtod_l+0x912>
 800883c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008840:	f77f aea9 	ble.w	8008596 <_strtod_l+0x55e>
 8008844:	4640      	mov	r0, r8
 8008846:	4649      	mov	r1, r9
 8008848:	4b1a      	ldr	r3, [pc, #104]	; (80088b4 <_strtod_l+0x87c>)
 800884a:	2200      	movs	r2, #0
 800884c:	f7f7 feba 	bl	80005c4 <__aeabi_dmul>
 8008850:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <_strtod_l+0x878>)
 8008852:	4680      	mov	r8, r0
 8008854:	400b      	ands	r3, r1
 8008856:	4689      	mov	r9, r1
 8008858:	2b00      	cmp	r3, #0
 800885a:	f47f ae35 	bne.w	80084c8 <_strtod_l+0x490>
 800885e:	2322      	movs	r3, #34	; 0x22
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	e631      	b.n	80084c8 <_strtod_l+0x490>
 8008864:	f04f 32ff 	mov.w	r2, #4294967295
 8008868:	fa02 f303 	lsl.w	r3, r2, r3
 800886c:	ea03 0808 	and.w	r8, r3, r8
 8008870:	e6de      	b.n	8008630 <_strtod_l+0x5f8>
 8008872:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008876:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800887a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800887e:	37e2      	adds	r7, #226	; 0xe2
 8008880:	fa01 f307 	lsl.w	r3, r1, r7
 8008884:	9310      	str	r3, [sp, #64]	; 0x40
 8008886:	9113      	str	r1, [sp, #76]	; 0x4c
 8008888:	e745      	b.n	8008716 <_strtod_l+0x6de>
 800888a:	2300      	movs	r3, #0
 800888c:	9310      	str	r3, [sp, #64]	; 0x40
 800888e:	2301      	movs	r3, #1
 8008890:	9313      	str	r3, [sp, #76]	; 0x4c
 8008892:	e740      	b.n	8008716 <_strtod_l+0x6de>
 8008894:	463a      	mov	r2, r7
 8008896:	4620      	mov	r0, r4
 8008898:	991a      	ldr	r1, [sp, #104]	; 0x68
 800889a:	f7ff f965 	bl	8007b68 <__lshift>
 800889e:	901a      	str	r0, [sp, #104]	; 0x68
 80088a0:	2800      	cmp	r0, #0
 80088a2:	f47f af68 	bne.w	8008776 <_strtod_l+0x73e>
 80088a6:	e605      	b.n	80084b4 <_strtod_l+0x47c>
 80088a8:	0800a9f0 	.word	0x0800a9f0
 80088ac:	fffffc02 	.word	0xfffffc02
 80088b0:	7ff00000 	.word	0x7ff00000
 80088b4:	39500000 	.word	0x39500000
 80088b8:	46ca      	mov	sl, r9
 80088ba:	d165      	bne.n	8008988 <_strtod_l+0x950>
 80088bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088c2:	b352      	cbz	r2, 800891a <_strtod_l+0x8e2>
 80088c4:	4a9e      	ldr	r2, [pc, #632]	; (8008b40 <_strtod_l+0xb08>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d12a      	bne.n	8008920 <_strtod_l+0x8e8>
 80088ca:	9b05      	ldr	r3, [sp, #20]
 80088cc:	4641      	mov	r1, r8
 80088ce:	b1fb      	cbz	r3, 8008910 <_strtod_l+0x8d8>
 80088d0:	4b9c      	ldr	r3, [pc, #624]	; (8008b44 <_strtod_l+0xb0c>)
 80088d2:	f04f 32ff 	mov.w	r2, #4294967295
 80088d6:	ea09 0303 	and.w	r3, r9, r3
 80088da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80088de:	d81a      	bhi.n	8008916 <_strtod_l+0x8de>
 80088e0:	0d1b      	lsrs	r3, r3, #20
 80088e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088e6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ea:	4299      	cmp	r1, r3
 80088ec:	d118      	bne.n	8008920 <_strtod_l+0x8e8>
 80088ee:	4b96      	ldr	r3, [pc, #600]	; (8008b48 <_strtod_l+0xb10>)
 80088f0:	459a      	cmp	sl, r3
 80088f2:	d102      	bne.n	80088fa <_strtod_l+0x8c2>
 80088f4:	3101      	adds	r1, #1
 80088f6:	f43f addd 	beq.w	80084b4 <_strtod_l+0x47c>
 80088fa:	f04f 0800 	mov.w	r8, #0
 80088fe:	4b91      	ldr	r3, [pc, #580]	; (8008b44 <_strtod_l+0xb0c>)
 8008900:	ea0a 0303 	and.w	r3, sl, r3
 8008904:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008908:	9b05      	ldr	r3, [sp, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d19a      	bne.n	8008844 <_strtod_l+0x80c>
 800890e:	e5db      	b.n	80084c8 <_strtod_l+0x490>
 8008910:	f04f 33ff 	mov.w	r3, #4294967295
 8008914:	e7e9      	b.n	80088ea <_strtod_l+0x8b2>
 8008916:	4613      	mov	r3, r2
 8008918:	e7e7      	b.n	80088ea <_strtod_l+0x8b2>
 800891a:	ea53 0308 	orrs.w	r3, r3, r8
 800891e:	d081      	beq.n	8008824 <_strtod_l+0x7ec>
 8008920:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008922:	b1e3      	cbz	r3, 800895e <_strtod_l+0x926>
 8008924:	ea13 0f0a 	tst.w	r3, sl
 8008928:	d0ee      	beq.n	8008908 <_strtod_l+0x8d0>
 800892a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892c:	4640      	mov	r0, r8
 800892e:	4649      	mov	r1, r9
 8008930:	9a05      	ldr	r2, [sp, #20]
 8008932:	b1c3      	cbz	r3, 8008966 <_strtod_l+0x92e>
 8008934:	f7ff fb5c 	bl	8007ff0 <sulp>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800893e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008940:	f7f7 fc8a 	bl	8000258 <__adddf3>
 8008944:	4680      	mov	r8, r0
 8008946:	4689      	mov	r9, r1
 8008948:	e7de      	b.n	8008908 <_strtod_l+0x8d0>
 800894a:	4013      	ands	r3, r2
 800894c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008950:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008954:	f04f 38ff 	mov.w	r8, #4294967295
 8008958:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800895c:	e7d4      	b.n	8008908 <_strtod_l+0x8d0>
 800895e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008960:	ea13 0f08 	tst.w	r3, r8
 8008964:	e7e0      	b.n	8008928 <_strtod_l+0x8f0>
 8008966:	f7ff fb43 	bl	8007ff0 <sulp>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008970:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008972:	f7f7 fc6f 	bl	8000254 <__aeabi_dsub>
 8008976:	2200      	movs	r2, #0
 8008978:	2300      	movs	r3, #0
 800897a:	4680      	mov	r8, r0
 800897c:	4689      	mov	r9, r1
 800897e:	f7f8 f889 	bl	8000a94 <__aeabi_dcmpeq>
 8008982:	2800      	cmp	r0, #0
 8008984:	d0c0      	beq.n	8008908 <_strtod_l+0x8d0>
 8008986:	e606      	b.n	8008596 <_strtod_l+0x55e>
 8008988:	4659      	mov	r1, fp
 800898a:	4630      	mov	r0, r6
 800898c:	f7ff fabe 	bl	8007f0c <__ratio>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008998:	2200      	movs	r2, #0
 800899a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800899e:	f7f8 f88d 	bl	8000abc <__aeabi_dcmple>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d06f      	beq.n	8008a86 <_strtod_l+0xa4e>
 80089a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d17c      	bne.n	8008aa6 <_strtod_l+0xa6e>
 80089ac:	f1b8 0f00 	cmp.w	r8, #0
 80089b0:	d159      	bne.n	8008a66 <_strtod_l+0xa2e>
 80089b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d17b      	bne.n	8008ab2 <_strtod_l+0xa7a>
 80089ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089be:	2200      	movs	r2, #0
 80089c0:	4b62      	ldr	r3, [pc, #392]	; (8008b4c <_strtod_l+0xb14>)
 80089c2:	f7f8 f871 	bl	8000aa8 <__aeabi_dcmplt>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d15a      	bne.n	8008a80 <_strtod_l+0xa48>
 80089ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089ce:	2200      	movs	r2, #0
 80089d0:	4b5f      	ldr	r3, [pc, #380]	; (8008b50 <_strtod_l+0xb18>)
 80089d2:	f7f7 fdf7 	bl	80005c4 <__aeabi_dmul>
 80089d6:	4605      	mov	r5, r0
 80089d8:	460f      	mov	r7, r1
 80089da:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80089de:	9506      	str	r5, [sp, #24]
 80089e0:	9307      	str	r3, [sp, #28]
 80089e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80089ea:	4b56      	ldr	r3, [pc, #344]	; (8008b44 <_strtod_l+0xb0c>)
 80089ec:	4a55      	ldr	r2, [pc, #340]	; (8008b44 <_strtod_l+0xb0c>)
 80089ee:	ea0a 0303 	and.w	r3, sl, r3
 80089f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80089f4:	4b57      	ldr	r3, [pc, #348]	; (8008b54 <_strtod_l+0xb1c>)
 80089f6:	ea0a 0202 	and.w	r2, sl, r2
 80089fa:	429a      	cmp	r2, r3
 80089fc:	f040 80b0 	bne.w	8008b60 <_strtod_l+0xb28>
 8008a00:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008a04:	4640      	mov	r0, r8
 8008a06:	4649      	mov	r1, r9
 8008a08:	f7ff f9c2 	bl	8007d90 <__ulp>
 8008a0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a10:	f7f7 fdd8 	bl	80005c4 <__aeabi_dmul>
 8008a14:	4642      	mov	r2, r8
 8008a16:	464b      	mov	r3, r9
 8008a18:	f7f7 fc1e 	bl	8000258 <__adddf3>
 8008a1c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008b44 <_strtod_l+0xb0c>
 8008a20:	4a4d      	ldr	r2, [pc, #308]	; (8008b58 <_strtod_l+0xb20>)
 8008a22:	ea01 0a0a 	and.w	sl, r1, sl
 8008a26:	4592      	cmp	sl, r2
 8008a28:	4680      	mov	r8, r0
 8008a2a:	d948      	bls.n	8008abe <_strtod_l+0xa86>
 8008a2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a2e:	4b46      	ldr	r3, [pc, #280]	; (8008b48 <_strtod_l+0xb10>)
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d103      	bne.n	8008a3c <_strtod_l+0xa04>
 8008a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a36:	3301      	adds	r3, #1
 8008a38:	f43f ad3c 	beq.w	80084b4 <_strtod_l+0x47c>
 8008a3c:	f04f 38ff 	mov.w	r8, #4294967295
 8008a40:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008b48 <_strtod_l+0xb10>
 8008a44:	4620      	mov	r0, r4
 8008a46:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a48:	f7fe fe76 	bl	8007738 <_Bfree>
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	9908      	ldr	r1, [sp, #32]
 8008a50:	f7fe fe72 	bl	8007738 <_Bfree>
 8008a54:	4659      	mov	r1, fp
 8008a56:	4620      	mov	r0, r4
 8008a58:	f7fe fe6e 	bl	8007738 <_Bfree>
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f7fe fe6a 	bl	8007738 <_Bfree>
 8008a64:	e605      	b.n	8008672 <_strtod_l+0x63a>
 8008a66:	f1b8 0f01 	cmp.w	r8, #1
 8008a6a:	d103      	bne.n	8008a74 <_strtod_l+0xa3c>
 8008a6c:	f1b9 0f00 	cmp.w	r9, #0
 8008a70:	f43f ad91 	beq.w	8008596 <_strtod_l+0x55e>
 8008a74:	2200      	movs	r2, #0
 8008a76:	4b39      	ldr	r3, [pc, #228]	; (8008b5c <_strtod_l+0xb24>)
 8008a78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008a7e:	e016      	b.n	8008aae <_strtod_l+0xa76>
 8008a80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a82:	4f33      	ldr	r7, [pc, #204]	; (8008b50 <_strtod_l+0xb18>)
 8008a84:	e7a9      	b.n	80089da <_strtod_l+0x9a2>
 8008a86:	4b32      	ldr	r3, [pc, #200]	; (8008b50 <_strtod_l+0xb18>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a8e:	f7f7 fd99 	bl	80005c4 <__aeabi_dmul>
 8008a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a94:	4605      	mov	r5, r0
 8008a96:	460f      	mov	r7, r1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d09e      	beq.n	80089da <_strtod_l+0x9a2>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008aa4:	e79d      	b.n	80089e2 <_strtod_l+0x9aa>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	4b28      	ldr	r3, [pc, #160]	; (8008b4c <_strtod_l+0xb14>)
 8008aaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008aae:	4f27      	ldr	r7, [pc, #156]	; (8008b4c <_strtod_l+0xb14>)
 8008ab0:	e797      	b.n	80089e2 <_strtod_l+0x9aa>
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	4b29      	ldr	r3, [pc, #164]	; (8008b5c <_strtod_l+0xb24>)
 8008ab6:	4645      	mov	r5, r8
 8008ab8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008abc:	e7f7      	b.n	8008aae <_strtod_l+0xa76>
 8008abe:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008ac2:	9b05      	ldr	r3, [sp, #20]
 8008ac4:	46ca      	mov	sl, r9
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1bc      	bne.n	8008a44 <_strtod_l+0xa0c>
 8008aca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ace:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ad0:	0d1b      	lsrs	r3, r3, #20
 8008ad2:	051b      	lsls	r3, r3, #20
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d1b5      	bne.n	8008a44 <_strtod_l+0xa0c>
 8008ad8:	4628      	mov	r0, r5
 8008ada:	4639      	mov	r1, r7
 8008adc:	f7f8 fb18 	bl	8001110 <__aeabi_d2lz>
 8008ae0:	f7f7 fd42 	bl	8000568 <__aeabi_l2d>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	4628      	mov	r0, r5
 8008aea:	4639      	mov	r1, r7
 8008aec:	f7f7 fbb2 	bl	8000254 <__aeabi_dsub>
 8008af0:	460b      	mov	r3, r1
 8008af2:	4602      	mov	r2, r0
 8008af4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008af8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afe:	ea4a 0a08 	orr.w	sl, sl, r8
 8008b02:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008b06:	d06c      	beq.n	8008be2 <_strtod_l+0xbaa>
 8008b08:	a309      	add	r3, pc, #36	; (adr r3, 8008b30 <_strtod_l+0xaf8>)
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f7f7 ffcb 	bl	8000aa8 <__aeabi_dcmplt>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	f47f acd8 	bne.w	80084c8 <_strtod_l+0x490>
 8008b18:	a307      	add	r3, pc, #28	; (adr r3, 8008b38 <_strtod_l+0xb00>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b22:	f7f7 ffdf 	bl	8000ae4 <__aeabi_dcmpgt>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d08c      	beq.n	8008a44 <_strtod_l+0xa0c>
 8008b2a:	e4cd      	b.n	80084c8 <_strtod_l+0x490>
 8008b2c:	f3af 8000 	nop.w
 8008b30:	94a03595 	.word	0x94a03595
 8008b34:	3fdfffff 	.word	0x3fdfffff
 8008b38:	35afe535 	.word	0x35afe535
 8008b3c:	3fe00000 	.word	0x3fe00000
 8008b40:	000fffff 	.word	0x000fffff
 8008b44:	7ff00000 	.word	0x7ff00000
 8008b48:	7fefffff 	.word	0x7fefffff
 8008b4c:	3ff00000 	.word	0x3ff00000
 8008b50:	3fe00000 	.word	0x3fe00000
 8008b54:	7fe00000 	.word	0x7fe00000
 8008b58:	7c9fffff 	.word	0x7c9fffff
 8008b5c:	bff00000 	.word	0xbff00000
 8008b60:	9b05      	ldr	r3, [sp, #20]
 8008b62:	b333      	cbz	r3, 8008bb2 <_strtod_l+0xb7a>
 8008b64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b6a:	d822      	bhi.n	8008bb2 <_strtod_l+0xb7a>
 8008b6c:	a328      	add	r3, pc, #160	; (adr r3, 8008c10 <_strtod_l+0xbd8>)
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	4628      	mov	r0, r5
 8008b74:	4639      	mov	r1, r7
 8008b76:	f7f7 ffa1 	bl	8000abc <__aeabi_dcmple>
 8008b7a:	b1a0      	cbz	r0, 8008ba6 <_strtod_l+0xb6e>
 8008b7c:	4639      	mov	r1, r7
 8008b7e:	4628      	mov	r0, r5
 8008b80:	f7f7 fff8 	bl	8000b74 <__aeabi_d2uiz>
 8008b84:	2801      	cmp	r0, #1
 8008b86:	bf38      	it	cc
 8008b88:	2001      	movcc	r0, #1
 8008b8a:	f7f7 fca1 	bl	80004d0 <__aeabi_ui2d>
 8008b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b90:	4605      	mov	r5, r0
 8008b92:	460f      	mov	r7, r1
 8008b94:	bb03      	cbnz	r3, 8008bd8 <_strtod_l+0xba0>
 8008b96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b9a:	9014      	str	r0, [sp, #80]	; 0x50
 8008b9c:	9315      	str	r3, [sp, #84]	; 0x54
 8008b9e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008ba2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ba8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008baa:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008bae:	1a9b      	subs	r3, r3, r2
 8008bb0:	9311      	str	r3, [sp, #68]	; 0x44
 8008bb2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008bb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008bb6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008bba:	f7ff f8e9 	bl	8007d90 <__ulp>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	f7f7 fcfd 	bl	80005c4 <__aeabi_dmul>
 8008bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bce:	f7f7 fb43 	bl	8000258 <__adddf3>
 8008bd2:	4680      	mov	r8, r0
 8008bd4:	4689      	mov	r9, r1
 8008bd6:	e774      	b.n	8008ac2 <_strtod_l+0xa8a>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	460b      	mov	r3, r1
 8008bdc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008be0:	e7dd      	b.n	8008b9e <_strtod_l+0xb66>
 8008be2:	a30d      	add	r3, pc, #52	; (adr r3, 8008c18 <_strtod_l+0xbe0>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 ff5e 	bl	8000aa8 <__aeabi_dcmplt>
 8008bec:	e79b      	b.n	8008b26 <_strtod_l+0xaee>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	930e      	str	r3, [sp, #56]	; 0x38
 8008bf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bf4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	f7ff ba5b 	b.w	80080b2 <_strtod_l+0x7a>
 8008bfc:	2a65      	cmp	r2, #101	; 0x65
 8008bfe:	f43f ab52 	beq.w	80082a6 <_strtod_l+0x26e>
 8008c02:	2a45      	cmp	r2, #69	; 0x45
 8008c04:	f43f ab4f 	beq.w	80082a6 <_strtod_l+0x26e>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f7ff bb87 	b.w	800831c <_strtod_l+0x2e4>
 8008c0e:	bf00      	nop
 8008c10:	ffc00000 	.word	0xffc00000
 8008c14:	41dfffff 	.word	0x41dfffff
 8008c18:	94a03595 	.word	0x94a03595
 8008c1c:	3fcfffff 	.word	0x3fcfffff

08008c20 <_strtod_r>:
 8008c20:	4b01      	ldr	r3, [pc, #4]	; (8008c28 <_strtod_r+0x8>)
 8008c22:	f7ff ba09 	b.w	8008038 <_strtod_l>
 8008c26:	bf00      	nop
 8008c28:	20000068 	.word	0x20000068

08008c2c <_strtol_l.constprop.0>:
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c32:	4686      	mov	lr, r0
 8008c34:	4690      	mov	r8, r2
 8008c36:	d001      	beq.n	8008c3c <_strtol_l.constprop.0+0x10>
 8008c38:	2b24      	cmp	r3, #36	; 0x24
 8008c3a:	d906      	bls.n	8008c4a <_strtol_l.constprop.0+0x1e>
 8008c3c:	f7fd fd92 	bl	8006764 <__errno>
 8008c40:	2316      	movs	r3, #22
 8008c42:	6003      	str	r3, [r0, #0]
 8008c44:	2000      	movs	r0, #0
 8008c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	4835      	ldr	r0, [pc, #212]	; (8008d24 <_strtol_l.constprop.0+0xf8>)
 8008c4e:	462a      	mov	r2, r5
 8008c50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c54:	5d06      	ldrb	r6, [r0, r4]
 8008c56:	f016 0608 	ands.w	r6, r6, #8
 8008c5a:	d1f8      	bne.n	8008c4e <_strtol_l.constprop.0+0x22>
 8008c5c:	2c2d      	cmp	r4, #45	; 0x2d
 8008c5e:	d12e      	bne.n	8008cbe <_strtol_l.constprop.0+0x92>
 8008c60:	2601      	movs	r6, #1
 8008c62:	782c      	ldrb	r4, [r5, #0]
 8008c64:	1c95      	adds	r5, r2, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d057      	beq.n	8008d1a <_strtol_l.constprop.0+0xee>
 8008c6a:	2b10      	cmp	r3, #16
 8008c6c:	d109      	bne.n	8008c82 <_strtol_l.constprop.0+0x56>
 8008c6e:	2c30      	cmp	r4, #48	; 0x30
 8008c70:	d107      	bne.n	8008c82 <_strtol_l.constprop.0+0x56>
 8008c72:	782a      	ldrb	r2, [r5, #0]
 8008c74:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008c78:	2a58      	cmp	r2, #88	; 0x58
 8008c7a:	d149      	bne.n	8008d10 <_strtol_l.constprop.0+0xe4>
 8008c7c:	2310      	movs	r3, #16
 8008c7e:	786c      	ldrb	r4, [r5, #1]
 8008c80:	3502      	adds	r5, #2
 8008c82:	2200      	movs	r2, #0
 8008c84:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008c88:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008c8c:	fbbc f9f3 	udiv	r9, ip, r3
 8008c90:	4610      	mov	r0, r2
 8008c92:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c96:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008c9a:	2f09      	cmp	r7, #9
 8008c9c:	d814      	bhi.n	8008cc8 <_strtol_l.constprop.0+0x9c>
 8008c9e:	463c      	mov	r4, r7
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	dd20      	ble.n	8008ce6 <_strtol_l.constprop.0+0xba>
 8008ca4:	1c57      	adds	r7, r2, #1
 8008ca6:	d007      	beq.n	8008cb8 <_strtol_l.constprop.0+0x8c>
 8008ca8:	4581      	cmp	r9, r0
 8008caa:	d319      	bcc.n	8008ce0 <_strtol_l.constprop.0+0xb4>
 8008cac:	d101      	bne.n	8008cb2 <_strtol_l.constprop.0+0x86>
 8008cae:	45a2      	cmp	sl, r4
 8008cb0:	db16      	blt.n	8008ce0 <_strtol_l.constprop.0+0xb4>
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	fb00 4003 	mla	r0, r0, r3, r4
 8008cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cbc:	e7eb      	b.n	8008c96 <_strtol_l.constprop.0+0x6a>
 8008cbe:	2c2b      	cmp	r4, #43	; 0x2b
 8008cc0:	bf04      	itt	eq
 8008cc2:	782c      	ldrbeq	r4, [r5, #0]
 8008cc4:	1c95      	addeq	r5, r2, #2
 8008cc6:	e7ce      	b.n	8008c66 <_strtol_l.constprop.0+0x3a>
 8008cc8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008ccc:	2f19      	cmp	r7, #25
 8008cce:	d801      	bhi.n	8008cd4 <_strtol_l.constprop.0+0xa8>
 8008cd0:	3c37      	subs	r4, #55	; 0x37
 8008cd2:	e7e5      	b.n	8008ca0 <_strtol_l.constprop.0+0x74>
 8008cd4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008cd8:	2f19      	cmp	r7, #25
 8008cda:	d804      	bhi.n	8008ce6 <_strtol_l.constprop.0+0xba>
 8008cdc:	3c57      	subs	r4, #87	; 0x57
 8008cde:	e7df      	b.n	8008ca0 <_strtol_l.constprop.0+0x74>
 8008ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce4:	e7e8      	b.n	8008cb8 <_strtol_l.constprop.0+0x8c>
 8008ce6:	1c53      	adds	r3, r2, #1
 8008ce8:	d108      	bne.n	8008cfc <_strtol_l.constprop.0+0xd0>
 8008cea:	2322      	movs	r3, #34	; 0x22
 8008cec:	4660      	mov	r0, ip
 8008cee:	f8ce 3000 	str.w	r3, [lr]
 8008cf2:	f1b8 0f00 	cmp.w	r8, #0
 8008cf6:	d0a6      	beq.n	8008c46 <_strtol_l.constprop.0+0x1a>
 8008cf8:	1e69      	subs	r1, r5, #1
 8008cfa:	e006      	b.n	8008d0a <_strtol_l.constprop.0+0xde>
 8008cfc:	b106      	cbz	r6, 8008d00 <_strtol_l.constprop.0+0xd4>
 8008cfe:	4240      	negs	r0, r0
 8008d00:	f1b8 0f00 	cmp.w	r8, #0
 8008d04:	d09f      	beq.n	8008c46 <_strtol_l.constprop.0+0x1a>
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	d1f6      	bne.n	8008cf8 <_strtol_l.constprop.0+0xcc>
 8008d0a:	f8c8 1000 	str.w	r1, [r8]
 8008d0e:	e79a      	b.n	8008c46 <_strtol_l.constprop.0+0x1a>
 8008d10:	2430      	movs	r4, #48	; 0x30
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1b5      	bne.n	8008c82 <_strtol_l.constprop.0+0x56>
 8008d16:	2308      	movs	r3, #8
 8008d18:	e7b3      	b.n	8008c82 <_strtol_l.constprop.0+0x56>
 8008d1a:	2c30      	cmp	r4, #48	; 0x30
 8008d1c:	d0a9      	beq.n	8008c72 <_strtol_l.constprop.0+0x46>
 8008d1e:	230a      	movs	r3, #10
 8008d20:	e7af      	b.n	8008c82 <_strtol_l.constprop.0+0x56>
 8008d22:	bf00      	nop
 8008d24:	0800aa19 	.word	0x0800aa19

08008d28 <_strtol_r>:
 8008d28:	f7ff bf80 	b.w	8008c2c <_strtol_l.constprop.0>

08008d2c <__ssputs_r>:
 8008d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d30:	461f      	mov	r7, r3
 8008d32:	688e      	ldr	r6, [r1, #8]
 8008d34:	4682      	mov	sl, r0
 8008d36:	42be      	cmp	r6, r7
 8008d38:	460c      	mov	r4, r1
 8008d3a:	4690      	mov	r8, r2
 8008d3c:	680b      	ldr	r3, [r1, #0]
 8008d3e:	d82c      	bhi.n	8008d9a <__ssputs_r+0x6e>
 8008d40:	898a      	ldrh	r2, [r1, #12]
 8008d42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d46:	d026      	beq.n	8008d96 <__ssputs_r+0x6a>
 8008d48:	6965      	ldr	r5, [r4, #20]
 8008d4a:	6909      	ldr	r1, [r1, #16]
 8008d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d50:	eba3 0901 	sub.w	r9, r3, r1
 8008d54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d58:	1c7b      	adds	r3, r7, #1
 8008d5a:	444b      	add	r3, r9
 8008d5c:	106d      	asrs	r5, r5, #1
 8008d5e:	429d      	cmp	r5, r3
 8008d60:	bf38      	it	cc
 8008d62:	461d      	movcc	r5, r3
 8008d64:	0553      	lsls	r3, r2, #21
 8008d66:	d527      	bpl.n	8008db8 <__ssputs_r+0x8c>
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7fe fc19 	bl	80075a0 <_malloc_r>
 8008d6e:	4606      	mov	r6, r0
 8008d70:	b360      	cbz	r0, 8008dcc <__ssputs_r+0xa0>
 8008d72:	464a      	mov	r2, r9
 8008d74:	6921      	ldr	r1, [r4, #16]
 8008d76:	f000 fda7 	bl	80098c8 <memcpy>
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d84:	81a3      	strh	r3, [r4, #12]
 8008d86:	6126      	str	r6, [r4, #16]
 8008d88:	444e      	add	r6, r9
 8008d8a:	6026      	str	r6, [r4, #0]
 8008d8c:	463e      	mov	r6, r7
 8008d8e:	6165      	str	r5, [r4, #20]
 8008d90:	eba5 0509 	sub.w	r5, r5, r9
 8008d94:	60a5      	str	r5, [r4, #8]
 8008d96:	42be      	cmp	r6, r7
 8008d98:	d900      	bls.n	8008d9c <__ssputs_r+0x70>
 8008d9a:	463e      	mov	r6, r7
 8008d9c:	4632      	mov	r2, r6
 8008d9e:	4641      	mov	r1, r8
 8008da0:	6820      	ldr	r0, [r4, #0]
 8008da2:	f000 fd54 	bl	800984e <memmove>
 8008da6:	2000      	movs	r0, #0
 8008da8:	68a3      	ldr	r3, [r4, #8]
 8008daa:	1b9b      	subs	r3, r3, r6
 8008dac:	60a3      	str	r3, [r4, #8]
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	4433      	add	r3, r6
 8008db2:	6023      	str	r3, [r4, #0]
 8008db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db8:	462a      	mov	r2, r5
 8008dba:	f001 f936 	bl	800a02a <_realloc_r>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d1e0      	bne.n	8008d86 <__ssputs_r+0x5a>
 8008dc4:	4650      	mov	r0, sl
 8008dc6:	6921      	ldr	r1, [r4, #16]
 8008dc8:	f7fe fb7a 	bl	80074c0 <_free_r>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	f8ca 3000 	str.w	r3, [sl]
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ddc:	81a3      	strh	r3, [r4, #12]
 8008dde:	e7e9      	b.n	8008db4 <__ssputs_r+0x88>

08008de0 <_svfiprintf_r>:
 8008de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de4:	4698      	mov	r8, r3
 8008de6:	898b      	ldrh	r3, [r1, #12]
 8008de8:	4607      	mov	r7, r0
 8008dea:	061b      	lsls	r3, r3, #24
 8008dec:	460d      	mov	r5, r1
 8008dee:	4614      	mov	r4, r2
 8008df0:	b09d      	sub	sp, #116	; 0x74
 8008df2:	d50e      	bpl.n	8008e12 <_svfiprintf_r+0x32>
 8008df4:	690b      	ldr	r3, [r1, #16]
 8008df6:	b963      	cbnz	r3, 8008e12 <_svfiprintf_r+0x32>
 8008df8:	2140      	movs	r1, #64	; 0x40
 8008dfa:	f7fe fbd1 	bl	80075a0 <_malloc_r>
 8008dfe:	6028      	str	r0, [r5, #0]
 8008e00:	6128      	str	r0, [r5, #16]
 8008e02:	b920      	cbnz	r0, 8008e0e <_svfiprintf_r+0x2e>
 8008e04:	230c      	movs	r3, #12
 8008e06:	603b      	str	r3, [r7, #0]
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	e0d0      	b.n	8008fb0 <_svfiprintf_r+0x1d0>
 8008e0e:	2340      	movs	r3, #64	; 0x40
 8008e10:	616b      	str	r3, [r5, #20]
 8008e12:	2300      	movs	r3, #0
 8008e14:	9309      	str	r3, [sp, #36]	; 0x24
 8008e16:	2320      	movs	r3, #32
 8008e18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e1c:	2330      	movs	r3, #48	; 0x30
 8008e1e:	f04f 0901 	mov.w	r9, #1
 8008e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e26:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008fc8 <_svfiprintf_r+0x1e8>
 8008e2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e2e:	4623      	mov	r3, r4
 8008e30:	469a      	mov	sl, r3
 8008e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e36:	b10a      	cbz	r2, 8008e3c <_svfiprintf_r+0x5c>
 8008e38:	2a25      	cmp	r2, #37	; 0x25
 8008e3a:	d1f9      	bne.n	8008e30 <_svfiprintf_r+0x50>
 8008e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e40:	d00b      	beq.n	8008e5a <_svfiprintf_r+0x7a>
 8008e42:	465b      	mov	r3, fp
 8008e44:	4622      	mov	r2, r4
 8008e46:	4629      	mov	r1, r5
 8008e48:	4638      	mov	r0, r7
 8008e4a:	f7ff ff6f 	bl	8008d2c <__ssputs_r>
 8008e4e:	3001      	adds	r0, #1
 8008e50:	f000 80a9 	beq.w	8008fa6 <_svfiprintf_r+0x1c6>
 8008e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e56:	445a      	add	r2, fp
 8008e58:	9209      	str	r2, [sp, #36]	; 0x24
 8008e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 80a1 	beq.w	8008fa6 <_svfiprintf_r+0x1c6>
 8008e64:	2300      	movs	r3, #0
 8008e66:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e6e:	f10a 0a01 	add.w	sl, sl, #1
 8008e72:	9304      	str	r3, [sp, #16]
 8008e74:	9307      	str	r3, [sp, #28]
 8008e76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8008e7c:	4654      	mov	r4, sl
 8008e7e:	2205      	movs	r2, #5
 8008e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e84:	4850      	ldr	r0, [pc, #320]	; (8008fc8 <_svfiprintf_r+0x1e8>)
 8008e86:	f7fd fc9a 	bl	80067be <memchr>
 8008e8a:	9a04      	ldr	r2, [sp, #16]
 8008e8c:	b9d8      	cbnz	r0, 8008ec6 <_svfiprintf_r+0xe6>
 8008e8e:	06d0      	lsls	r0, r2, #27
 8008e90:	bf44      	itt	mi
 8008e92:	2320      	movmi	r3, #32
 8008e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e98:	0711      	lsls	r1, r2, #28
 8008e9a:	bf44      	itt	mi
 8008e9c:	232b      	movmi	r3, #43	; 0x2b
 8008e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ea8:	d015      	beq.n	8008ed6 <_svfiprintf_r+0xf6>
 8008eaa:	4654      	mov	r4, sl
 8008eac:	2000      	movs	r0, #0
 8008eae:	f04f 0c0a 	mov.w	ip, #10
 8008eb2:	9a07      	ldr	r2, [sp, #28]
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eba:	3b30      	subs	r3, #48	; 0x30
 8008ebc:	2b09      	cmp	r3, #9
 8008ebe:	d94d      	bls.n	8008f5c <_svfiprintf_r+0x17c>
 8008ec0:	b1b0      	cbz	r0, 8008ef0 <_svfiprintf_r+0x110>
 8008ec2:	9207      	str	r2, [sp, #28]
 8008ec4:	e014      	b.n	8008ef0 <_svfiprintf_r+0x110>
 8008ec6:	eba0 0308 	sub.w	r3, r0, r8
 8008eca:	fa09 f303 	lsl.w	r3, r9, r3
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	46a2      	mov	sl, r4
 8008ed2:	9304      	str	r3, [sp, #16]
 8008ed4:	e7d2      	b.n	8008e7c <_svfiprintf_r+0x9c>
 8008ed6:	9b03      	ldr	r3, [sp, #12]
 8008ed8:	1d19      	adds	r1, r3, #4
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	9103      	str	r1, [sp, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	bfbb      	ittet	lt
 8008ee2:	425b      	neglt	r3, r3
 8008ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ee8:	9307      	strge	r3, [sp, #28]
 8008eea:	9307      	strlt	r3, [sp, #28]
 8008eec:	bfb8      	it	lt
 8008eee:	9204      	strlt	r2, [sp, #16]
 8008ef0:	7823      	ldrb	r3, [r4, #0]
 8008ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ef4:	d10c      	bne.n	8008f10 <_svfiprintf_r+0x130>
 8008ef6:	7863      	ldrb	r3, [r4, #1]
 8008ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8008efa:	d134      	bne.n	8008f66 <_svfiprintf_r+0x186>
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	3402      	adds	r4, #2
 8008f00:	1d1a      	adds	r2, r3, #4
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	9203      	str	r2, [sp, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	bfb8      	it	lt
 8008f0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f0e:	9305      	str	r3, [sp, #20]
 8008f10:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008fcc <_svfiprintf_r+0x1ec>
 8008f14:	2203      	movs	r2, #3
 8008f16:	4650      	mov	r0, sl
 8008f18:	7821      	ldrb	r1, [r4, #0]
 8008f1a:	f7fd fc50 	bl	80067be <memchr>
 8008f1e:	b138      	cbz	r0, 8008f30 <_svfiprintf_r+0x150>
 8008f20:	2240      	movs	r2, #64	; 0x40
 8008f22:	9b04      	ldr	r3, [sp, #16]
 8008f24:	eba0 000a 	sub.w	r0, r0, sl
 8008f28:	4082      	lsls	r2, r0
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	9304      	str	r3, [sp, #16]
 8008f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f34:	2206      	movs	r2, #6
 8008f36:	4826      	ldr	r0, [pc, #152]	; (8008fd0 <_svfiprintf_r+0x1f0>)
 8008f38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f3c:	f7fd fc3f 	bl	80067be <memchr>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d038      	beq.n	8008fb6 <_svfiprintf_r+0x1d6>
 8008f44:	4b23      	ldr	r3, [pc, #140]	; (8008fd4 <_svfiprintf_r+0x1f4>)
 8008f46:	bb1b      	cbnz	r3, 8008f90 <_svfiprintf_r+0x1b0>
 8008f48:	9b03      	ldr	r3, [sp, #12]
 8008f4a:	3307      	adds	r3, #7
 8008f4c:	f023 0307 	bic.w	r3, r3, #7
 8008f50:	3308      	adds	r3, #8
 8008f52:	9303      	str	r3, [sp, #12]
 8008f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f56:	4433      	add	r3, r6
 8008f58:	9309      	str	r3, [sp, #36]	; 0x24
 8008f5a:	e768      	b.n	8008e2e <_svfiprintf_r+0x4e>
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	2001      	movs	r0, #1
 8008f60:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f64:	e7a6      	b.n	8008eb4 <_svfiprintf_r+0xd4>
 8008f66:	2300      	movs	r3, #0
 8008f68:	f04f 0c0a 	mov.w	ip, #10
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	3401      	adds	r4, #1
 8008f70:	9305      	str	r3, [sp, #20]
 8008f72:	4620      	mov	r0, r4
 8008f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f78:	3a30      	subs	r2, #48	; 0x30
 8008f7a:	2a09      	cmp	r2, #9
 8008f7c:	d903      	bls.n	8008f86 <_svfiprintf_r+0x1a6>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0c6      	beq.n	8008f10 <_svfiprintf_r+0x130>
 8008f82:	9105      	str	r1, [sp, #20]
 8008f84:	e7c4      	b.n	8008f10 <_svfiprintf_r+0x130>
 8008f86:	4604      	mov	r4, r0
 8008f88:	2301      	movs	r3, #1
 8008f8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f8e:	e7f0      	b.n	8008f72 <_svfiprintf_r+0x192>
 8008f90:	ab03      	add	r3, sp, #12
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	462a      	mov	r2, r5
 8008f96:	4638      	mov	r0, r7
 8008f98:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <_svfiprintf_r+0x1f8>)
 8008f9a:	a904      	add	r1, sp, #16
 8008f9c:	f7fc fc6e 	bl	800587c <_printf_float>
 8008fa0:	1c42      	adds	r2, r0, #1
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	d1d6      	bne.n	8008f54 <_svfiprintf_r+0x174>
 8008fa6:	89ab      	ldrh	r3, [r5, #12]
 8008fa8:	065b      	lsls	r3, r3, #25
 8008faa:	f53f af2d 	bmi.w	8008e08 <_svfiprintf_r+0x28>
 8008fae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fb0:	b01d      	add	sp, #116	; 0x74
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb6:	ab03      	add	r3, sp, #12
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	462a      	mov	r2, r5
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <_svfiprintf_r+0x1f8>)
 8008fc0:	a904      	add	r1, sp, #16
 8008fc2:	f7fc fefb 	bl	8005dbc <_printf_i>
 8008fc6:	e7eb      	b.n	8008fa0 <_svfiprintf_r+0x1c0>
 8008fc8:	0800ab19 	.word	0x0800ab19
 8008fcc:	0800ab1f 	.word	0x0800ab1f
 8008fd0:	0800ab23 	.word	0x0800ab23
 8008fd4:	0800587d 	.word	0x0800587d
 8008fd8:	08008d2d 	.word	0x08008d2d

08008fdc <_sungetc_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	1c4b      	adds	r3, r1, #1
 8008fe0:	4614      	mov	r4, r2
 8008fe2:	d103      	bne.n	8008fec <_sungetc_r+0x10>
 8008fe4:	f04f 35ff 	mov.w	r5, #4294967295
 8008fe8:	4628      	mov	r0, r5
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	8993      	ldrh	r3, [r2, #12]
 8008fee:	b2cd      	uxtb	r5, r1
 8008ff0:	f023 0320 	bic.w	r3, r3, #32
 8008ff4:	8193      	strh	r3, [r2, #12]
 8008ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ff8:	6852      	ldr	r2, [r2, #4]
 8008ffa:	b18b      	cbz	r3, 8009020 <_sungetc_r+0x44>
 8008ffc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ffe:	4293      	cmp	r3, r2
 8009000:	dd08      	ble.n	8009014 <_sungetc_r+0x38>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	1e5a      	subs	r2, r3, #1
 8009006:	6022      	str	r2, [r4, #0]
 8009008:	f803 5c01 	strb.w	r5, [r3, #-1]
 800900c:	6863      	ldr	r3, [r4, #4]
 800900e:	3301      	adds	r3, #1
 8009010:	6063      	str	r3, [r4, #4]
 8009012:	e7e9      	b.n	8008fe8 <_sungetc_r+0xc>
 8009014:	4621      	mov	r1, r4
 8009016:	f000 fbe2 	bl	80097de <__submore>
 800901a:	2800      	cmp	r0, #0
 800901c:	d0f1      	beq.n	8009002 <_sungetc_r+0x26>
 800901e:	e7e1      	b.n	8008fe4 <_sungetc_r+0x8>
 8009020:	6921      	ldr	r1, [r4, #16]
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	b151      	cbz	r1, 800903c <_sungetc_r+0x60>
 8009026:	4299      	cmp	r1, r3
 8009028:	d208      	bcs.n	800903c <_sungetc_r+0x60>
 800902a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800902e:	42a9      	cmp	r1, r5
 8009030:	d104      	bne.n	800903c <_sungetc_r+0x60>
 8009032:	3b01      	subs	r3, #1
 8009034:	3201      	adds	r2, #1
 8009036:	6023      	str	r3, [r4, #0]
 8009038:	6062      	str	r2, [r4, #4]
 800903a:	e7d5      	b.n	8008fe8 <_sungetc_r+0xc>
 800903c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009044:	6363      	str	r3, [r4, #52]	; 0x34
 8009046:	2303      	movs	r3, #3
 8009048:	63a3      	str	r3, [r4, #56]	; 0x38
 800904a:	4623      	mov	r3, r4
 800904c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	2301      	movs	r3, #1
 8009054:	e7dc      	b.n	8009010 <_sungetc_r+0x34>

08009056 <__ssrefill_r>:
 8009056:	b510      	push	{r4, lr}
 8009058:	460c      	mov	r4, r1
 800905a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800905c:	b169      	cbz	r1, 800907a <__ssrefill_r+0x24>
 800905e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009062:	4299      	cmp	r1, r3
 8009064:	d001      	beq.n	800906a <__ssrefill_r+0x14>
 8009066:	f7fe fa2b 	bl	80074c0 <_free_r>
 800906a:	2000      	movs	r0, #0
 800906c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800906e:	6360      	str	r0, [r4, #52]	; 0x34
 8009070:	6063      	str	r3, [r4, #4]
 8009072:	b113      	cbz	r3, 800907a <__ssrefill_r+0x24>
 8009074:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009076:	6023      	str	r3, [r4, #0]
 8009078:	bd10      	pop	{r4, pc}
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	2300      	movs	r3, #0
 8009084:	6063      	str	r3, [r4, #4]
 8009086:	89a3      	ldrh	r3, [r4, #12]
 8009088:	f043 0320 	orr.w	r3, r3, #32
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	e7f3      	b.n	8009078 <__ssrefill_r+0x22>

08009090 <__ssvfiscanf_r>:
 8009090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009094:	460c      	mov	r4, r1
 8009096:	2100      	movs	r1, #0
 8009098:	4606      	mov	r6, r0
 800909a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800909e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80090a2:	49a6      	ldr	r1, [pc, #664]	; (800933c <__ssvfiscanf_r+0x2ac>)
 80090a4:	f10d 0804 	add.w	r8, sp, #4
 80090a8:	91a0      	str	r1, [sp, #640]	; 0x280
 80090aa:	49a5      	ldr	r1, [pc, #660]	; (8009340 <__ssvfiscanf_r+0x2b0>)
 80090ac:	4fa5      	ldr	r7, [pc, #660]	; (8009344 <__ssvfiscanf_r+0x2b4>)
 80090ae:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009348 <__ssvfiscanf_r+0x2b8>
 80090b2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80090b6:	91a1      	str	r1, [sp, #644]	; 0x284
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	7813      	ldrb	r3, [r2, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 815a 	beq.w	8009376 <__ssvfiscanf_r+0x2e6>
 80090c2:	5cf9      	ldrb	r1, [r7, r3]
 80090c4:	1c55      	adds	r5, r2, #1
 80090c6:	f011 0108 	ands.w	r1, r1, #8
 80090ca:	d019      	beq.n	8009100 <__ssvfiscanf_r+0x70>
 80090cc:	6863      	ldr	r3, [r4, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dd0f      	ble.n	80090f2 <__ssvfiscanf_r+0x62>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	781a      	ldrb	r2, [r3, #0]
 80090d6:	5cba      	ldrb	r2, [r7, r2]
 80090d8:	0712      	lsls	r2, r2, #28
 80090da:	d401      	bmi.n	80090e0 <__ssvfiscanf_r+0x50>
 80090dc:	462a      	mov	r2, r5
 80090de:	e7ec      	b.n	80090ba <__ssvfiscanf_r+0x2a>
 80090e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80090e2:	3301      	adds	r3, #1
 80090e4:	3201      	adds	r2, #1
 80090e6:	9245      	str	r2, [sp, #276]	; 0x114
 80090e8:	6862      	ldr	r2, [r4, #4]
 80090ea:	6023      	str	r3, [r4, #0]
 80090ec:	3a01      	subs	r2, #1
 80090ee:	6062      	str	r2, [r4, #4]
 80090f0:	e7ec      	b.n	80090cc <__ssvfiscanf_r+0x3c>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4630      	mov	r0, r6
 80090f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80090f8:	4798      	blx	r3
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d0e9      	beq.n	80090d2 <__ssvfiscanf_r+0x42>
 80090fe:	e7ed      	b.n	80090dc <__ssvfiscanf_r+0x4c>
 8009100:	2b25      	cmp	r3, #37	; 0x25
 8009102:	d012      	beq.n	800912a <__ssvfiscanf_r+0x9a>
 8009104:	469a      	mov	sl, r3
 8009106:	6863      	ldr	r3, [r4, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f340 8092 	ble.w	8009232 <__ssvfiscanf_r+0x1a2>
 800910e:	6822      	ldr	r2, [r4, #0]
 8009110:	7813      	ldrb	r3, [r2, #0]
 8009112:	4553      	cmp	r3, sl
 8009114:	f040 812f 	bne.w	8009376 <__ssvfiscanf_r+0x2e6>
 8009118:	6863      	ldr	r3, [r4, #4]
 800911a:	3201      	adds	r2, #1
 800911c:	3b01      	subs	r3, #1
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009122:	6022      	str	r2, [r4, #0]
 8009124:	3301      	adds	r3, #1
 8009126:	9345      	str	r3, [sp, #276]	; 0x114
 8009128:	e7d8      	b.n	80090dc <__ssvfiscanf_r+0x4c>
 800912a:	9141      	str	r1, [sp, #260]	; 0x104
 800912c:	9143      	str	r1, [sp, #268]	; 0x10c
 800912e:	7853      	ldrb	r3, [r2, #1]
 8009130:	2b2a      	cmp	r3, #42	; 0x2a
 8009132:	bf04      	itt	eq
 8009134:	2310      	moveq	r3, #16
 8009136:	1c95      	addeq	r5, r2, #2
 8009138:	f04f 020a 	mov.w	r2, #10
 800913c:	bf08      	it	eq
 800913e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009140:	46aa      	mov	sl, r5
 8009142:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009146:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800914a:	2b09      	cmp	r3, #9
 800914c:	d91c      	bls.n	8009188 <__ssvfiscanf_r+0xf8>
 800914e:	2203      	movs	r2, #3
 8009150:	487d      	ldr	r0, [pc, #500]	; (8009348 <__ssvfiscanf_r+0x2b8>)
 8009152:	f7fd fb34 	bl	80067be <memchr>
 8009156:	b138      	cbz	r0, 8009168 <__ssvfiscanf_r+0xd8>
 8009158:	2301      	movs	r3, #1
 800915a:	4655      	mov	r5, sl
 800915c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800915e:	eba0 0009 	sub.w	r0, r0, r9
 8009162:	4083      	lsls	r3, r0
 8009164:	4313      	orrs	r3, r2
 8009166:	9341      	str	r3, [sp, #260]	; 0x104
 8009168:	f815 3b01 	ldrb.w	r3, [r5], #1
 800916c:	2b78      	cmp	r3, #120	; 0x78
 800916e:	d806      	bhi.n	800917e <__ssvfiscanf_r+0xee>
 8009170:	2b57      	cmp	r3, #87	; 0x57
 8009172:	d810      	bhi.n	8009196 <__ssvfiscanf_r+0x106>
 8009174:	2b25      	cmp	r3, #37	; 0x25
 8009176:	d0c5      	beq.n	8009104 <__ssvfiscanf_r+0x74>
 8009178:	d856      	bhi.n	8009228 <__ssvfiscanf_r+0x198>
 800917a:	2b00      	cmp	r3, #0
 800917c:	d064      	beq.n	8009248 <__ssvfiscanf_r+0x1b8>
 800917e:	2303      	movs	r3, #3
 8009180:	9347      	str	r3, [sp, #284]	; 0x11c
 8009182:	230a      	movs	r3, #10
 8009184:	9342      	str	r3, [sp, #264]	; 0x108
 8009186:	e075      	b.n	8009274 <__ssvfiscanf_r+0x1e4>
 8009188:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800918a:	4655      	mov	r5, sl
 800918c:	fb02 1103 	mla	r1, r2, r3, r1
 8009190:	3930      	subs	r1, #48	; 0x30
 8009192:	9143      	str	r1, [sp, #268]	; 0x10c
 8009194:	e7d4      	b.n	8009140 <__ssvfiscanf_r+0xb0>
 8009196:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800919a:	2a20      	cmp	r2, #32
 800919c:	d8ef      	bhi.n	800917e <__ssvfiscanf_r+0xee>
 800919e:	a101      	add	r1, pc, #4	; (adr r1, 80091a4 <__ssvfiscanf_r+0x114>)
 80091a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80091a4:	08009257 	.word	0x08009257
 80091a8:	0800917f 	.word	0x0800917f
 80091ac:	0800917f 	.word	0x0800917f
 80091b0:	080092b5 	.word	0x080092b5
 80091b4:	0800917f 	.word	0x0800917f
 80091b8:	0800917f 	.word	0x0800917f
 80091bc:	0800917f 	.word	0x0800917f
 80091c0:	0800917f 	.word	0x0800917f
 80091c4:	0800917f 	.word	0x0800917f
 80091c8:	0800917f 	.word	0x0800917f
 80091cc:	0800917f 	.word	0x0800917f
 80091d0:	080092cb 	.word	0x080092cb
 80091d4:	080092b1 	.word	0x080092b1
 80091d8:	0800922f 	.word	0x0800922f
 80091dc:	0800922f 	.word	0x0800922f
 80091e0:	0800922f 	.word	0x0800922f
 80091e4:	0800917f 	.word	0x0800917f
 80091e8:	0800926d 	.word	0x0800926d
 80091ec:	0800917f 	.word	0x0800917f
 80091f0:	0800917f 	.word	0x0800917f
 80091f4:	0800917f 	.word	0x0800917f
 80091f8:	0800917f 	.word	0x0800917f
 80091fc:	080092db 	.word	0x080092db
 8009200:	080092a9 	.word	0x080092a9
 8009204:	0800924f 	.word	0x0800924f
 8009208:	0800917f 	.word	0x0800917f
 800920c:	0800917f 	.word	0x0800917f
 8009210:	080092d7 	.word	0x080092d7
 8009214:	0800917f 	.word	0x0800917f
 8009218:	080092b1 	.word	0x080092b1
 800921c:	0800917f 	.word	0x0800917f
 8009220:	0800917f 	.word	0x0800917f
 8009224:	08009257 	.word	0x08009257
 8009228:	3b45      	subs	r3, #69	; 0x45
 800922a:	2b02      	cmp	r3, #2
 800922c:	d8a7      	bhi.n	800917e <__ssvfiscanf_r+0xee>
 800922e:	2305      	movs	r3, #5
 8009230:	e01f      	b.n	8009272 <__ssvfiscanf_r+0x1e2>
 8009232:	4621      	mov	r1, r4
 8009234:	4630      	mov	r0, r6
 8009236:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009238:	4798      	blx	r3
 800923a:	2800      	cmp	r0, #0
 800923c:	f43f af67 	beq.w	800910e <__ssvfiscanf_r+0x7e>
 8009240:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009242:	2800      	cmp	r0, #0
 8009244:	f040 808d 	bne.w	8009362 <__ssvfiscanf_r+0x2d2>
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	e08f      	b.n	800936e <__ssvfiscanf_r+0x2de>
 800924e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009250:	f042 0220 	orr.w	r2, r2, #32
 8009254:	9241      	str	r2, [sp, #260]	; 0x104
 8009256:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800925c:	9241      	str	r2, [sp, #260]	; 0x104
 800925e:	2210      	movs	r2, #16
 8009260:	2b6f      	cmp	r3, #111	; 0x6f
 8009262:	bf34      	ite	cc
 8009264:	2303      	movcc	r3, #3
 8009266:	2304      	movcs	r3, #4
 8009268:	9242      	str	r2, [sp, #264]	; 0x108
 800926a:	e002      	b.n	8009272 <__ssvfiscanf_r+0x1e2>
 800926c:	2300      	movs	r3, #0
 800926e:	9342      	str	r3, [sp, #264]	; 0x108
 8009270:	2303      	movs	r3, #3
 8009272:	9347      	str	r3, [sp, #284]	; 0x11c
 8009274:	6863      	ldr	r3, [r4, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	dd3d      	ble.n	80092f6 <__ssvfiscanf_r+0x266>
 800927a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800927c:	0659      	lsls	r1, r3, #25
 800927e:	d404      	bmi.n	800928a <__ssvfiscanf_r+0x1fa>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	781a      	ldrb	r2, [r3, #0]
 8009284:	5cba      	ldrb	r2, [r7, r2]
 8009286:	0712      	lsls	r2, r2, #28
 8009288:	d43c      	bmi.n	8009304 <__ssvfiscanf_r+0x274>
 800928a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800928c:	2b02      	cmp	r3, #2
 800928e:	dc4b      	bgt.n	8009328 <__ssvfiscanf_r+0x298>
 8009290:	466b      	mov	r3, sp
 8009292:	4622      	mov	r2, r4
 8009294:	4630      	mov	r0, r6
 8009296:	a941      	add	r1, sp, #260	; 0x104
 8009298:	f000 f872 	bl	8009380 <_scanf_chars>
 800929c:	2801      	cmp	r0, #1
 800929e:	d06a      	beq.n	8009376 <__ssvfiscanf_r+0x2e6>
 80092a0:	2802      	cmp	r0, #2
 80092a2:	f47f af1b 	bne.w	80090dc <__ssvfiscanf_r+0x4c>
 80092a6:	e7cb      	b.n	8009240 <__ssvfiscanf_r+0x1b0>
 80092a8:	2308      	movs	r3, #8
 80092aa:	9342      	str	r3, [sp, #264]	; 0x108
 80092ac:	2304      	movs	r3, #4
 80092ae:	e7e0      	b.n	8009272 <__ssvfiscanf_r+0x1e2>
 80092b0:	220a      	movs	r2, #10
 80092b2:	e7d5      	b.n	8009260 <__ssvfiscanf_r+0x1d0>
 80092b4:	4629      	mov	r1, r5
 80092b6:	4640      	mov	r0, r8
 80092b8:	f000 fa58 	bl	800976c <__sccl>
 80092bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80092be:	4605      	mov	r5, r0
 80092c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c4:	9341      	str	r3, [sp, #260]	; 0x104
 80092c6:	2301      	movs	r3, #1
 80092c8:	e7d3      	b.n	8009272 <__ssvfiscanf_r+0x1e2>
 80092ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80092cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d0:	9341      	str	r3, [sp, #260]	; 0x104
 80092d2:	2300      	movs	r3, #0
 80092d4:	e7cd      	b.n	8009272 <__ssvfiscanf_r+0x1e2>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e7cb      	b.n	8009272 <__ssvfiscanf_r+0x1e2>
 80092da:	9841      	ldr	r0, [sp, #260]	; 0x104
 80092dc:	06c3      	lsls	r3, r0, #27
 80092de:	f53f aefd 	bmi.w	80090dc <__ssvfiscanf_r+0x4c>
 80092e2:	9b00      	ldr	r3, [sp, #0]
 80092e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80092e6:	1d19      	adds	r1, r3, #4
 80092e8:	9100      	str	r1, [sp, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	07c0      	lsls	r0, r0, #31
 80092ee:	bf4c      	ite	mi
 80092f0:	801a      	strhmi	r2, [r3, #0]
 80092f2:	601a      	strpl	r2, [r3, #0]
 80092f4:	e6f2      	b.n	80090dc <__ssvfiscanf_r+0x4c>
 80092f6:	4621      	mov	r1, r4
 80092f8:	4630      	mov	r0, r6
 80092fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80092fc:	4798      	blx	r3
 80092fe:	2800      	cmp	r0, #0
 8009300:	d0bb      	beq.n	800927a <__ssvfiscanf_r+0x1ea>
 8009302:	e79d      	b.n	8009240 <__ssvfiscanf_r+0x1b0>
 8009304:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009306:	3201      	adds	r2, #1
 8009308:	9245      	str	r2, [sp, #276]	; 0x114
 800930a:	6862      	ldr	r2, [r4, #4]
 800930c:	3a01      	subs	r2, #1
 800930e:	2a00      	cmp	r2, #0
 8009310:	6062      	str	r2, [r4, #4]
 8009312:	dd02      	ble.n	800931a <__ssvfiscanf_r+0x28a>
 8009314:	3301      	adds	r3, #1
 8009316:	6023      	str	r3, [r4, #0]
 8009318:	e7b2      	b.n	8009280 <__ssvfiscanf_r+0x1f0>
 800931a:	4621      	mov	r1, r4
 800931c:	4630      	mov	r0, r6
 800931e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009320:	4798      	blx	r3
 8009322:	2800      	cmp	r0, #0
 8009324:	d0ac      	beq.n	8009280 <__ssvfiscanf_r+0x1f0>
 8009326:	e78b      	b.n	8009240 <__ssvfiscanf_r+0x1b0>
 8009328:	2b04      	cmp	r3, #4
 800932a:	dc0f      	bgt.n	800934c <__ssvfiscanf_r+0x2bc>
 800932c:	466b      	mov	r3, sp
 800932e:	4622      	mov	r2, r4
 8009330:	4630      	mov	r0, r6
 8009332:	a941      	add	r1, sp, #260	; 0x104
 8009334:	f000 f87e 	bl	8009434 <_scanf_i>
 8009338:	e7b0      	b.n	800929c <__ssvfiscanf_r+0x20c>
 800933a:	bf00      	nop
 800933c:	08008fdd 	.word	0x08008fdd
 8009340:	08009057 	.word	0x08009057
 8009344:	0800aa19 	.word	0x0800aa19
 8009348:	0800ab1f 	.word	0x0800ab1f
 800934c:	4b0b      	ldr	r3, [pc, #44]	; (800937c <__ssvfiscanf_r+0x2ec>)
 800934e:	2b00      	cmp	r3, #0
 8009350:	f43f aec4 	beq.w	80090dc <__ssvfiscanf_r+0x4c>
 8009354:	466b      	mov	r3, sp
 8009356:	4622      	mov	r2, r4
 8009358:	4630      	mov	r0, r6
 800935a:	a941      	add	r1, sp, #260	; 0x104
 800935c:	f7fc fe50 	bl	8006000 <_scanf_float>
 8009360:	e79c      	b.n	800929c <__ssvfiscanf_r+0x20c>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009368:	bf18      	it	ne
 800936a:	f04f 30ff 	movne.w	r0, #4294967295
 800936e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009376:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009378:	e7f9      	b.n	800936e <__ssvfiscanf_r+0x2de>
 800937a:	bf00      	nop
 800937c:	08006001 	.word	0x08006001

08009380 <_scanf_chars>:
 8009380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009384:	4615      	mov	r5, r2
 8009386:	688a      	ldr	r2, [r1, #8]
 8009388:	4680      	mov	r8, r0
 800938a:	460c      	mov	r4, r1
 800938c:	b932      	cbnz	r2, 800939c <_scanf_chars+0x1c>
 800938e:	698a      	ldr	r2, [r1, #24]
 8009390:	2a00      	cmp	r2, #0
 8009392:	bf0c      	ite	eq
 8009394:	2201      	moveq	r2, #1
 8009396:	f04f 32ff 	movne.w	r2, #4294967295
 800939a:	608a      	str	r2, [r1, #8]
 800939c:	2700      	movs	r7, #0
 800939e:	6822      	ldr	r2, [r4, #0]
 80093a0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009430 <_scanf_chars+0xb0>
 80093a4:	06d1      	lsls	r1, r2, #27
 80093a6:	bf5f      	itttt	pl
 80093a8:	681a      	ldrpl	r2, [r3, #0]
 80093aa:	1d11      	addpl	r1, r2, #4
 80093ac:	6019      	strpl	r1, [r3, #0]
 80093ae:	6816      	ldrpl	r6, [r2, #0]
 80093b0:	69a0      	ldr	r0, [r4, #24]
 80093b2:	b188      	cbz	r0, 80093d8 <_scanf_chars+0x58>
 80093b4:	2801      	cmp	r0, #1
 80093b6:	d107      	bne.n	80093c8 <_scanf_chars+0x48>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	781a      	ldrb	r2, [r3, #0]
 80093bc:	6963      	ldr	r3, [r4, #20]
 80093be:	5c9b      	ldrb	r3, [r3, r2]
 80093c0:	b953      	cbnz	r3, 80093d8 <_scanf_chars+0x58>
 80093c2:	2f00      	cmp	r7, #0
 80093c4:	d031      	beq.n	800942a <_scanf_chars+0xaa>
 80093c6:	e022      	b.n	800940e <_scanf_chars+0x8e>
 80093c8:	2802      	cmp	r0, #2
 80093ca:	d120      	bne.n	800940e <_scanf_chars+0x8e>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80093d4:	071b      	lsls	r3, r3, #28
 80093d6:	d41a      	bmi.n	800940e <_scanf_chars+0x8e>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	3701      	adds	r7, #1
 80093dc:	06da      	lsls	r2, r3, #27
 80093de:	bf5e      	ittt	pl
 80093e0:	682b      	ldrpl	r3, [r5, #0]
 80093e2:	781b      	ldrbpl	r3, [r3, #0]
 80093e4:	f806 3b01 	strbpl.w	r3, [r6], #1
 80093e8:	682a      	ldr	r2, [r5, #0]
 80093ea:	686b      	ldr	r3, [r5, #4]
 80093ec:	3201      	adds	r2, #1
 80093ee:	602a      	str	r2, [r5, #0]
 80093f0:	68a2      	ldr	r2, [r4, #8]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	3a01      	subs	r2, #1
 80093f6:	606b      	str	r3, [r5, #4]
 80093f8:	60a2      	str	r2, [r4, #8]
 80093fa:	b142      	cbz	r2, 800940e <_scanf_chars+0x8e>
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	dcd7      	bgt.n	80093b0 <_scanf_chars+0x30>
 8009400:	4629      	mov	r1, r5
 8009402:	4640      	mov	r0, r8
 8009404:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009408:	4798      	blx	r3
 800940a:	2800      	cmp	r0, #0
 800940c:	d0d0      	beq.n	80093b0 <_scanf_chars+0x30>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	f013 0310 	ands.w	r3, r3, #16
 8009414:	d105      	bne.n	8009422 <_scanf_chars+0xa2>
 8009416:	68e2      	ldr	r2, [r4, #12]
 8009418:	3201      	adds	r2, #1
 800941a:	60e2      	str	r2, [r4, #12]
 800941c:	69a2      	ldr	r2, [r4, #24]
 800941e:	b102      	cbz	r2, 8009422 <_scanf_chars+0xa2>
 8009420:	7033      	strb	r3, [r6, #0]
 8009422:	2000      	movs	r0, #0
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	443b      	add	r3, r7
 8009428:	6123      	str	r3, [r4, #16]
 800942a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942e:	bf00      	nop
 8009430:	0800aa19 	.word	0x0800aa19

08009434 <_scanf_i>:
 8009434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009438:	460c      	mov	r4, r1
 800943a:	4698      	mov	r8, r3
 800943c:	4b72      	ldr	r3, [pc, #456]	; (8009608 <_scanf_i+0x1d4>)
 800943e:	b087      	sub	sp, #28
 8009440:	4682      	mov	sl, r0
 8009442:	4616      	mov	r6, r2
 8009444:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009448:	ab03      	add	r3, sp, #12
 800944a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800944e:	4b6f      	ldr	r3, [pc, #444]	; (800960c <_scanf_i+0x1d8>)
 8009450:	69a1      	ldr	r1, [r4, #24]
 8009452:	4a6f      	ldr	r2, [pc, #444]	; (8009610 <_scanf_i+0x1dc>)
 8009454:	4627      	mov	r7, r4
 8009456:	2903      	cmp	r1, #3
 8009458:	bf18      	it	ne
 800945a:	461a      	movne	r2, r3
 800945c:	68a3      	ldr	r3, [r4, #8]
 800945e:	9201      	str	r2, [sp, #4]
 8009460:	1e5a      	subs	r2, r3, #1
 8009462:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009466:	bf81      	itttt	hi
 8009468:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800946c:	eb03 0905 	addhi.w	r9, r3, r5
 8009470:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009474:	60a3      	strhi	r3, [r4, #8]
 8009476:	f857 3b1c 	ldr.w	r3, [r7], #28
 800947a:	bf98      	it	ls
 800947c:	f04f 0900 	movls.w	r9, #0
 8009480:	463d      	mov	r5, r7
 8009482:	f04f 0b00 	mov.w	fp, #0
 8009486:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	6831      	ldr	r1, [r6, #0]
 800948e:	ab03      	add	r3, sp, #12
 8009490:	2202      	movs	r2, #2
 8009492:	7809      	ldrb	r1, [r1, #0]
 8009494:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009498:	f7fd f991 	bl	80067be <memchr>
 800949c:	b328      	cbz	r0, 80094ea <_scanf_i+0xb6>
 800949e:	f1bb 0f01 	cmp.w	fp, #1
 80094a2:	d159      	bne.n	8009558 <_scanf_i+0x124>
 80094a4:	6862      	ldr	r2, [r4, #4]
 80094a6:	b92a      	cbnz	r2, 80094b4 <_scanf_i+0x80>
 80094a8:	2308      	movs	r3, #8
 80094aa:	6822      	ldr	r2, [r4, #0]
 80094ac:	6063      	str	r3, [r4, #4]
 80094ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094b2:	6022      	str	r2, [r4, #0]
 80094b4:	6822      	ldr	r2, [r4, #0]
 80094b6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80094ba:	6022      	str	r2, [r4, #0]
 80094bc:	68a2      	ldr	r2, [r4, #8]
 80094be:	1e51      	subs	r1, r2, #1
 80094c0:	60a1      	str	r1, [r4, #8]
 80094c2:	b192      	cbz	r2, 80094ea <_scanf_i+0xb6>
 80094c4:	6832      	ldr	r2, [r6, #0]
 80094c6:	1c51      	adds	r1, r2, #1
 80094c8:	6031      	str	r1, [r6, #0]
 80094ca:	7812      	ldrb	r2, [r2, #0]
 80094cc:	f805 2b01 	strb.w	r2, [r5], #1
 80094d0:	6872      	ldr	r2, [r6, #4]
 80094d2:	3a01      	subs	r2, #1
 80094d4:	2a00      	cmp	r2, #0
 80094d6:	6072      	str	r2, [r6, #4]
 80094d8:	dc07      	bgt.n	80094ea <_scanf_i+0xb6>
 80094da:	4631      	mov	r1, r6
 80094dc:	4650      	mov	r0, sl
 80094de:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80094e2:	4790      	blx	r2
 80094e4:	2800      	cmp	r0, #0
 80094e6:	f040 8085 	bne.w	80095f4 <_scanf_i+0x1c0>
 80094ea:	f10b 0b01 	add.w	fp, fp, #1
 80094ee:	f1bb 0f03 	cmp.w	fp, #3
 80094f2:	d1cb      	bne.n	800948c <_scanf_i+0x58>
 80094f4:	6863      	ldr	r3, [r4, #4]
 80094f6:	b90b      	cbnz	r3, 80094fc <_scanf_i+0xc8>
 80094f8:	230a      	movs	r3, #10
 80094fa:	6063      	str	r3, [r4, #4]
 80094fc:	6863      	ldr	r3, [r4, #4]
 80094fe:	4945      	ldr	r1, [pc, #276]	; (8009614 <_scanf_i+0x1e0>)
 8009500:	6960      	ldr	r0, [r4, #20]
 8009502:	1ac9      	subs	r1, r1, r3
 8009504:	f000 f932 	bl	800976c <__sccl>
 8009508:	f04f 0b00 	mov.w	fp, #0
 800950c:	68a3      	ldr	r3, [r4, #8]
 800950e:	6822      	ldr	r2, [r4, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d03d      	beq.n	8009590 <_scanf_i+0x15c>
 8009514:	6831      	ldr	r1, [r6, #0]
 8009516:	6960      	ldr	r0, [r4, #20]
 8009518:	f891 c000 	ldrb.w	ip, [r1]
 800951c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009520:	2800      	cmp	r0, #0
 8009522:	d035      	beq.n	8009590 <_scanf_i+0x15c>
 8009524:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009528:	d124      	bne.n	8009574 <_scanf_i+0x140>
 800952a:	0510      	lsls	r0, r2, #20
 800952c:	d522      	bpl.n	8009574 <_scanf_i+0x140>
 800952e:	f10b 0b01 	add.w	fp, fp, #1
 8009532:	f1b9 0f00 	cmp.w	r9, #0
 8009536:	d003      	beq.n	8009540 <_scanf_i+0x10c>
 8009538:	3301      	adds	r3, #1
 800953a:	f109 39ff 	add.w	r9, r9, #4294967295
 800953e:	60a3      	str	r3, [r4, #8]
 8009540:	6873      	ldr	r3, [r6, #4]
 8009542:	3b01      	subs	r3, #1
 8009544:	2b00      	cmp	r3, #0
 8009546:	6073      	str	r3, [r6, #4]
 8009548:	dd1b      	ble.n	8009582 <_scanf_i+0x14e>
 800954a:	6833      	ldr	r3, [r6, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	6033      	str	r3, [r6, #0]
 8009550:	68a3      	ldr	r3, [r4, #8]
 8009552:	3b01      	subs	r3, #1
 8009554:	60a3      	str	r3, [r4, #8]
 8009556:	e7d9      	b.n	800950c <_scanf_i+0xd8>
 8009558:	f1bb 0f02 	cmp.w	fp, #2
 800955c:	d1ae      	bne.n	80094bc <_scanf_i+0x88>
 800955e:	6822      	ldr	r2, [r4, #0]
 8009560:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009564:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009568:	d1bf      	bne.n	80094ea <_scanf_i+0xb6>
 800956a:	2310      	movs	r3, #16
 800956c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009570:	6063      	str	r3, [r4, #4]
 8009572:	e7a2      	b.n	80094ba <_scanf_i+0x86>
 8009574:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009578:	6022      	str	r2, [r4, #0]
 800957a:	780b      	ldrb	r3, [r1, #0]
 800957c:	f805 3b01 	strb.w	r3, [r5], #1
 8009580:	e7de      	b.n	8009540 <_scanf_i+0x10c>
 8009582:	4631      	mov	r1, r6
 8009584:	4650      	mov	r0, sl
 8009586:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800958a:	4798      	blx	r3
 800958c:	2800      	cmp	r0, #0
 800958e:	d0df      	beq.n	8009550 <_scanf_i+0x11c>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	05d9      	lsls	r1, r3, #23
 8009594:	d50d      	bpl.n	80095b2 <_scanf_i+0x17e>
 8009596:	42bd      	cmp	r5, r7
 8009598:	d909      	bls.n	80095ae <_scanf_i+0x17a>
 800959a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800959e:	4632      	mov	r2, r6
 80095a0:	4650      	mov	r0, sl
 80095a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80095aa:	4798      	blx	r3
 80095ac:	464d      	mov	r5, r9
 80095ae:	42bd      	cmp	r5, r7
 80095b0:	d028      	beq.n	8009604 <_scanf_i+0x1d0>
 80095b2:	6822      	ldr	r2, [r4, #0]
 80095b4:	f012 0210 	ands.w	r2, r2, #16
 80095b8:	d113      	bne.n	80095e2 <_scanf_i+0x1ae>
 80095ba:	702a      	strb	r2, [r5, #0]
 80095bc:	4639      	mov	r1, r7
 80095be:	6863      	ldr	r3, [r4, #4]
 80095c0:	4650      	mov	r0, sl
 80095c2:	9e01      	ldr	r6, [sp, #4]
 80095c4:	47b0      	blx	r6
 80095c6:	f8d8 3000 	ldr.w	r3, [r8]
 80095ca:	6821      	ldr	r1, [r4, #0]
 80095cc:	1d1a      	adds	r2, r3, #4
 80095ce:	f8c8 2000 	str.w	r2, [r8]
 80095d2:	f011 0f20 	tst.w	r1, #32
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	d00f      	beq.n	80095fa <_scanf_i+0x1c6>
 80095da:	6018      	str	r0, [r3, #0]
 80095dc:	68e3      	ldr	r3, [r4, #12]
 80095de:	3301      	adds	r3, #1
 80095e0:	60e3      	str	r3, [r4, #12]
 80095e2:	2000      	movs	r0, #0
 80095e4:	6923      	ldr	r3, [r4, #16]
 80095e6:	1bed      	subs	r5, r5, r7
 80095e8:	445d      	add	r5, fp
 80095ea:	442b      	add	r3, r5
 80095ec:	6123      	str	r3, [r4, #16]
 80095ee:	b007      	add	sp, #28
 80095f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f4:	f04f 0b00 	mov.w	fp, #0
 80095f8:	e7ca      	b.n	8009590 <_scanf_i+0x15c>
 80095fa:	07ca      	lsls	r2, r1, #31
 80095fc:	bf4c      	ite	mi
 80095fe:	8018      	strhmi	r0, [r3, #0]
 8009600:	6018      	strpl	r0, [r3, #0]
 8009602:	e7eb      	b.n	80095dc <_scanf_i+0x1a8>
 8009604:	2001      	movs	r0, #1
 8009606:	e7f2      	b.n	80095ee <_scanf_i+0x1ba>
 8009608:	0800a774 	.word	0x0800a774
 800960c:	0800a16d 	.word	0x0800a16d
 8009610:	08008d29 	.word	0x08008d29
 8009614:	0800ab3a 	.word	0x0800ab3a

08009618 <__sflush_r>:
 8009618:	898a      	ldrh	r2, [r1, #12]
 800961a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961c:	4605      	mov	r5, r0
 800961e:	0710      	lsls	r0, r2, #28
 8009620:	460c      	mov	r4, r1
 8009622:	d457      	bmi.n	80096d4 <__sflush_r+0xbc>
 8009624:	684b      	ldr	r3, [r1, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	dc04      	bgt.n	8009634 <__sflush_r+0x1c>
 800962a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	dc01      	bgt.n	8009634 <__sflush_r+0x1c>
 8009630:	2000      	movs	r0, #0
 8009632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009636:	2e00      	cmp	r6, #0
 8009638:	d0fa      	beq.n	8009630 <__sflush_r+0x18>
 800963a:	2300      	movs	r3, #0
 800963c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009640:	682f      	ldr	r7, [r5, #0]
 8009642:	6a21      	ldr	r1, [r4, #32]
 8009644:	602b      	str	r3, [r5, #0]
 8009646:	d032      	beq.n	80096ae <__sflush_r+0x96>
 8009648:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	075a      	lsls	r2, r3, #29
 800964e:	d505      	bpl.n	800965c <__sflush_r+0x44>
 8009650:	6863      	ldr	r3, [r4, #4]
 8009652:	1ac0      	subs	r0, r0, r3
 8009654:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009656:	b10b      	cbz	r3, 800965c <__sflush_r+0x44>
 8009658:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800965a:	1ac0      	subs	r0, r0, r3
 800965c:	2300      	movs	r3, #0
 800965e:	4602      	mov	r2, r0
 8009660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009662:	4628      	mov	r0, r5
 8009664:	6a21      	ldr	r1, [r4, #32]
 8009666:	47b0      	blx	r6
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	d106      	bne.n	800967c <__sflush_r+0x64>
 800966e:	6829      	ldr	r1, [r5, #0]
 8009670:	291d      	cmp	r1, #29
 8009672:	d82b      	bhi.n	80096cc <__sflush_r+0xb4>
 8009674:	4a28      	ldr	r2, [pc, #160]	; (8009718 <__sflush_r+0x100>)
 8009676:	410a      	asrs	r2, r1
 8009678:	07d6      	lsls	r6, r2, #31
 800967a:	d427      	bmi.n	80096cc <__sflush_r+0xb4>
 800967c:	2200      	movs	r2, #0
 800967e:	6062      	str	r2, [r4, #4]
 8009680:	6922      	ldr	r2, [r4, #16]
 8009682:	04d9      	lsls	r1, r3, #19
 8009684:	6022      	str	r2, [r4, #0]
 8009686:	d504      	bpl.n	8009692 <__sflush_r+0x7a>
 8009688:	1c42      	adds	r2, r0, #1
 800968a:	d101      	bne.n	8009690 <__sflush_r+0x78>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b903      	cbnz	r3, 8009692 <__sflush_r+0x7a>
 8009690:	6560      	str	r0, [r4, #84]	; 0x54
 8009692:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009694:	602f      	str	r7, [r5, #0]
 8009696:	2900      	cmp	r1, #0
 8009698:	d0ca      	beq.n	8009630 <__sflush_r+0x18>
 800969a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800969e:	4299      	cmp	r1, r3
 80096a0:	d002      	beq.n	80096a8 <__sflush_r+0x90>
 80096a2:	4628      	mov	r0, r5
 80096a4:	f7fd ff0c 	bl	80074c0 <_free_r>
 80096a8:	2000      	movs	r0, #0
 80096aa:	6360      	str	r0, [r4, #52]	; 0x34
 80096ac:	e7c1      	b.n	8009632 <__sflush_r+0x1a>
 80096ae:	2301      	movs	r3, #1
 80096b0:	4628      	mov	r0, r5
 80096b2:	47b0      	blx	r6
 80096b4:	1c41      	adds	r1, r0, #1
 80096b6:	d1c8      	bne.n	800964a <__sflush_r+0x32>
 80096b8:	682b      	ldr	r3, [r5, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0c5      	beq.n	800964a <__sflush_r+0x32>
 80096be:	2b1d      	cmp	r3, #29
 80096c0:	d001      	beq.n	80096c6 <__sflush_r+0xae>
 80096c2:	2b16      	cmp	r3, #22
 80096c4:	d101      	bne.n	80096ca <__sflush_r+0xb2>
 80096c6:	602f      	str	r7, [r5, #0]
 80096c8:	e7b2      	b.n	8009630 <__sflush_r+0x18>
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096d0:	81a3      	strh	r3, [r4, #12]
 80096d2:	e7ae      	b.n	8009632 <__sflush_r+0x1a>
 80096d4:	690f      	ldr	r7, [r1, #16]
 80096d6:	2f00      	cmp	r7, #0
 80096d8:	d0aa      	beq.n	8009630 <__sflush_r+0x18>
 80096da:	0793      	lsls	r3, r2, #30
 80096dc:	bf18      	it	ne
 80096de:	2300      	movne	r3, #0
 80096e0:	680e      	ldr	r6, [r1, #0]
 80096e2:	bf08      	it	eq
 80096e4:	694b      	ldreq	r3, [r1, #20]
 80096e6:	1bf6      	subs	r6, r6, r7
 80096e8:	600f      	str	r7, [r1, #0]
 80096ea:	608b      	str	r3, [r1, #8]
 80096ec:	2e00      	cmp	r6, #0
 80096ee:	dd9f      	ble.n	8009630 <__sflush_r+0x18>
 80096f0:	4633      	mov	r3, r6
 80096f2:	463a      	mov	r2, r7
 80096f4:	4628      	mov	r0, r5
 80096f6:	6a21      	ldr	r1, [r4, #32]
 80096f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80096fc:	47e0      	blx	ip
 80096fe:	2800      	cmp	r0, #0
 8009700:	dc06      	bgt.n	8009710 <__sflush_r+0xf8>
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	f04f 30ff 	mov.w	r0, #4294967295
 8009708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800970c:	81a3      	strh	r3, [r4, #12]
 800970e:	e790      	b.n	8009632 <__sflush_r+0x1a>
 8009710:	4407      	add	r7, r0
 8009712:	1a36      	subs	r6, r6, r0
 8009714:	e7ea      	b.n	80096ec <__sflush_r+0xd4>
 8009716:	bf00      	nop
 8009718:	dfbffffe 	.word	0xdfbffffe

0800971c <_fflush_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	690b      	ldr	r3, [r1, #16]
 8009720:	4605      	mov	r5, r0
 8009722:	460c      	mov	r4, r1
 8009724:	b913      	cbnz	r3, 800972c <_fflush_r+0x10>
 8009726:	2500      	movs	r5, #0
 8009728:	4628      	mov	r0, r5
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	b118      	cbz	r0, 8009736 <_fflush_r+0x1a>
 800972e:	6a03      	ldr	r3, [r0, #32]
 8009730:	b90b      	cbnz	r3, 8009736 <_fflush_r+0x1a>
 8009732:	f7fc feff 	bl	8006534 <__sinit>
 8009736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0f3      	beq.n	8009726 <_fflush_r+0xa>
 800973e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009740:	07d0      	lsls	r0, r2, #31
 8009742:	d404      	bmi.n	800974e <_fflush_r+0x32>
 8009744:	0599      	lsls	r1, r3, #22
 8009746:	d402      	bmi.n	800974e <_fflush_r+0x32>
 8009748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800974a:	f7fd f836 	bl	80067ba <__retarget_lock_acquire_recursive>
 800974e:	4628      	mov	r0, r5
 8009750:	4621      	mov	r1, r4
 8009752:	f7ff ff61 	bl	8009618 <__sflush_r>
 8009756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009758:	4605      	mov	r5, r0
 800975a:	07da      	lsls	r2, r3, #31
 800975c:	d4e4      	bmi.n	8009728 <_fflush_r+0xc>
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	059b      	lsls	r3, r3, #22
 8009762:	d4e1      	bmi.n	8009728 <_fflush_r+0xc>
 8009764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009766:	f7fd f829 	bl	80067bc <__retarget_lock_release_recursive>
 800976a:	e7dd      	b.n	8009728 <_fflush_r+0xc>

0800976c <__sccl>:
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	780b      	ldrb	r3, [r1, #0]
 8009770:	4604      	mov	r4, r0
 8009772:	2b5e      	cmp	r3, #94	; 0x5e
 8009774:	bf0b      	itete	eq
 8009776:	784b      	ldrbeq	r3, [r1, #1]
 8009778:	1c4a      	addne	r2, r1, #1
 800977a:	1c8a      	addeq	r2, r1, #2
 800977c:	2100      	movne	r1, #0
 800977e:	bf08      	it	eq
 8009780:	2101      	moveq	r1, #1
 8009782:	3801      	subs	r0, #1
 8009784:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009788:	f800 1f01 	strb.w	r1, [r0, #1]!
 800978c:	42a8      	cmp	r0, r5
 800978e:	d1fb      	bne.n	8009788 <__sccl+0x1c>
 8009790:	b90b      	cbnz	r3, 8009796 <__sccl+0x2a>
 8009792:	1e50      	subs	r0, r2, #1
 8009794:	bd70      	pop	{r4, r5, r6, pc}
 8009796:	f081 0101 	eor.w	r1, r1, #1
 800979a:	4610      	mov	r0, r2
 800979c:	54e1      	strb	r1, [r4, r3]
 800979e:	4602      	mov	r2, r0
 80097a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80097a4:	2d2d      	cmp	r5, #45	; 0x2d
 80097a6:	d005      	beq.n	80097b4 <__sccl+0x48>
 80097a8:	2d5d      	cmp	r5, #93	; 0x5d
 80097aa:	d016      	beq.n	80097da <__sccl+0x6e>
 80097ac:	2d00      	cmp	r5, #0
 80097ae:	d0f1      	beq.n	8009794 <__sccl+0x28>
 80097b0:	462b      	mov	r3, r5
 80097b2:	e7f2      	b.n	800979a <__sccl+0x2e>
 80097b4:	7846      	ldrb	r6, [r0, #1]
 80097b6:	2e5d      	cmp	r6, #93	; 0x5d
 80097b8:	d0fa      	beq.n	80097b0 <__sccl+0x44>
 80097ba:	42b3      	cmp	r3, r6
 80097bc:	dcf8      	bgt.n	80097b0 <__sccl+0x44>
 80097be:	461a      	mov	r2, r3
 80097c0:	3002      	adds	r0, #2
 80097c2:	3201      	adds	r2, #1
 80097c4:	4296      	cmp	r6, r2
 80097c6:	54a1      	strb	r1, [r4, r2]
 80097c8:	dcfb      	bgt.n	80097c2 <__sccl+0x56>
 80097ca:	1af2      	subs	r2, r6, r3
 80097cc:	3a01      	subs	r2, #1
 80097ce:	42b3      	cmp	r3, r6
 80097d0:	bfa8      	it	ge
 80097d2:	2200      	movge	r2, #0
 80097d4:	1c5d      	adds	r5, r3, #1
 80097d6:	18ab      	adds	r3, r5, r2
 80097d8:	e7e1      	b.n	800979e <__sccl+0x32>
 80097da:	4610      	mov	r0, r2
 80097dc:	e7da      	b.n	8009794 <__sccl+0x28>

080097de <__submore>:
 80097de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e2:	460c      	mov	r4, r1
 80097e4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80097e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097ea:	4299      	cmp	r1, r3
 80097ec:	d11b      	bne.n	8009826 <__submore+0x48>
 80097ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80097f2:	f7fd fed5 	bl	80075a0 <_malloc_r>
 80097f6:	b918      	cbnz	r0, 8009800 <__submore+0x22>
 80097f8:	f04f 30ff 	mov.w	r0, #4294967295
 80097fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009804:	63a3      	str	r3, [r4, #56]	; 0x38
 8009806:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800980a:	6360      	str	r0, [r4, #52]	; 0x34
 800980c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009810:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009814:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009818:	7043      	strb	r3, [r0, #1]
 800981a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800981e:	7003      	strb	r3, [r0, #0]
 8009820:	6020      	str	r0, [r4, #0]
 8009822:	2000      	movs	r0, #0
 8009824:	e7ea      	b.n	80097fc <__submore+0x1e>
 8009826:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009828:	0077      	lsls	r7, r6, #1
 800982a:	463a      	mov	r2, r7
 800982c:	f000 fbfd 	bl	800a02a <_realloc_r>
 8009830:	4605      	mov	r5, r0
 8009832:	2800      	cmp	r0, #0
 8009834:	d0e0      	beq.n	80097f8 <__submore+0x1a>
 8009836:	eb00 0806 	add.w	r8, r0, r6
 800983a:	4601      	mov	r1, r0
 800983c:	4632      	mov	r2, r6
 800983e:	4640      	mov	r0, r8
 8009840:	f000 f842 	bl	80098c8 <memcpy>
 8009844:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009848:	f8c4 8000 	str.w	r8, [r4]
 800984c:	e7e9      	b.n	8009822 <__submore+0x44>

0800984e <memmove>:
 800984e:	4288      	cmp	r0, r1
 8009850:	b510      	push	{r4, lr}
 8009852:	eb01 0402 	add.w	r4, r1, r2
 8009856:	d902      	bls.n	800985e <memmove+0x10>
 8009858:	4284      	cmp	r4, r0
 800985a:	4623      	mov	r3, r4
 800985c:	d807      	bhi.n	800986e <memmove+0x20>
 800985e:	1e43      	subs	r3, r0, #1
 8009860:	42a1      	cmp	r1, r4
 8009862:	d008      	beq.n	8009876 <memmove+0x28>
 8009864:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009868:	f803 2f01 	strb.w	r2, [r3, #1]!
 800986c:	e7f8      	b.n	8009860 <memmove+0x12>
 800986e:	4601      	mov	r1, r0
 8009870:	4402      	add	r2, r0
 8009872:	428a      	cmp	r2, r1
 8009874:	d100      	bne.n	8009878 <memmove+0x2a>
 8009876:	bd10      	pop	{r4, pc}
 8009878:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800987c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009880:	e7f7      	b.n	8009872 <memmove+0x24>

08009882 <strncmp>:
 8009882:	b510      	push	{r4, lr}
 8009884:	b16a      	cbz	r2, 80098a2 <strncmp+0x20>
 8009886:	3901      	subs	r1, #1
 8009888:	1884      	adds	r4, r0, r2
 800988a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800988e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009892:	429a      	cmp	r2, r3
 8009894:	d103      	bne.n	800989e <strncmp+0x1c>
 8009896:	42a0      	cmp	r0, r4
 8009898:	d001      	beq.n	800989e <strncmp+0x1c>
 800989a:	2a00      	cmp	r2, #0
 800989c:	d1f5      	bne.n	800988a <strncmp+0x8>
 800989e:	1ad0      	subs	r0, r2, r3
 80098a0:	bd10      	pop	{r4, pc}
 80098a2:	4610      	mov	r0, r2
 80098a4:	e7fc      	b.n	80098a0 <strncmp+0x1e>
	...

080098a8 <_sbrk_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	2300      	movs	r3, #0
 80098ac:	4d05      	ldr	r5, [pc, #20]	; (80098c4 <_sbrk_r+0x1c>)
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	602b      	str	r3, [r5, #0]
 80098b4:	f7f8 fb10 	bl	8001ed8 <_sbrk>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <_sbrk_r+0x1a>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	b103      	cbz	r3, 80098c2 <_sbrk_r+0x1a>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	200007d4 	.word	0x200007d4

080098c8 <memcpy>:
 80098c8:	440a      	add	r2, r1
 80098ca:	4291      	cmp	r1, r2
 80098cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80098d0:	d100      	bne.n	80098d4 <memcpy+0xc>
 80098d2:	4770      	bx	lr
 80098d4:	b510      	push	{r4, lr}
 80098d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098da:	4291      	cmp	r1, r2
 80098dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098e0:	d1f9      	bne.n	80098d6 <memcpy+0xe>
 80098e2:	bd10      	pop	{r4, pc}

080098e4 <nan>:
 80098e4:	2000      	movs	r0, #0
 80098e6:	4901      	ldr	r1, [pc, #4]	; (80098ec <nan+0x8>)
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	7ff80000 	.word	0x7ff80000

080098f0 <__assert_func>:
 80098f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098f2:	4614      	mov	r4, r2
 80098f4:	461a      	mov	r2, r3
 80098f6:	4b09      	ldr	r3, [pc, #36]	; (800991c <__assert_func+0x2c>)
 80098f8:	4605      	mov	r5, r0
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68d8      	ldr	r0, [r3, #12]
 80098fe:	b14c      	cbz	r4, 8009914 <__assert_func+0x24>
 8009900:	4b07      	ldr	r3, [pc, #28]	; (8009920 <__assert_func+0x30>)
 8009902:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009906:	9100      	str	r1, [sp, #0]
 8009908:	462b      	mov	r3, r5
 800990a:	4906      	ldr	r1, [pc, #24]	; (8009924 <__assert_func+0x34>)
 800990c:	f000 fc3e 	bl	800a18c <fiprintf>
 8009910:	f000 fc4e 	bl	800a1b0 <abort>
 8009914:	4b04      	ldr	r3, [pc, #16]	; (8009928 <__assert_func+0x38>)
 8009916:	461c      	mov	r4, r3
 8009918:	e7f3      	b.n	8009902 <__assert_func+0x12>
 800991a:	bf00      	nop
 800991c:	20000064 	.word	0x20000064
 8009920:	0800ab4d 	.word	0x0800ab4d
 8009924:	0800ab5a 	.word	0x0800ab5a
 8009928:	0800ab88 	.word	0x0800ab88

0800992c <_calloc_r>:
 800992c:	b570      	push	{r4, r5, r6, lr}
 800992e:	fba1 5402 	umull	r5, r4, r1, r2
 8009932:	b934      	cbnz	r4, 8009942 <_calloc_r+0x16>
 8009934:	4629      	mov	r1, r5
 8009936:	f7fd fe33 	bl	80075a0 <_malloc_r>
 800993a:	4606      	mov	r6, r0
 800993c:	b928      	cbnz	r0, 800994a <_calloc_r+0x1e>
 800993e:	4630      	mov	r0, r6
 8009940:	bd70      	pop	{r4, r5, r6, pc}
 8009942:	220c      	movs	r2, #12
 8009944:	2600      	movs	r6, #0
 8009946:	6002      	str	r2, [r0, #0]
 8009948:	e7f9      	b.n	800993e <_calloc_r+0x12>
 800994a:	462a      	mov	r2, r5
 800994c:	4621      	mov	r1, r4
 800994e:	f7fc feb6 	bl	80066be <memset>
 8009952:	e7f4      	b.n	800993e <_calloc_r+0x12>

08009954 <rshift>:
 8009954:	6903      	ldr	r3, [r0, #16]
 8009956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800995a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800995e:	f100 0414 	add.w	r4, r0, #20
 8009962:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009966:	dd46      	ble.n	80099f6 <rshift+0xa2>
 8009968:	f011 011f 	ands.w	r1, r1, #31
 800996c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009970:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009974:	d10c      	bne.n	8009990 <rshift+0x3c>
 8009976:	4629      	mov	r1, r5
 8009978:	f100 0710 	add.w	r7, r0, #16
 800997c:	42b1      	cmp	r1, r6
 800997e:	d335      	bcc.n	80099ec <rshift+0x98>
 8009980:	1a9b      	subs	r3, r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	1eea      	subs	r2, r5, #3
 8009986:	4296      	cmp	r6, r2
 8009988:	bf38      	it	cc
 800998a:	2300      	movcc	r3, #0
 800998c:	4423      	add	r3, r4
 800998e:	e015      	b.n	80099bc <rshift+0x68>
 8009990:	46a1      	mov	r9, r4
 8009992:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009996:	f1c1 0820 	rsb	r8, r1, #32
 800999a:	40cf      	lsrs	r7, r1
 800999c:	f105 0e04 	add.w	lr, r5, #4
 80099a0:	4576      	cmp	r6, lr
 80099a2:	46f4      	mov	ip, lr
 80099a4:	d816      	bhi.n	80099d4 <rshift+0x80>
 80099a6:	1a9a      	subs	r2, r3, r2
 80099a8:	0092      	lsls	r2, r2, #2
 80099aa:	3a04      	subs	r2, #4
 80099ac:	3501      	adds	r5, #1
 80099ae:	42ae      	cmp	r6, r5
 80099b0:	bf38      	it	cc
 80099b2:	2200      	movcc	r2, #0
 80099b4:	18a3      	adds	r3, r4, r2
 80099b6:	50a7      	str	r7, [r4, r2]
 80099b8:	b107      	cbz	r7, 80099bc <rshift+0x68>
 80099ba:	3304      	adds	r3, #4
 80099bc:	42a3      	cmp	r3, r4
 80099be:	eba3 0204 	sub.w	r2, r3, r4
 80099c2:	bf08      	it	eq
 80099c4:	2300      	moveq	r3, #0
 80099c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80099ca:	6102      	str	r2, [r0, #16]
 80099cc:	bf08      	it	eq
 80099ce:	6143      	streq	r3, [r0, #20]
 80099d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099d4:	f8dc c000 	ldr.w	ip, [ip]
 80099d8:	fa0c fc08 	lsl.w	ip, ip, r8
 80099dc:	ea4c 0707 	orr.w	r7, ip, r7
 80099e0:	f849 7b04 	str.w	r7, [r9], #4
 80099e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80099e8:	40cf      	lsrs	r7, r1
 80099ea:	e7d9      	b.n	80099a0 <rshift+0x4c>
 80099ec:	f851 cb04 	ldr.w	ip, [r1], #4
 80099f0:	f847 cf04 	str.w	ip, [r7, #4]!
 80099f4:	e7c2      	b.n	800997c <rshift+0x28>
 80099f6:	4623      	mov	r3, r4
 80099f8:	e7e0      	b.n	80099bc <rshift+0x68>

080099fa <__hexdig_fun>:
 80099fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80099fe:	2b09      	cmp	r3, #9
 8009a00:	d802      	bhi.n	8009a08 <__hexdig_fun+0xe>
 8009a02:	3820      	subs	r0, #32
 8009a04:	b2c0      	uxtb	r0, r0
 8009a06:	4770      	bx	lr
 8009a08:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a0c:	2b05      	cmp	r3, #5
 8009a0e:	d801      	bhi.n	8009a14 <__hexdig_fun+0x1a>
 8009a10:	3847      	subs	r0, #71	; 0x47
 8009a12:	e7f7      	b.n	8009a04 <__hexdig_fun+0xa>
 8009a14:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a18:	2b05      	cmp	r3, #5
 8009a1a:	d801      	bhi.n	8009a20 <__hexdig_fun+0x26>
 8009a1c:	3827      	subs	r0, #39	; 0x27
 8009a1e:	e7f1      	b.n	8009a04 <__hexdig_fun+0xa>
 8009a20:	2000      	movs	r0, #0
 8009a22:	4770      	bx	lr

08009a24 <__gethex>:
 8009a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a28:	4681      	mov	r9, r0
 8009a2a:	468a      	mov	sl, r1
 8009a2c:	4617      	mov	r7, r2
 8009a2e:	680a      	ldr	r2, [r1, #0]
 8009a30:	b085      	sub	sp, #20
 8009a32:	f102 0b02 	add.w	fp, r2, #2
 8009a36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009a3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009a3e:	9302      	str	r3, [sp, #8]
 8009a40:	32fe      	adds	r2, #254	; 0xfe
 8009a42:	eb02 030b 	add.w	r3, r2, fp
 8009a46:	46d8      	mov	r8, fp
 8009a48:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	2830      	cmp	r0, #48	; 0x30
 8009a50:	d0f7      	beq.n	8009a42 <__gethex+0x1e>
 8009a52:	f7ff ffd2 	bl	80099fa <__hexdig_fun>
 8009a56:	4604      	mov	r4, r0
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d138      	bne.n	8009ace <__gethex+0xaa>
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	4640      	mov	r0, r8
 8009a60:	49a7      	ldr	r1, [pc, #668]	; (8009d00 <__gethex+0x2dc>)
 8009a62:	f7ff ff0e 	bl	8009882 <strncmp>
 8009a66:	4606      	mov	r6, r0
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d169      	bne.n	8009b40 <__gethex+0x11c>
 8009a6c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009a70:	465d      	mov	r5, fp
 8009a72:	f7ff ffc2 	bl	80099fa <__hexdig_fun>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d064      	beq.n	8009b44 <__gethex+0x120>
 8009a7a:	465a      	mov	r2, fp
 8009a7c:	7810      	ldrb	r0, [r2, #0]
 8009a7e:	4690      	mov	r8, r2
 8009a80:	2830      	cmp	r0, #48	; 0x30
 8009a82:	f102 0201 	add.w	r2, r2, #1
 8009a86:	d0f9      	beq.n	8009a7c <__gethex+0x58>
 8009a88:	f7ff ffb7 	bl	80099fa <__hexdig_fun>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	fab0 f480 	clz	r4, r0
 8009a92:	465e      	mov	r6, fp
 8009a94:	0964      	lsrs	r4, r4, #5
 8009a96:	9301      	str	r3, [sp, #4]
 8009a98:	4642      	mov	r2, r8
 8009a9a:	4615      	mov	r5, r2
 8009a9c:	7828      	ldrb	r0, [r5, #0]
 8009a9e:	3201      	adds	r2, #1
 8009aa0:	f7ff ffab 	bl	80099fa <__hexdig_fun>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d1f8      	bne.n	8009a9a <__gethex+0x76>
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	4628      	mov	r0, r5
 8009aac:	4994      	ldr	r1, [pc, #592]	; (8009d00 <__gethex+0x2dc>)
 8009aae:	f7ff fee8 	bl	8009882 <strncmp>
 8009ab2:	b978      	cbnz	r0, 8009ad4 <__gethex+0xb0>
 8009ab4:	b946      	cbnz	r6, 8009ac8 <__gethex+0xa4>
 8009ab6:	1c6e      	adds	r6, r5, #1
 8009ab8:	4632      	mov	r2, r6
 8009aba:	4615      	mov	r5, r2
 8009abc:	7828      	ldrb	r0, [r5, #0]
 8009abe:	3201      	adds	r2, #1
 8009ac0:	f7ff ff9b 	bl	80099fa <__hexdig_fun>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d1f8      	bne.n	8009aba <__gethex+0x96>
 8009ac8:	1b73      	subs	r3, r6, r5
 8009aca:	009e      	lsls	r6, r3, #2
 8009acc:	e004      	b.n	8009ad8 <__gethex+0xb4>
 8009ace:	2400      	movs	r4, #0
 8009ad0:	4626      	mov	r6, r4
 8009ad2:	e7e1      	b.n	8009a98 <__gethex+0x74>
 8009ad4:	2e00      	cmp	r6, #0
 8009ad6:	d1f7      	bne.n	8009ac8 <__gethex+0xa4>
 8009ad8:	782b      	ldrb	r3, [r5, #0]
 8009ada:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ade:	2b50      	cmp	r3, #80	; 0x50
 8009ae0:	d13d      	bne.n	8009b5e <__gethex+0x13a>
 8009ae2:	786b      	ldrb	r3, [r5, #1]
 8009ae4:	2b2b      	cmp	r3, #43	; 0x2b
 8009ae6:	d02f      	beq.n	8009b48 <__gethex+0x124>
 8009ae8:	2b2d      	cmp	r3, #45	; 0x2d
 8009aea:	d031      	beq.n	8009b50 <__gethex+0x12c>
 8009aec:	f04f 0b00 	mov.w	fp, #0
 8009af0:	1c69      	adds	r1, r5, #1
 8009af2:	7808      	ldrb	r0, [r1, #0]
 8009af4:	f7ff ff81 	bl	80099fa <__hexdig_fun>
 8009af8:	1e42      	subs	r2, r0, #1
 8009afa:	b2d2      	uxtb	r2, r2
 8009afc:	2a18      	cmp	r2, #24
 8009afe:	d82e      	bhi.n	8009b5e <__gethex+0x13a>
 8009b00:	f1a0 0210 	sub.w	r2, r0, #16
 8009b04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b08:	f7ff ff77 	bl	80099fa <__hexdig_fun>
 8009b0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009b10:	fa5f fc8c 	uxtb.w	ip, ip
 8009b14:	f1bc 0f18 	cmp.w	ip, #24
 8009b18:	d91d      	bls.n	8009b56 <__gethex+0x132>
 8009b1a:	f1bb 0f00 	cmp.w	fp, #0
 8009b1e:	d000      	beq.n	8009b22 <__gethex+0xfe>
 8009b20:	4252      	negs	r2, r2
 8009b22:	4416      	add	r6, r2
 8009b24:	f8ca 1000 	str.w	r1, [sl]
 8009b28:	b1dc      	cbz	r4, 8009b62 <__gethex+0x13e>
 8009b2a:	9b01      	ldr	r3, [sp, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	bf14      	ite	ne
 8009b30:	f04f 0800 	movne.w	r8, #0
 8009b34:	f04f 0806 	moveq.w	r8, #6
 8009b38:	4640      	mov	r0, r8
 8009b3a:	b005      	add	sp, #20
 8009b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b40:	4645      	mov	r5, r8
 8009b42:	4626      	mov	r6, r4
 8009b44:	2401      	movs	r4, #1
 8009b46:	e7c7      	b.n	8009ad8 <__gethex+0xb4>
 8009b48:	f04f 0b00 	mov.w	fp, #0
 8009b4c:	1ca9      	adds	r1, r5, #2
 8009b4e:	e7d0      	b.n	8009af2 <__gethex+0xce>
 8009b50:	f04f 0b01 	mov.w	fp, #1
 8009b54:	e7fa      	b.n	8009b4c <__gethex+0x128>
 8009b56:	230a      	movs	r3, #10
 8009b58:	fb03 0002 	mla	r0, r3, r2, r0
 8009b5c:	e7d0      	b.n	8009b00 <__gethex+0xdc>
 8009b5e:	4629      	mov	r1, r5
 8009b60:	e7e0      	b.n	8009b24 <__gethex+0x100>
 8009b62:	4621      	mov	r1, r4
 8009b64:	eba5 0308 	sub.w	r3, r5, r8
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	2b07      	cmp	r3, #7
 8009b6c:	dc0a      	bgt.n	8009b84 <__gethex+0x160>
 8009b6e:	4648      	mov	r0, r9
 8009b70:	f7fd fda2 	bl	80076b8 <_Balloc>
 8009b74:	4604      	mov	r4, r0
 8009b76:	b940      	cbnz	r0, 8009b8a <__gethex+0x166>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	21e4      	movs	r1, #228	; 0xe4
 8009b7c:	4b61      	ldr	r3, [pc, #388]	; (8009d04 <__gethex+0x2e0>)
 8009b7e:	4862      	ldr	r0, [pc, #392]	; (8009d08 <__gethex+0x2e4>)
 8009b80:	f7ff feb6 	bl	80098f0 <__assert_func>
 8009b84:	3101      	adds	r1, #1
 8009b86:	105b      	asrs	r3, r3, #1
 8009b88:	e7ef      	b.n	8009b6a <__gethex+0x146>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	469b      	mov	fp, r3
 8009b8e:	f100 0a14 	add.w	sl, r0, #20
 8009b92:	f8cd a004 	str.w	sl, [sp, #4]
 8009b96:	45a8      	cmp	r8, r5
 8009b98:	d344      	bcc.n	8009c24 <__gethex+0x200>
 8009b9a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b9e:	4658      	mov	r0, fp
 8009ba0:	f848 bb04 	str.w	fp, [r8], #4
 8009ba4:	eba8 080a 	sub.w	r8, r8, sl
 8009ba8:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009bac:	6122      	str	r2, [r4, #16]
 8009bae:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009bb2:	f7fd fe73 	bl	800789c <__hi0bits>
 8009bb6:	683d      	ldr	r5, [r7, #0]
 8009bb8:	eba8 0800 	sub.w	r8, r8, r0
 8009bbc:	45a8      	cmp	r8, r5
 8009bbe:	dd59      	ble.n	8009c74 <__gethex+0x250>
 8009bc0:	eba8 0805 	sub.w	r8, r8, r5
 8009bc4:	4641      	mov	r1, r8
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f7fe f9f1 	bl	8007fae <__any_on>
 8009bcc:	4683      	mov	fp, r0
 8009bce:	b1b8      	cbz	r0, 8009c00 <__gethex+0x1dc>
 8009bd0:	f04f 0b01 	mov.w	fp, #1
 8009bd4:	f108 33ff 	add.w	r3, r8, #4294967295
 8009bd8:	1159      	asrs	r1, r3, #5
 8009bda:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009bde:	f003 021f 	and.w	r2, r3, #31
 8009be2:	fa0b f202 	lsl.w	r2, fp, r2
 8009be6:	420a      	tst	r2, r1
 8009be8:	d00a      	beq.n	8009c00 <__gethex+0x1dc>
 8009bea:	455b      	cmp	r3, fp
 8009bec:	dd06      	ble.n	8009bfc <__gethex+0x1d8>
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f1a8 0102 	sub.w	r1, r8, #2
 8009bf4:	f7fe f9db 	bl	8007fae <__any_on>
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d138      	bne.n	8009c6e <__gethex+0x24a>
 8009bfc:	f04f 0b02 	mov.w	fp, #2
 8009c00:	4641      	mov	r1, r8
 8009c02:	4620      	mov	r0, r4
 8009c04:	f7ff fea6 	bl	8009954 <rshift>
 8009c08:	4446      	add	r6, r8
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	42b3      	cmp	r3, r6
 8009c0e:	da41      	bge.n	8009c94 <__gethex+0x270>
 8009c10:	4621      	mov	r1, r4
 8009c12:	4648      	mov	r0, r9
 8009c14:	f7fd fd90 	bl	8007738 <_Bfree>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c1c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	e789      	b.n	8009b38 <__gethex+0x114>
 8009c24:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009c28:	2a2e      	cmp	r2, #46	; 0x2e
 8009c2a:	d014      	beq.n	8009c56 <__gethex+0x232>
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d106      	bne.n	8009c3e <__gethex+0x21a>
 8009c30:	9b01      	ldr	r3, [sp, #4]
 8009c32:	f843 bb04 	str.w	fp, [r3], #4
 8009c36:	f04f 0b00 	mov.w	fp, #0
 8009c3a:	9301      	str	r3, [sp, #4]
 8009c3c:	465b      	mov	r3, fp
 8009c3e:	7828      	ldrb	r0, [r5, #0]
 8009c40:	9303      	str	r3, [sp, #12]
 8009c42:	f7ff feda 	bl	80099fa <__hexdig_fun>
 8009c46:	9b03      	ldr	r3, [sp, #12]
 8009c48:	f000 000f 	and.w	r0, r0, #15
 8009c4c:	4098      	lsls	r0, r3
 8009c4e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009c52:	3304      	adds	r3, #4
 8009c54:	e79f      	b.n	8009b96 <__gethex+0x172>
 8009c56:	45a8      	cmp	r8, r5
 8009c58:	d8e8      	bhi.n	8009c2c <__gethex+0x208>
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	4928      	ldr	r1, [pc, #160]	; (8009d00 <__gethex+0x2dc>)
 8009c60:	9303      	str	r3, [sp, #12]
 8009c62:	f7ff fe0e 	bl	8009882 <strncmp>
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d1df      	bne.n	8009c2c <__gethex+0x208>
 8009c6c:	e793      	b.n	8009b96 <__gethex+0x172>
 8009c6e:	f04f 0b03 	mov.w	fp, #3
 8009c72:	e7c5      	b.n	8009c00 <__gethex+0x1dc>
 8009c74:	da0b      	bge.n	8009c8e <__gethex+0x26a>
 8009c76:	eba5 0808 	sub.w	r8, r5, r8
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	4642      	mov	r2, r8
 8009c7e:	4648      	mov	r0, r9
 8009c80:	f7fd ff72 	bl	8007b68 <__lshift>
 8009c84:	4604      	mov	r4, r0
 8009c86:	eba6 0608 	sub.w	r6, r6, r8
 8009c8a:	f100 0a14 	add.w	sl, r0, #20
 8009c8e:	f04f 0b00 	mov.w	fp, #0
 8009c92:	e7ba      	b.n	8009c0a <__gethex+0x1e6>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	42b3      	cmp	r3, r6
 8009c98:	dd74      	ble.n	8009d84 <__gethex+0x360>
 8009c9a:	1b9e      	subs	r6, r3, r6
 8009c9c:	42b5      	cmp	r5, r6
 8009c9e:	dc35      	bgt.n	8009d0c <__gethex+0x2e8>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d023      	beq.n	8009cee <__gethex+0x2ca>
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	d025      	beq.n	8009cf6 <__gethex+0x2d2>
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d115      	bne.n	8009cda <__gethex+0x2b6>
 8009cae:	42b5      	cmp	r5, r6
 8009cb0:	d113      	bne.n	8009cda <__gethex+0x2b6>
 8009cb2:	2d01      	cmp	r5, #1
 8009cb4:	d10b      	bne.n	8009cce <__gethex+0x2aa>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	9a02      	ldr	r2, [sp, #8]
 8009cba:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009cbe:	6013      	str	r3, [r2, #0]
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	6123      	str	r3, [r4, #16]
 8009cc4:	f8ca 3000 	str.w	r3, [sl]
 8009cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cca:	601c      	str	r4, [r3, #0]
 8009ccc:	e734      	b.n	8009b38 <__gethex+0x114>
 8009cce:	4620      	mov	r0, r4
 8009cd0:	1e69      	subs	r1, r5, #1
 8009cd2:	f7fe f96c 	bl	8007fae <__any_on>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d1ed      	bne.n	8009cb6 <__gethex+0x292>
 8009cda:	4621      	mov	r1, r4
 8009cdc:	4648      	mov	r0, r9
 8009cde:	f7fd fd2b 	bl	8007738 <_Bfree>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ce6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009cea:	6013      	str	r3, [r2, #0]
 8009cec:	e724      	b.n	8009b38 <__gethex+0x114>
 8009cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1f2      	bne.n	8009cda <__gethex+0x2b6>
 8009cf4:	e7df      	b.n	8009cb6 <__gethex+0x292>
 8009cf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1dc      	bne.n	8009cb6 <__gethex+0x292>
 8009cfc:	e7ed      	b.n	8009cda <__gethex+0x2b6>
 8009cfe:	bf00      	nop
 8009d00:	0800a9c4 	.word	0x0800a9c4
 8009d04:	0800a85d 	.word	0x0800a85d
 8009d08:	0800ab89 	.word	0x0800ab89
 8009d0c:	f106 38ff 	add.w	r8, r6, #4294967295
 8009d10:	f1bb 0f00 	cmp.w	fp, #0
 8009d14:	d133      	bne.n	8009d7e <__gethex+0x35a>
 8009d16:	f1b8 0f00 	cmp.w	r8, #0
 8009d1a:	d004      	beq.n	8009d26 <__gethex+0x302>
 8009d1c:	4641      	mov	r1, r8
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7fe f945 	bl	8007fae <__any_on>
 8009d24:	4683      	mov	fp, r0
 8009d26:	2301      	movs	r3, #1
 8009d28:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009d2c:	f008 081f 	and.w	r8, r8, #31
 8009d30:	fa03 f308 	lsl.w	r3, r3, r8
 8009d34:	f04f 0802 	mov.w	r8, #2
 8009d38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009d3c:	4631      	mov	r1, r6
 8009d3e:	4213      	tst	r3, r2
 8009d40:	4620      	mov	r0, r4
 8009d42:	bf18      	it	ne
 8009d44:	f04b 0b02 	orrne.w	fp, fp, #2
 8009d48:	1bad      	subs	r5, r5, r6
 8009d4a:	f7ff fe03 	bl	8009954 <rshift>
 8009d4e:	687e      	ldr	r6, [r7, #4]
 8009d50:	f1bb 0f00 	cmp.w	fp, #0
 8009d54:	d04a      	beq.n	8009dec <__gethex+0x3c8>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d016      	beq.n	8009d8a <__gethex+0x366>
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d018      	beq.n	8009d92 <__gethex+0x36e>
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d109      	bne.n	8009d78 <__gethex+0x354>
 8009d64:	f01b 0f02 	tst.w	fp, #2
 8009d68:	d006      	beq.n	8009d78 <__gethex+0x354>
 8009d6a:	f8da 3000 	ldr.w	r3, [sl]
 8009d6e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009d72:	f01b 0f01 	tst.w	fp, #1
 8009d76:	d10f      	bne.n	8009d98 <__gethex+0x374>
 8009d78:	f048 0810 	orr.w	r8, r8, #16
 8009d7c:	e036      	b.n	8009dec <__gethex+0x3c8>
 8009d7e:	f04f 0b01 	mov.w	fp, #1
 8009d82:	e7d0      	b.n	8009d26 <__gethex+0x302>
 8009d84:	f04f 0801 	mov.w	r8, #1
 8009d88:	e7e2      	b.n	8009d50 <__gethex+0x32c>
 8009d8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d8c:	f1c3 0301 	rsb	r3, r3, #1
 8009d90:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d0ef      	beq.n	8009d78 <__gethex+0x354>
 8009d98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009d9c:	f104 0214 	add.w	r2, r4, #20
 8009da0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	2300      	movs	r3, #0
 8009da8:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009dac:	4694      	mov	ip, r2
 8009dae:	f852 1b04 	ldr.w	r1, [r2], #4
 8009db2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009db6:	d01e      	beq.n	8009df6 <__gethex+0x3d2>
 8009db8:	3101      	adds	r1, #1
 8009dba:	f8cc 1000 	str.w	r1, [ip]
 8009dbe:	f1b8 0f02 	cmp.w	r8, #2
 8009dc2:	f104 0214 	add.w	r2, r4, #20
 8009dc6:	d13d      	bne.n	8009e44 <__gethex+0x420>
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	42ab      	cmp	r3, r5
 8009dce:	d10b      	bne.n	8009de8 <__gethex+0x3c4>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	1169      	asrs	r1, r5, #5
 8009dd4:	f005 051f 	and.w	r5, r5, #31
 8009dd8:	fa03 f505 	lsl.w	r5, r3, r5
 8009ddc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009de0:	421d      	tst	r5, r3
 8009de2:	bf18      	it	ne
 8009de4:	f04f 0801 	movne.w	r8, #1
 8009de8:	f048 0820 	orr.w	r8, r8, #32
 8009dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dee:	601c      	str	r4, [r3, #0]
 8009df0:	9b02      	ldr	r3, [sp, #8]
 8009df2:	601e      	str	r6, [r3, #0]
 8009df4:	e6a0      	b.n	8009b38 <__gethex+0x114>
 8009df6:	4290      	cmp	r0, r2
 8009df8:	f842 3c04 	str.w	r3, [r2, #-4]
 8009dfc:	d8d6      	bhi.n	8009dac <__gethex+0x388>
 8009dfe:	68a2      	ldr	r2, [r4, #8]
 8009e00:	4593      	cmp	fp, r2
 8009e02:	db17      	blt.n	8009e34 <__gethex+0x410>
 8009e04:	6861      	ldr	r1, [r4, #4]
 8009e06:	4648      	mov	r0, r9
 8009e08:	3101      	adds	r1, #1
 8009e0a:	f7fd fc55 	bl	80076b8 <_Balloc>
 8009e0e:	4682      	mov	sl, r0
 8009e10:	b918      	cbnz	r0, 8009e1a <__gethex+0x3f6>
 8009e12:	4602      	mov	r2, r0
 8009e14:	2184      	movs	r1, #132	; 0x84
 8009e16:	4b1a      	ldr	r3, [pc, #104]	; (8009e80 <__gethex+0x45c>)
 8009e18:	e6b1      	b.n	8009b7e <__gethex+0x15a>
 8009e1a:	6922      	ldr	r2, [r4, #16]
 8009e1c:	f104 010c 	add.w	r1, r4, #12
 8009e20:	3202      	adds	r2, #2
 8009e22:	0092      	lsls	r2, r2, #2
 8009e24:	300c      	adds	r0, #12
 8009e26:	f7ff fd4f 	bl	80098c8 <memcpy>
 8009e2a:	4621      	mov	r1, r4
 8009e2c:	4648      	mov	r0, r9
 8009e2e:	f7fd fc83 	bl	8007738 <_Bfree>
 8009e32:	4654      	mov	r4, sl
 8009e34:	6922      	ldr	r2, [r4, #16]
 8009e36:	1c51      	adds	r1, r2, #1
 8009e38:	6121      	str	r1, [r4, #16]
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009e40:	6151      	str	r1, [r2, #20]
 8009e42:	e7bc      	b.n	8009dbe <__gethex+0x39a>
 8009e44:	6921      	ldr	r1, [r4, #16]
 8009e46:	4559      	cmp	r1, fp
 8009e48:	dd0b      	ble.n	8009e62 <__gethex+0x43e>
 8009e4a:	2101      	movs	r1, #1
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f7ff fd81 	bl	8009954 <rshift>
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	3601      	adds	r6, #1
 8009e56:	42b3      	cmp	r3, r6
 8009e58:	f6ff aeda 	blt.w	8009c10 <__gethex+0x1ec>
 8009e5c:	f04f 0801 	mov.w	r8, #1
 8009e60:	e7c2      	b.n	8009de8 <__gethex+0x3c4>
 8009e62:	f015 051f 	ands.w	r5, r5, #31
 8009e66:	d0f9      	beq.n	8009e5c <__gethex+0x438>
 8009e68:	9b01      	ldr	r3, [sp, #4]
 8009e6a:	f1c5 0520 	rsb	r5, r5, #32
 8009e6e:	441a      	add	r2, r3
 8009e70:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009e74:	f7fd fd12 	bl	800789c <__hi0bits>
 8009e78:	42a8      	cmp	r0, r5
 8009e7a:	dbe6      	blt.n	8009e4a <__gethex+0x426>
 8009e7c:	e7ee      	b.n	8009e5c <__gethex+0x438>
 8009e7e:	bf00      	nop
 8009e80:	0800a85d 	.word	0x0800a85d

08009e84 <L_shift>:
 8009e84:	f1c2 0208 	rsb	r2, r2, #8
 8009e88:	0092      	lsls	r2, r2, #2
 8009e8a:	b570      	push	{r4, r5, r6, lr}
 8009e8c:	f1c2 0620 	rsb	r6, r2, #32
 8009e90:	6843      	ldr	r3, [r0, #4]
 8009e92:	6804      	ldr	r4, [r0, #0]
 8009e94:	fa03 f506 	lsl.w	r5, r3, r6
 8009e98:	432c      	orrs	r4, r5
 8009e9a:	40d3      	lsrs	r3, r2
 8009e9c:	6004      	str	r4, [r0, #0]
 8009e9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ea2:	4288      	cmp	r0, r1
 8009ea4:	d3f4      	bcc.n	8009e90 <L_shift+0xc>
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}

08009ea8 <__match>:
 8009ea8:	b530      	push	{r4, r5, lr}
 8009eaa:	6803      	ldr	r3, [r0, #0]
 8009eac:	3301      	adds	r3, #1
 8009eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eb2:	b914      	cbnz	r4, 8009eba <__match+0x12>
 8009eb4:	6003      	str	r3, [r0, #0]
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	bd30      	pop	{r4, r5, pc}
 8009eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ebe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009ec2:	2d19      	cmp	r5, #25
 8009ec4:	bf98      	it	ls
 8009ec6:	3220      	addls	r2, #32
 8009ec8:	42a2      	cmp	r2, r4
 8009eca:	d0f0      	beq.n	8009eae <__match+0x6>
 8009ecc:	2000      	movs	r0, #0
 8009ece:	e7f3      	b.n	8009eb8 <__match+0x10>

08009ed0 <__hexnan>:
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	2500      	movs	r5, #0
 8009ed6:	680b      	ldr	r3, [r1, #0]
 8009ed8:	4682      	mov	sl, r0
 8009eda:	115e      	asrs	r6, r3, #5
 8009edc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ee0:	f013 031f 	ands.w	r3, r3, #31
 8009ee4:	bf18      	it	ne
 8009ee6:	3604      	addne	r6, #4
 8009ee8:	1f37      	subs	r7, r6, #4
 8009eea:	4690      	mov	r8, r2
 8009eec:	46b9      	mov	r9, r7
 8009eee:	463c      	mov	r4, r7
 8009ef0:	46ab      	mov	fp, r5
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	6801      	ldr	r1, [r0, #0]
 8009ef6:	9301      	str	r3, [sp, #4]
 8009ef8:	f846 5c04 	str.w	r5, [r6, #-4]
 8009efc:	9502      	str	r5, [sp, #8]
 8009efe:	784a      	ldrb	r2, [r1, #1]
 8009f00:	1c4b      	adds	r3, r1, #1
 8009f02:	9303      	str	r3, [sp, #12]
 8009f04:	b342      	cbz	r2, 8009f58 <__hexnan+0x88>
 8009f06:	4610      	mov	r0, r2
 8009f08:	9105      	str	r1, [sp, #20]
 8009f0a:	9204      	str	r2, [sp, #16]
 8009f0c:	f7ff fd75 	bl	80099fa <__hexdig_fun>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d14f      	bne.n	8009fb4 <__hexnan+0xe4>
 8009f14:	9a04      	ldr	r2, [sp, #16]
 8009f16:	9905      	ldr	r1, [sp, #20]
 8009f18:	2a20      	cmp	r2, #32
 8009f1a:	d818      	bhi.n	8009f4e <__hexnan+0x7e>
 8009f1c:	9b02      	ldr	r3, [sp, #8]
 8009f1e:	459b      	cmp	fp, r3
 8009f20:	dd13      	ble.n	8009f4a <__hexnan+0x7a>
 8009f22:	454c      	cmp	r4, r9
 8009f24:	d206      	bcs.n	8009f34 <__hexnan+0x64>
 8009f26:	2d07      	cmp	r5, #7
 8009f28:	dc04      	bgt.n	8009f34 <__hexnan+0x64>
 8009f2a:	462a      	mov	r2, r5
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f7ff ffa8 	bl	8009e84 <L_shift>
 8009f34:	4544      	cmp	r4, r8
 8009f36:	d950      	bls.n	8009fda <__hexnan+0x10a>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f1a4 0904 	sub.w	r9, r4, #4
 8009f3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f42:	461d      	mov	r5, r3
 8009f44:	464c      	mov	r4, r9
 8009f46:	f8cd b008 	str.w	fp, [sp, #8]
 8009f4a:	9903      	ldr	r1, [sp, #12]
 8009f4c:	e7d7      	b.n	8009efe <__hexnan+0x2e>
 8009f4e:	2a29      	cmp	r2, #41	; 0x29
 8009f50:	d155      	bne.n	8009ffe <__hexnan+0x12e>
 8009f52:	3102      	adds	r1, #2
 8009f54:	f8ca 1000 	str.w	r1, [sl]
 8009f58:	f1bb 0f00 	cmp.w	fp, #0
 8009f5c:	d04f      	beq.n	8009ffe <__hexnan+0x12e>
 8009f5e:	454c      	cmp	r4, r9
 8009f60:	d206      	bcs.n	8009f70 <__hexnan+0xa0>
 8009f62:	2d07      	cmp	r5, #7
 8009f64:	dc04      	bgt.n	8009f70 <__hexnan+0xa0>
 8009f66:	462a      	mov	r2, r5
 8009f68:	4649      	mov	r1, r9
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f7ff ff8a 	bl	8009e84 <L_shift>
 8009f70:	4544      	cmp	r4, r8
 8009f72:	d934      	bls.n	8009fde <__hexnan+0x10e>
 8009f74:	4623      	mov	r3, r4
 8009f76:	f1a8 0204 	sub.w	r2, r8, #4
 8009f7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009f7e:	429f      	cmp	r7, r3
 8009f80:	f842 1f04 	str.w	r1, [r2, #4]!
 8009f84:	d2f9      	bcs.n	8009f7a <__hexnan+0xaa>
 8009f86:	1b3b      	subs	r3, r7, r4
 8009f88:	f023 0303 	bic.w	r3, r3, #3
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	3e03      	subs	r6, #3
 8009f90:	3401      	adds	r4, #1
 8009f92:	42a6      	cmp	r6, r4
 8009f94:	bf38      	it	cc
 8009f96:	2304      	movcc	r3, #4
 8009f98:	2200      	movs	r2, #0
 8009f9a:	4443      	add	r3, r8
 8009f9c:	f843 2b04 	str.w	r2, [r3], #4
 8009fa0:	429f      	cmp	r7, r3
 8009fa2:	d2fb      	bcs.n	8009f9c <__hexnan+0xcc>
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	b91b      	cbnz	r3, 8009fb0 <__hexnan+0xe0>
 8009fa8:	4547      	cmp	r7, r8
 8009faa:	d126      	bne.n	8009ffa <__hexnan+0x12a>
 8009fac:	2301      	movs	r3, #1
 8009fae:	603b      	str	r3, [r7, #0]
 8009fb0:	2005      	movs	r0, #5
 8009fb2:	e025      	b.n	800a000 <__hexnan+0x130>
 8009fb4:	3501      	adds	r5, #1
 8009fb6:	2d08      	cmp	r5, #8
 8009fb8:	f10b 0b01 	add.w	fp, fp, #1
 8009fbc:	dd06      	ble.n	8009fcc <__hexnan+0xfc>
 8009fbe:	4544      	cmp	r4, r8
 8009fc0:	d9c3      	bls.n	8009f4a <__hexnan+0x7a>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	2501      	movs	r5, #1
 8009fc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fca:	3c04      	subs	r4, #4
 8009fcc:	6822      	ldr	r2, [r4, #0]
 8009fce:	f000 000f 	and.w	r0, r0, #15
 8009fd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009fd6:	6020      	str	r0, [r4, #0]
 8009fd8:	e7b7      	b.n	8009f4a <__hexnan+0x7a>
 8009fda:	2508      	movs	r5, #8
 8009fdc:	e7b5      	b.n	8009f4a <__hexnan+0x7a>
 8009fde:	9b01      	ldr	r3, [sp, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d0df      	beq.n	8009fa4 <__hexnan+0xd4>
 8009fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe8:	f1c3 0320 	rsb	r3, r3, #32
 8009fec:	40da      	lsrs	r2, r3
 8009fee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ff8:	e7d4      	b.n	8009fa4 <__hexnan+0xd4>
 8009ffa:	3f04      	subs	r7, #4
 8009ffc:	e7d2      	b.n	8009fa4 <__hexnan+0xd4>
 8009ffe:	2004      	movs	r0, #4
 800a000:	b007      	add	sp, #28
 800a002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a006 <__ascii_mbtowc>:
 800a006:	b082      	sub	sp, #8
 800a008:	b901      	cbnz	r1, 800a00c <__ascii_mbtowc+0x6>
 800a00a:	a901      	add	r1, sp, #4
 800a00c:	b142      	cbz	r2, 800a020 <__ascii_mbtowc+0x1a>
 800a00e:	b14b      	cbz	r3, 800a024 <__ascii_mbtowc+0x1e>
 800a010:	7813      	ldrb	r3, [r2, #0]
 800a012:	600b      	str	r3, [r1, #0]
 800a014:	7812      	ldrb	r2, [r2, #0]
 800a016:	1e10      	subs	r0, r2, #0
 800a018:	bf18      	it	ne
 800a01a:	2001      	movne	r0, #1
 800a01c:	b002      	add	sp, #8
 800a01e:	4770      	bx	lr
 800a020:	4610      	mov	r0, r2
 800a022:	e7fb      	b.n	800a01c <__ascii_mbtowc+0x16>
 800a024:	f06f 0001 	mvn.w	r0, #1
 800a028:	e7f8      	b.n	800a01c <__ascii_mbtowc+0x16>

0800a02a <_realloc_r>:
 800a02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a02e:	4680      	mov	r8, r0
 800a030:	4614      	mov	r4, r2
 800a032:	460e      	mov	r6, r1
 800a034:	b921      	cbnz	r1, 800a040 <_realloc_r+0x16>
 800a036:	4611      	mov	r1, r2
 800a038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a03c:	f7fd bab0 	b.w	80075a0 <_malloc_r>
 800a040:	b92a      	cbnz	r2, 800a04e <_realloc_r+0x24>
 800a042:	f7fd fa3d 	bl	80074c0 <_free_r>
 800a046:	4625      	mov	r5, r4
 800a048:	4628      	mov	r0, r5
 800a04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a04e:	f000 f8b6 	bl	800a1be <_malloc_usable_size_r>
 800a052:	4284      	cmp	r4, r0
 800a054:	4607      	mov	r7, r0
 800a056:	d802      	bhi.n	800a05e <_realloc_r+0x34>
 800a058:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a05c:	d812      	bhi.n	800a084 <_realloc_r+0x5a>
 800a05e:	4621      	mov	r1, r4
 800a060:	4640      	mov	r0, r8
 800a062:	f7fd fa9d 	bl	80075a0 <_malloc_r>
 800a066:	4605      	mov	r5, r0
 800a068:	2800      	cmp	r0, #0
 800a06a:	d0ed      	beq.n	800a048 <_realloc_r+0x1e>
 800a06c:	42bc      	cmp	r4, r7
 800a06e:	4622      	mov	r2, r4
 800a070:	4631      	mov	r1, r6
 800a072:	bf28      	it	cs
 800a074:	463a      	movcs	r2, r7
 800a076:	f7ff fc27 	bl	80098c8 <memcpy>
 800a07a:	4631      	mov	r1, r6
 800a07c:	4640      	mov	r0, r8
 800a07e:	f7fd fa1f 	bl	80074c0 <_free_r>
 800a082:	e7e1      	b.n	800a048 <_realloc_r+0x1e>
 800a084:	4635      	mov	r5, r6
 800a086:	e7df      	b.n	800a048 <_realloc_r+0x1e>

0800a088 <_strtoul_l.constprop.0>:
 800a088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a08c:	4686      	mov	lr, r0
 800a08e:	460d      	mov	r5, r1
 800a090:	4f35      	ldr	r7, [pc, #212]	; (800a168 <_strtoul_l.constprop.0+0xe0>)
 800a092:	4628      	mov	r0, r5
 800a094:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a098:	5d3e      	ldrb	r6, [r7, r4]
 800a09a:	f016 0608 	ands.w	r6, r6, #8
 800a09e:	d1f8      	bne.n	800a092 <_strtoul_l.constprop.0+0xa>
 800a0a0:	2c2d      	cmp	r4, #45	; 0x2d
 800a0a2:	d130      	bne.n	800a106 <_strtoul_l.constprop.0+0x7e>
 800a0a4:	2601      	movs	r6, #1
 800a0a6:	782c      	ldrb	r4, [r5, #0]
 800a0a8:	1c85      	adds	r5, r0, #2
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d057      	beq.n	800a15e <_strtoul_l.constprop.0+0xd6>
 800a0ae:	2b10      	cmp	r3, #16
 800a0b0:	d109      	bne.n	800a0c6 <_strtoul_l.constprop.0+0x3e>
 800a0b2:	2c30      	cmp	r4, #48	; 0x30
 800a0b4:	d107      	bne.n	800a0c6 <_strtoul_l.constprop.0+0x3e>
 800a0b6:	7828      	ldrb	r0, [r5, #0]
 800a0b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a0bc:	2858      	cmp	r0, #88	; 0x58
 800a0be:	d149      	bne.n	800a154 <_strtoul_l.constprop.0+0xcc>
 800a0c0:	2310      	movs	r3, #16
 800a0c2:	786c      	ldrb	r4, [r5, #1]
 800a0c4:	3502      	adds	r5, #2
 800a0c6:	f04f 38ff 	mov.w	r8, #4294967295
 800a0ca:	fbb8 f8f3 	udiv	r8, r8, r3
 800a0ce:	2700      	movs	r7, #0
 800a0d0:	fb03 f908 	mul.w	r9, r3, r8
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	ea6f 0909 	mvn.w	r9, r9
 800a0da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a0de:	f1bc 0f09 	cmp.w	ip, #9
 800a0e2:	d815      	bhi.n	800a110 <_strtoul_l.constprop.0+0x88>
 800a0e4:	4664      	mov	r4, ip
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	dd23      	ble.n	800a132 <_strtoul_l.constprop.0+0xaa>
 800a0ea:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a0ee:	d007      	beq.n	800a100 <_strtoul_l.constprop.0+0x78>
 800a0f0:	4580      	cmp	r8, r0
 800a0f2:	d31b      	bcc.n	800a12c <_strtoul_l.constprop.0+0xa4>
 800a0f4:	d101      	bne.n	800a0fa <_strtoul_l.constprop.0+0x72>
 800a0f6:	45a1      	cmp	r9, r4
 800a0f8:	db18      	blt.n	800a12c <_strtoul_l.constprop.0+0xa4>
 800a0fa:	2701      	movs	r7, #1
 800a0fc:	fb00 4003 	mla	r0, r0, r3, r4
 800a100:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a104:	e7e9      	b.n	800a0da <_strtoul_l.constprop.0+0x52>
 800a106:	2c2b      	cmp	r4, #43	; 0x2b
 800a108:	bf04      	itt	eq
 800a10a:	782c      	ldrbeq	r4, [r5, #0]
 800a10c:	1c85      	addeq	r5, r0, #2
 800a10e:	e7cc      	b.n	800a0aa <_strtoul_l.constprop.0+0x22>
 800a110:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a114:	f1bc 0f19 	cmp.w	ip, #25
 800a118:	d801      	bhi.n	800a11e <_strtoul_l.constprop.0+0x96>
 800a11a:	3c37      	subs	r4, #55	; 0x37
 800a11c:	e7e3      	b.n	800a0e6 <_strtoul_l.constprop.0+0x5e>
 800a11e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a122:	f1bc 0f19 	cmp.w	ip, #25
 800a126:	d804      	bhi.n	800a132 <_strtoul_l.constprop.0+0xaa>
 800a128:	3c57      	subs	r4, #87	; 0x57
 800a12a:	e7dc      	b.n	800a0e6 <_strtoul_l.constprop.0+0x5e>
 800a12c:	f04f 37ff 	mov.w	r7, #4294967295
 800a130:	e7e6      	b.n	800a100 <_strtoul_l.constprop.0+0x78>
 800a132:	1c7b      	adds	r3, r7, #1
 800a134:	d106      	bne.n	800a144 <_strtoul_l.constprop.0+0xbc>
 800a136:	2322      	movs	r3, #34	; 0x22
 800a138:	4638      	mov	r0, r7
 800a13a:	f8ce 3000 	str.w	r3, [lr]
 800a13e:	b932      	cbnz	r2, 800a14e <_strtoul_l.constprop.0+0xc6>
 800a140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a144:	b106      	cbz	r6, 800a148 <_strtoul_l.constprop.0+0xc0>
 800a146:	4240      	negs	r0, r0
 800a148:	2a00      	cmp	r2, #0
 800a14a:	d0f9      	beq.n	800a140 <_strtoul_l.constprop.0+0xb8>
 800a14c:	b107      	cbz	r7, 800a150 <_strtoul_l.constprop.0+0xc8>
 800a14e:	1e69      	subs	r1, r5, #1
 800a150:	6011      	str	r1, [r2, #0]
 800a152:	e7f5      	b.n	800a140 <_strtoul_l.constprop.0+0xb8>
 800a154:	2430      	movs	r4, #48	; 0x30
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1b5      	bne.n	800a0c6 <_strtoul_l.constprop.0+0x3e>
 800a15a:	2308      	movs	r3, #8
 800a15c:	e7b3      	b.n	800a0c6 <_strtoul_l.constprop.0+0x3e>
 800a15e:	2c30      	cmp	r4, #48	; 0x30
 800a160:	d0a9      	beq.n	800a0b6 <_strtoul_l.constprop.0+0x2e>
 800a162:	230a      	movs	r3, #10
 800a164:	e7af      	b.n	800a0c6 <_strtoul_l.constprop.0+0x3e>
 800a166:	bf00      	nop
 800a168:	0800aa19 	.word	0x0800aa19

0800a16c <_strtoul_r>:
 800a16c:	f7ff bf8c 	b.w	800a088 <_strtoul_l.constprop.0>

0800a170 <__ascii_wctomb>:
 800a170:	4603      	mov	r3, r0
 800a172:	4608      	mov	r0, r1
 800a174:	b141      	cbz	r1, 800a188 <__ascii_wctomb+0x18>
 800a176:	2aff      	cmp	r2, #255	; 0xff
 800a178:	d904      	bls.n	800a184 <__ascii_wctomb+0x14>
 800a17a:	228a      	movs	r2, #138	; 0x8a
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	4770      	bx	lr
 800a184:	2001      	movs	r0, #1
 800a186:	700a      	strb	r2, [r1, #0]
 800a188:	4770      	bx	lr
	...

0800a18c <fiprintf>:
 800a18c:	b40e      	push	{r1, r2, r3}
 800a18e:	b503      	push	{r0, r1, lr}
 800a190:	4601      	mov	r1, r0
 800a192:	ab03      	add	r3, sp, #12
 800a194:	4805      	ldr	r0, [pc, #20]	; (800a1ac <fiprintf+0x20>)
 800a196:	f853 2b04 	ldr.w	r2, [r3], #4
 800a19a:	6800      	ldr	r0, [r0, #0]
 800a19c:	9301      	str	r3, [sp, #4]
 800a19e:	f000 f83d 	bl	800a21c <_vfiprintf_r>
 800a1a2:	b002      	add	sp, #8
 800a1a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1a8:	b003      	add	sp, #12
 800a1aa:	4770      	bx	lr
 800a1ac:	20000064 	.word	0x20000064

0800a1b0 <abort>:
 800a1b0:	2006      	movs	r0, #6
 800a1b2:	b508      	push	{r3, lr}
 800a1b4:	f000 fa0a 	bl	800a5cc <raise>
 800a1b8:	2001      	movs	r0, #1
 800a1ba:	f7f7 fe1a 	bl	8001df2 <_exit>

0800a1be <_malloc_usable_size_r>:
 800a1be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c2:	1f18      	subs	r0, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	bfbc      	itt	lt
 800a1c8:	580b      	ldrlt	r3, [r1, r0]
 800a1ca:	18c0      	addlt	r0, r0, r3
 800a1cc:	4770      	bx	lr

0800a1ce <__sfputc_r>:
 800a1ce:	6893      	ldr	r3, [r2, #8]
 800a1d0:	b410      	push	{r4}
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	6093      	str	r3, [r2, #8]
 800a1d8:	da07      	bge.n	800a1ea <__sfputc_r+0x1c>
 800a1da:	6994      	ldr	r4, [r2, #24]
 800a1dc:	42a3      	cmp	r3, r4
 800a1de:	db01      	blt.n	800a1e4 <__sfputc_r+0x16>
 800a1e0:	290a      	cmp	r1, #10
 800a1e2:	d102      	bne.n	800a1ea <__sfputc_r+0x1c>
 800a1e4:	bc10      	pop	{r4}
 800a1e6:	f000 b933 	b.w	800a450 <__swbuf_r>
 800a1ea:	6813      	ldr	r3, [r2, #0]
 800a1ec:	1c58      	adds	r0, r3, #1
 800a1ee:	6010      	str	r0, [r2, #0]
 800a1f0:	7019      	strb	r1, [r3, #0]
 800a1f2:	4608      	mov	r0, r1
 800a1f4:	bc10      	pop	{r4}
 800a1f6:	4770      	bx	lr

0800a1f8 <__sfputs_r>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	460f      	mov	r7, r1
 800a1fe:	4614      	mov	r4, r2
 800a200:	18d5      	adds	r5, r2, r3
 800a202:	42ac      	cmp	r4, r5
 800a204:	d101      	bne.n	800a20a <__sfputs_r+0x12>
 800a206:	2000      	movs	r0, #0
 800a208:	e007      	b.n	800a21a <__sfputs_r+0x22>
 800a20a:	463a      	mov	r2, r7
 800a20c:	4630      	mov	r0, r6
 800a20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a212:	f7ff ffdc 	bl	800a1ce <__sfputc_r>
 800a216:	1c43      	adds	r3, r0, #1
 800a218:	d1f3      	bne.n	800a202 <__sfputs_r+0xa>
 800a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a21c <_vfiprintf_r>:
 800a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	460d      	mov	r5, r1
 800a222:	4614      	mov	r4, r2
 800a224:	4698      	mov	r8, r3
 800a226:	4606      	mov	r6, r0
 800a228:	b09d      	sub	sp, #116	; 0x74
 800a22a:	b118      	cbz	r0, 800a234 <_vfiprintf_r+0x18>
 800a22c:	6a03      	ldr	r3, [r0, #32]
 800a22e:	b90b      	cbnz	r3, 800a234 <_vfiprintf_r+0x18>
 800a230:	f7fc f980 	bl	8006534 <__sinit>
 800a234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a236:	07d9      	lsls	r1, r3, #31
 800a238:	d405      	bmi.n	800a246 <_vfiprintf_r+0x2a>
 800a23a:	89ab      	ldrh	r3, [r5, #12]
 800a23c:	059a      	lsls	r2, r3, #22
 800a23e:	d402      	bmi.n	800a246 <_vfiprintf_r+0x2a>
 800a240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a242:	f7fc faba 	bl	80067ba <__retarget_lock_acquire_recursive>
 800a246:	89ab      	ldrh	r3, [r5, #12]
 800a248:	071b      	lsls	r3, r3, #28
 800a24a:	d501      	bpl.n	800a250 <_vfiprintf_r+0x34>
 800a24c:	692b      	ldr	r3, [r5, #16]
 800a24e:	b99b      	cbnz	r3, 800a278 <_vfiprintf_r+0x5c>
 800a250:	4629      	mov	r1, r5
 800a252:	4630      	mov	r0, r6
 800a254:	f000 f93a 	bl	800a4cc <__swsetup_r>
 800a258:	b170      	cbz	r0, 800a278 <_vfiprintf_r+0x5c>
 800a25a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a25c:	07dc      	lsls	r4, r3, #31
 800a25e:	d504      	bpl.n	800a26a <_vfiprintf_r+0x4e>
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	b01d      	add	sp, #116	; 0x74
 800a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26a:	89ab      	ldrh	r3, [r5, #12]
 800a26c:	0598      	lsls	r0, r3, #22
 800a26e:	d4f7      	bmi.n	800a260 <_vfiprintf_r+0x44>
 800a270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a272:	f7fc faa3 	bl	80067bc <__retarget_lock_release_recursive>
 800a276:	e7f3      	b.n	800a260 <_vfiprintf_r+0x44>
 800a278:	2300      	movs	r3, #0
 800a27a:	9309      	str	r3, [sp, #36]	; 0x24
 800a27c:	2320      	movs	r3, #32
 800a27e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a282:	2330      	movs	r3, #48	; 0x30
 800a284:	f04f 0901 	mov.w	r9, #1
 800a288:	f8cd 800c 	str.w	r8, [sp, #12]
 800a28c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a43c <_vfiprintf_r+0x220>
 800a290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a294:	4623      	mov	r3, r4
 800a296:	469a      	mov	sl, r3
 800a298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a29c:	b10a      	cbz	r2, 800a2a2 <_vfiprintf_r+0x86>
 800a29e:	2a25      	cmp	r2, #37	; 0x25
 800a2a0:	d1f9      	bne.n	800a296 <_vfiprintf_r+0x7a>
 800a2a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a2a6:	d00b      	beq.n	800a2c0 <_vfiprintf_r+0xa4>
 800a2a8:	465b      	mov	r3, fp
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7ff ffa2 	bl	800a1f8 <__sfputs_r>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	f000 80a9 	beq.w	800a40c <_vfiprintf_r+0x1f0>
 800a2ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2bc:	445a      	add	r2, fp
 800a2be:	9209      	str	r2, [sp, #36]	; 0x24
 800a2c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f000 80a1 	beq.w	800a40c <_vfiprintf_r+0x1f0>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2d4:	f10a 0a01 	add.w	sl, sl, #1
 800a2d8:	9304      	str	r3, [sp, #16]
 800a2da:	9307      	str	r3, [sp, #28]
 800a2dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a2e2:	4654      	mov	r4, sl
 800a2e4:	2205      	movs	r2, #5
 800a2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ea:	4854      	ldr	r0, [pc, #336]	; (800a43c <_vfiprintf_r+0x220>)
 800a2ec:	f7fc fa67 	bl	80067be <memchr>
 800a2f0:	9a04      	ldr	r2, [sp, #16]
 800a2f2:	b9d8      	cbnz	r0, 800a32c <_vfiprintf_r+0x110>
 800a2f4:	06d1      	lsls	r1, r2, #27
 800a2f6:	bf44      	itt	mi
 800a2f8:	2320      	movmi	r3, #32
 800a2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2fe:	0713      	lsls	r3, r2, #28
 800a300:	bf44      	itt	mi
 800a302:	232b      	movmi	r3, #43	; 0x2b
 800a304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a308:	f89a 3000 	ldrb.w	r3, [sl]
 800a30c:	2b2a      	cmp	r3, #42	; 0x2a
 800a30e:	d015      	beq.n	800a33c <_vfiprintf_r+0x120>
 800a310:	4654      	mov	r4, sl
 800a312:	2000      	movs	r0, #0
 800a314:	f04f 0c0a 	mov.w	ip, #10
 800a318:	9a07      	ldr	r2, [sp, #28]
 800a31a:	4621      	mov	r1, r4
 800a31c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a320:	3b30      	subs	r3, #48	; 0x30
 800a322:	2b09      	cmp	r3, #9
 800a324:	d94d      	bls.n	800a3c2 <_vfiprintf_r+0x1a6>
 800a326:	b1b0      	cbz	r0, 800a356 <_vfiprintf_r+0x13a>
 800a328:	9207      	str	r2, [sp, #28]
 800a32a:	e014      	b.n	800a356 <_vfiprintf_r+0x13a>
 800a32c:	eba0 0308 	sub.w	r3, r0, r8
 800a330:	fa09 f303 	lsl.w	r3, r9, r3
 800a334:	4313      	orrs	r3, r2
 800a336:	46a2      	mov	sl, r4
 800a338:	9304      	str	r3, [sp, #16]
 800a33a:	e7d2      	b.n	800a2e2 <_vfiprintf_r+0xc6>
 800a33c:	9b03      	ldr	r3, [sp, #12]
 800a33e:	1d19      	adds	r1, r3, #4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	9103      	str	r1, [sp, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	bfbb      	ittet	lt
 800a348:	425b      	neglt	r3, r3
 800a34a:	f042 0202 	orrlt.w	r2, r2, #2
 800a34e:	9307      	strge	r3, [sp, #28]
 800a350:	9307      	strlt	r3, [sp, #28]
 800a352:	bfb8      	it	lt
 800a354:	9204      	strlt	r2, [sp, #16]
 800a356:	7823      	ldrb	r3, [r4, #0]
 800a358:	2b2e      	cmp	r3, #46	; 0x2e
 800a35a:	d10c      	bne.n	800a376 <_vfiprintf_r+0x15a>
 800a35c:	7863      	ldrb	r3, [r4, #1]
 800a35e:	2b2a      	cmp	r3, #42	; 0x2a
 800a360:	d134      	bne.n	800a3cc <_vfiprintf_r+0x1b0>
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	3402      	adds	r4, #2
 800a366:	1d1a      	adds	r2, r3, #4
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	9203      	str	r2, [sp, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	bfb8      	it	lt
 800a370:	f04f 33ff 	movlt.w	r3, #4294967295
 800a374:	9305      	str	r3, [sp, #20]
 800a376:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a440 <_vfiprintf_r+0x224>
 800a37a:	2203      	movs	r2, #3
 800a37c:	4650      	mov	r0, sl
 800a37e:	7821      	ldrb	r1, [r4, #0]
 800a380:	f7fc fa1d 	bl	80067be <memchr>
 800a384:	b138      	cbz	r0, 800a396 <_vfiprintf_r+0x17a>
 800a386:	2240      	movs	r2, #64	; 0x40
 800a388:	9b04      	ldr	r3, [sp, #16]
 800a38a:	eba0 000a 	sub.w	r0, r0, sl
 800a38e:	4082      	lsls	r2, r0
 800a390:	4313      	orrs	r3, r2
 800a392:	3401      	adds	r4, #1
 800a394:	9304      	str	r3, [sp, #16]
 800a396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39a:	2206      	movs	r2, #6
 800a39c:	4829      	ldr	r0, [pc, #164]	; (800a444 <_vfiprintf_r+0x228>)
 800a39e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3a2:	f7fc fa0c 	bl	80067be <memchr>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d03f      	beq.n	800a42a <_vfiprintf_r+0x20e>
 800a3aa:	4b27      	ldr	r3, [pc, #156]	; (800a448 <_vfiprintf_r+0x22c>)
 800a3ac:	bb1b      	cbnz	r3, 800a3f6 <_vfiprintf_r+0x1da>
 800a3ae:	9b03      	ldr	r3, [sp, #12]
 800a3b0:	3307      	adds	r3, #7
 800a3b2:	f023 0307 	bic.w	r3, r3, #7
 800a3b6:	3308      	adds	r3, #8
 800a3b8:	9303      	str	r3, [sp, #12]
 800a3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3bc:	443b      	add	r3, r7
 800a3be:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c0:	e768      	b.n	800a294 <_vfiprintf_r+0x78>
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3ca:	e7a6      	b.n	800a31a <_vfiprintf_r+0xfe>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f04f 0c0a 	mov.w	ip, #10
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	3401      	adds	r4, #1
 800a3d6:	9305      	str	r3, [sp, #20]
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3de:	3a30      	subs	r2, #48	; 0x30
 800a3e0:	2a09      	cmp	r2, #9
 800a3e2:	d903      	bls.n	800a3ec <_vfiprintf_r+0x1d0>
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d0c6      	beq.n	800a376 <_vfiprintf_r+0x15a>
 800a3e8:	9105      	str	r1, [sp, #20]
 800a3ea:	e7c4      	b.n	800a376 <_vfiprintf_r+0x15a>
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3f4:	e7f0      	b.n	800a3d8 <_vfiprintf_r+0x1bc>
 800a3f6:	ab03      	add	r3, sp, #12
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	462a      	mov	r2, r5
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	4b13      	ldr	r3, [pc, #76]	; (800a44c <_vfiprintf_r+0x230>)
 800a400:	a904      	add	r1, sp, #16
 800a402:	f7fb fa3b 	bl	800587c <_printf_float>
 800a406:	4607      	mov	r7, r0
 800a408:	1c78      	adds	r0, r7, #1
 800a40a:	d1d6      	bne.n	800a3ba <_vfiprintf_r+0x19e>
 800a40c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a40e:	07d9      	lsls	r1, r3, #31
 800a410:	d405      	bmi.n	800a41e <_vfiprintf_r+0x202>
 800a412:	89ab      	ldrh	r3, [r5, #12]
 800a414:	059a      	lsls	r2, r3, #22
 800a416:	d402      	bmi.n	800a41e <_vfiprintf_r+0x202>
 800a418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a41a:	f7fc f9cf 	bl	80067bc <__retarget_lock_release_recursive>
 800a41e:	89ab      	ldrh	r3, [r5, #12]
 800a420:	065b      	lsls	r3, r3, #25
 800a422:	f53f af1d 	bmi.w	800a260 <_vfiprintf_r+0x44>
 800a426:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a428:	e71c      	b.n	800a264 <_vfiprintf_r+0x48>
 800a42a:	ab03      	add	r3, sp, #12
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	462a      	mov	r2, r5
 800a430:	4630      	mov	r0, r6
 800a432:	4b06      	ldr	r3, [pc, #24]	; (800a44c <_vfiprintf_r+0x230>)
 800a434:	a904      	add	r1, sp, #16
 800a436:	f7fb fcc1 	bl	8005dbc <_printf_i>
 800a43a:	e7e4      	b.n	800a406 <_vfiprintf_r+0x1ea>
 800a43c:	0800ab19 	.word	0x0800ab19
 800a440:	0800ab1f 	.word	0x0800ab1f
 800a444:	0800ab23 	.word	0x0800ab23
 800a448:	0800587d 	.word	0x0800587d
 800a44c:	0800a1f9 	.word	0x0800a1f9

0800a450 <__swbuf_r>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	460e      	mov	r6, r1
 800a454:	4614      	mov	r4, r2
 800a456:	4605      	mov	r5, r0
 800a458:	b118      	cbz	r0, 800a462 <__swbuf_r+0x12>
 800a45a:	6a03      	ldr	r3, [r0, #32]
 800a45c:	b90b      	cbnz	r3, 800a462 <__swbuf_r+0x12>
 800a45e:	f7fc f869 	bl	8006534 <__sinit>
 800a462:	69a3      	ldr	r3, [r4, #24]
 800a464:	60a3      	str	r3, [r4, #8]
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	071a      	lsls	r2, r3, #28
 800a46a:	d525      	bpl.n	800a4b8 <__swbuf_r+0x68>
 800a46c:	6923      	ldr	r3, [r4, #16]
 800a46e:	b31b      	cbz	r3, 800a4b8 <__swbuf_r+0x68>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	6922      	ldr	r2, [r4, #16]
 800a474:	b2f6      	uxtb	r6, r6
 800a476:	1a98      	subs	r0, r3, r2
 800a478:	6963      	ldr	r3, [r4, #20]
 800a47a:	4637      	mov	r7, r6
 800a47c:	4283      	cmp	r3, r0
 800a47e:	dc04      	bgt.n	800a48a <__swbuf_r+0x3a>
 800a480:	4621      	mov	r1, r4
 800a482:	4628      	mov	r0, r5
 800a484:	f7ff f94a 	bl	800971c <_fflush_r>
 800a488:	b9e0      	cbnz	r0, 800a4c4 <__swbuf_r+0x74>
 800a48a:	68a3      	ldr	r3, [r4, #8]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	60a3      	str	r3, [r4, #8]
 800a490:	6823      	ldr	r3, [r4, #0]
 800a492:	1c5a      	adds	r2, r3, #1
 800a494:	6022      	str	r2, [r4, #0]
 800a496:	701e      	strb	r6, [r3, #0]
 800a498:	6962      	ldr	r2, [r4, #20]
 800a49a:	1c43      	adds	r3, r0, #1
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d004      	beq.n	800a4aa <__swbuf_r+0x5a>
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	07db      	lsls	r3, r3, #31
 800a4a4:	d506      	bpl.n	800a4b4 <__swbuf_r+0x64>
 800a4a6:	2e0a      	cmp	r6, #10
 800a4a8:	d104      	bne.n	800a4b4 <__swbuf_r+0x64>
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f7ff f935 	bl	800971c <_fflush_r>
 800a4b2:	b938      	cbnz	r0, 800a4c4 <__swbuf_r+0x74>
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	f000 f806 	bl	800a4cc <__swsetup_r>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d0d5      	beq.n	800a470 <__swbuf_r+0x20>
 800a4c4:	f04f 37ff 	mov.w	r7, #4294967295
 800a4c8:	e7f4      	b.n	800a4b4 <__swbuf_r+0x64>
	...

0800a4cc <__swsetup_r>:
 800a4cc:	b538      	push	{r3, r4, r5, lr}
 800a4ce:	4b2a      	ldr	r3, [pc, #168]	; (800a578 <__swsetup_r+0xac>)
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	6818      	ldr	r0, [r3, #0]
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	b118      	cbz	r0, 800a4e0 <__swsetup_r+0x14>
 800a4d8:	6a03      	ldr	r3, [r0, #32]
 800a4da:	b90b      	cbnz	r3, 800a4e0 <__swsetup_r+0x14>
 800a4dc:	f7fc f82a 	bl	8006534 <__sinit>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4e6:	0718      	lsls	r0, r3, #28
 800a4e8:	d422      	bmi.n	800a530 <__swsetup_r+0x64>
 800a4ea:	06d9      	lsls	r1, r3, #27
 800a4ec:	d407      	bmi.n	800a4fe <__swsetup_r+0x32>
 800a4ee:	2309      	movs	r3, #9
 800a4f0:	602b      	str	r3, [r5, #0]
 800a4f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4fa:	81a3      	strh	r3, [r4, #12]
 800a4fc:	e034      	b.n	800a568 <__swsetup_r+0x9c>
 800a4fe:	0758      	lsls	r0, r3, #29
 800a500:	d512      	bpl.n	800a528 <__swsetup_r+0x5c>
 800a502:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a504:	b141      	cbz	r1, 800a518 <__swsetup_r+0x4c>
 800a506:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a50a:	4299      	cmp	r1, r3
 800a50c:	d002      	beq.n	800a514 <__swsetup_r+0x48>
 800a50e:	4628      	mov	r0, r5
 800a510:	f7fc ffd6 	bl	80074c0 <_free_r>
 800a514:	2300      	movs	r3, #0
 800a516:	6363      	str	r3, [r4, #52]	; 0x34
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	2300      	movs	r3, #0
 800a522:	6063      	str	r3, [r4, #4]
 800a524:	6923      	ldr	r3, [r4, #16]
 800a526:	6023      	str	r3, [r4, #0]
 800a528:	89a3      	ldrh	r3, [r4, #12]
 800a52a:	f043 0308 	orr.w	r3, r3, #8
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	6923      	ldr	r3, [r4, #16]
 800a532:	b94b      	cbnz	r3, 800a548 <__swsetup_r+0x7c>
 800a534:	89a3      	ldrh	r3, [r4, #12]
 800a536:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a53a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a53e:	d003      	beq.n	800a548 <__swsetup_r+0x7c>
 800a540:	4621      	mov	r1, r4
 800a542:	4628      	mov	r0, r5
 800a544:	f000 f883 	bl	800a64e <__smakebuf_r>
 800a548:	89a0      	ldrh	r0, [r4, #12]
 800a54a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a54e:	f010 0301 	ands.w	r3, r0, #1
 800a552:	d00a      	beq.n	800a56a <__swsetup_r+0x9e>
 800a554:	2300      	movs	r3, #0
 800a556:	60a3      	str	r3, [r4, #8]
 800a558:	6963      	ldr	r3, [r4, #20]
 800a55a:	425b      	negs	r3, r3
 800a55c:	61a3      	str	r3, [r4, #24]
 800a55e:	6923      	ldr	r3, [r4, #16]
 800a560:	b943      	cbnz	r3, 800a574 <__swsetup_r+0xa8>
 800a562:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a566:	d1c4      	bne.n	800a4f2 <__swsetup_r+0x26>
 800a568:	bd38      	pop	{r3, r4, r5, pc}
 800a56a:	0781      	lsls	r1, r0, #30
 800a56c:	bf58      	it	pl
 800a56e:	6963      	ldrpl	r3, [r4, #20]
 800a570:	60a3      	str	r3, [r4, #8]
 800a572:	e7f4      	b.n	800a55e <__swsetup_r+0x92>
 800a574:	2000      	movs	r0, #0
 800a576:	e7f7      	b.n	800a568 <__swsetup_r+0x9c>
 800a578:	20000064 	.word	0x20000064

0800a57c <_raise_r>:
 800a57c:	291f      	cmp	r1, #31
 800a57e:	b538      	push	{r3, r4, r5, lr}
 800a580:	4604      	mov	r4, r0
 800a582:	460d      	mov	r5, r1
 800a584:	d904      	bls.n	800a590 <_raise_r+0x14>
 800a586:	2316      	movs	r3, #22
 800a588:	6003      	str	r3, [r0, #0]
 800a58a:	f04f 30ff 	mov.w	r0, #4294967295
 800a58e:	bd38      	pop	{r3, r4, r5, pc}
 800a590:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a592:	b112      	cbz	r2, 800a59a <_raise_r+0x1e>
 800a594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a598:	b94b      	cbnz	r3, 800a5ae <_raise_r+0x32>
 800a59a:	4620      	mov	r0, r4
 800a59c:	f000 f830 	bl	800a600 <_getpid_r>
 800a5a0:	462a      	mov	r2, r5
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5aa:	f000 b817 	b.w	800a5dc <_kill_r>
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d00a      	beq.n	800a5c8 <_raise_r+0x4c>
 800a5b2:	1c59      	adds	r1, r3, #1
 800a5b4:	d103      	bne.n	800a5be <_raise_r+0x42>
 800a5b6:	2316      	movs	r3, #22
 800a5b8:	6003      	str	r3, [r0, #0]
 800a5ba:	2001      	movs	r0, #1
 800a5bc:	e7e7      	b.n	800a58e <_raise_r+0x12>
 800a5be:	2400      	movs	r4, #0
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5c6:	4798      	blx	r3
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	e7e0      	b.n	800a58e <_raise_r+0x12>

0800a5cc <raise>:
 800a5cc:	4b02      	ldr	r3, [pc, #8]	; (800a5d8 <raise+0xc>)
 800a5ce:	4601      	mov	r1, r0
 800a5d0:	6818      	ldr	r0, [r3, #0]
 800a5d2:	f7ff bfd3 	b.w	800a57c <_raise_r>
 800a5d6:	bf00      	nop
 800a5d8:	20000064 	.word	0x20000064

0800a5dc <_kill_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	2300      	movs	r3, #0
 800a5e0:	4d06      	ldr	r5, [pc, #24]	; (800a5fc <_kill_r+0x20>)
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	4608      	mov	r0, r1
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	602b      	str	r3, [r5, #0]
 800a5ea:	f7f7 fbf2 	bl	8001dd2 <_kill>
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	d102      	bne.n	800a5f8 <_kill_r+0x1c>
 800a5f2:	682b      	ldr	r3, [r5, #0]
 800a5f4:	b103      	cbz	r3, 800a5f8 <_kill_r+0x1c>
 800a5f6:	6023      	str	r3, [r4, #0]
 800a5f8:	bd38      	pop	{r3, r4, r5, pc}
 800a5fa:	bf00      	nop
 800a5fc:	200007d4 	.word	0x200007d4

0800a600 <_getpid_r>:
 800a600:	f7f7 bbe0 	b.w	8001dc4 <_getpid>

0800a604 <__swhatbuf_r>:
 800a604:	b570      	push	{r4, r5, r6, lr}
 800a606:	460c      	mov	r4, r1
 800a608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60c:	4615      	mov	r5, r2
 800a60e:	2900      	cmp	r1, #0
 800a610:	461e      	mov	r6, r3
 800a612:	b096      	sub	sp, #88	; 0x58
 800a614:	da0c      	bge.n	800a630 <__swhatbuf_r+0x2c>
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	2100      	movs	r1, #0
 800a61a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a61e:	bf0c      	ite	eq
 800a620:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a624:	2340      	movne	r3, #64	; 0x40
 800a626:	2000      	movs	r0, #0
 800a628:	6031      	str	r1, [r6, #0]
 800a62a:	602b      	str	r3, [r5, #0]
 800a62c:	b016      	add	sp, #88	; 0x58
 800a62e:	bd70      	pop	{r4, r5, r6, pc}
 800a630:	466a      	mov	r2, sp
 800a632:	f000 f849 	bl	800a6c8 <_fstat_r>
 800a636:	2800      	cmp	r0, #0
 800a638:	dbed      	blt.n	800a616 <__swhatbuf_r+0x12>
 800a63a:	9901      	ldr	r1, [sp, #4]
 800a63c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a640:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a644:	4259      	negs	r1, r3
 800a646:	4159      	adcs	r1, r3
 800a648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a64c:	e7eb      	b.n	800a626 <__swhatbuf_r+0x22>

0800a64e <__smakebuf_r>:
 800a64e:	898b      	ldrh	r3, [r1, #12]
 800a650:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a652:	079d      	lsls	r5, r3, #30
 800a654:	4606      	mov	r6, r0
 800a656:	460c      	mov	r4, r1
 800a658:	d507      	bpl.n	800a66a <__smakebuf_r+0x1c>
 800a65a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a65e:	6023      	str	r3, [r4, #0]
 800a660:	6123      	str	r3, [r4, #16]
 800a662:	2301      	movs	r3, #1
 800a664:	6163      	str	r3, [r4, #20]
 800a666:	b002      	add	sp, #8
 800a668:	bd70      	pop	{r4, r5, r6, pc}
 800a66a:	466a      	mov	r2, sp
 800a66c:	ab01      	add	r3, sp, #4
 800a66e:	f7ff ffc9 	bl	800a604 <__swhatbuf_r>
 800a672:	9900      	ldr	r1, [sp, #0]
 800a674:	4605      	mov	r5, r0
 800a676:	4630      	mov	r0, r6
 800a678:	f7fc ff92 	bl	80075a0 <_malloc_r>
 800a67c:	b948      	cbnz	r0, 800a692 <__smakebuf_r+0x44>
 800a67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a682:	059a      	lsls	r2, r3, #22
 800a684:	d4ef      	bmi.n	800a666 <__smakebuf_r+0x18>
 800a686:	f023 0303 	bic.w	r3, r3, #3
 800a68a:	f043 0302 	orr.w	r3, r3, #2
 800a68e:	81a3      	strh	r3, [r4, #12]
 800a690:	e7e3      	b.n	800a65a <__smakebuf_r+0xc>
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	6020      	str	r0, [r4, #0]
 800a696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a69a:	81a3      	strh	r3, [r4, #12]
 800a69c:	9b00      	ldr	r3, [sp, #0]
 800a69e:	6120      	str	r0, [r4, #16]
 800a6a0:	6163      	str	r3, [r4, #20]
 800a6a2:	9b01      	ldr	r3, [sp, #4]
 800a6a4:	b15b      	cbz	r3, 800a6be <__smakebuf_r+0x70>
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6ac:	f000 f81e 	bl	800a6ec <_isatty_r>
 800a6b0:	b128      	cbz	r0, 800a6be <__smakebuf_r+0x70>
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	f023 0303 	bic.w	r3, r3, #3
 800a6b8:	f043 0301 	orr.w	r3, r3, #1
 800a6bc:	81a3      	strh	r3, [r4, #12]
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	431d      	orrs	r5, r3
 800a6c2:	81a5      	strh	r5, [r4, #12]
 800a6c4:	e7cf      	b.n	800a666 <__smakebuf_r+0x18>
	...

0800a6c8 <_fstat_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	4d06      	ldr	r5, [pc, #24]	; (800a6e8 <_fstat_r+0x20>)
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	4608      	mov	r0, r1
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	f7f7 fbda 	bl	8001e8e <_fstat>
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	d102      	bne.n	800a6e4 <_fstat_r+0x1c>
 800a6de:	682b      	ldr	r3, [r5, #0]
 800a6e0:	b103      	cbz	r3, 800a6e4 <_fstat_r+0x1c>
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	bd38      	pop	{r3, r4, r5, pc}
 800a6e6:	bf00      	nop
 800a6e8:	200007d4 	.word	0x200007d4

0800a6ec <_isatty_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	4d05      	ldr	r5, [pc, #20]	; (800a708 <_isatty_r+0x1c>)
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	4608      	mov	r0, r1
 800a6f6:	602b      	str	r3, [r5, #0]
 800a6f8:	f7f7 fbd8 	bl	8001eac <_isatty>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d102      	bne.n	800a706 <_isatty_r+0x1a>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	b103      	cbz	r3, 800a706 <_isatty_r+0x1a>
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	200007d4 	.word	0x200007d4

0800a70c <_init>:
 800a70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70e:	bf00      	nop
 800a710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a712:	bc08      	pop	{r3}
 800a714:	469e      	mov	lr, r3
 800a716:	4770      	bx	lr

0800a718 <_fini>:
 800a718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71a:	bf00      	nop
 800a71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a71e:	bc08      	pop	{r3}
 800a720:	469e      	mov	lr, r3
 800a722:	4770      	bx	lr
